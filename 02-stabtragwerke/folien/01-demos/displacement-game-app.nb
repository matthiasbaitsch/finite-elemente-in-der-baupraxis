(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    437633,       8507]
NotebookOptionsPosition[    437338,       8494]
NotebookOutlinePosition[    437675,       8509]
CellTagsIndexPosition[    437632,       8506]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`Tragwerk$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Tragwerk$$], 1}, {
      1 -> "Zwei St\[ADoubleDot]be", 2 -> "Drei St\[ADoubleDot]be", 3 -> 
       "Fachwerk"}}}, Typeset`size$$ = {869., {401., 406.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`Tragwerk$1320953$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`Tragwerk$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`Tragwerk$$, $CellContext`Tragwerk$1320953$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`models$ = {
           $CellContext`m1[], 
           $CellContext`m2[], 
           $CellContext`m3[]}, $CellContext`m$}, $CellContext`m$ = 
         Part[$CellContext`models$, $CellContext`Tragwerk$$]; $CellContext`m$[
         "solve"]; $CellContext`m$[
         "setUBar", 
          0 $CellContext`m$[
           "u"]]; $CellContext`setSize[$CellContext`m$]; \
$CellContext`contentManipulate[$CellContext`m$]], 
      "Specifications" :> {{{$CellContext`Tragwerk$$, 1}, {
         1 -> "Zwei St\[ADoubleDot]be", 2 -> "Drei St\[ADoubleDot]be", 3 -> 
          "Fachwerk"}}}, "Options" :> {FrameMargins -> -10}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{872., {424., 430.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`m1[] := 
       Module[{$CellContext`EA, $CellContext`m, $CellContext`n1, \
$CellContext`n2, $CellContext`n3}, $CellContext`EA = 
          
          500; $CellContext`m = $CellContext`newModel[]; $CellContext`n1 = \
$CellContext`m["addNode", 
            $CellContext`newNode[0, 0]]; $CellContext`n1["c"] = {
           False, False, True}; $CellContext`n2 = $CellContext`m["addNode", 
            $CellContext`newNode[4, 0]]; $CellContext`m["addForce", 
           $CellContext`newForce[$CellContext`n2, {0, 10, 
            0}]]; $CellContext`n3 = $CellContext`m["addNode", 
            $CellContext`newNode[0, 2]]; $CellContext`n3["c"] = {
           False, False, True}; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n1, $CellContext`n2, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n3, $CellContext`n2, \
$CellContext`EA]]; $CellContext`m["ui", "bounds"] = {{-1, 5}, {-3, 
           1}}; $CellContext`m["ui", "scale u"] = 
          1; $CellContext`m["ui scale N"] = -0.04; $CellContext`m[
           "ui", "text"] = {{"10 kN", 4.15, 0.6}}; 
         Return[$CellContext`m]], $CellContext`m = $CellContext`m$1228480, 
       Attributes[$CellContext`m$1228480] = {
        Temporary}, $CellContext`m$1228480["characteristicSize"] = 
       Return[4 Sqrt[2]], $CellContext`m$1228480["checkConsistency"] = 
       Null, $CellContext`m$1228480[
        "elements"] = {$CellContext`e$1228490, $CellContext`e$1228493, \
$CellContext`e$1228496, $CellContext`e$1228499, $CellContext`e$1228502, \
$CellContext`e$1228505}, $CellContext`m$1228480["enumerateDofs"] = 
       Null, $CellContext`m$1228480[
        "forces"] = {$CellContext`f$1228486, $CellContext`f$1228487}, \
$CellContext`m$1228480["KBar"] = Return[{}], $CellContext`m$1228480["KBarII"] = 
       Return[{}], $CellContext`m$1228480["KBar nl"] = 
       Return[{}], $CellContext`m$1228480["lambda crit"] = 
       Last[$CellContext`lambdas$1232277], $CellContext`m$1228480[
        "line elements"] = {$CellContext`e$1228490, $CellContext`e$1228493, \
$CellContext`e$1228496, $CellContext`e$1228499, $CellContext`e$1228502, \
$CellContext`e$1228505}, $CellContext`m$1228480[
        "loads"] = {}, $CellContext`m$1228480["ndofs"] = 
       6, $CellContext`m$1228480[
        "nodes"] = {$CellContext`n$1228481, $CellContext`n$1228482, \
$CellContext`n$1228483, $CellContext`n$1228484, $CellContext`n$1228485}, \
$CellContext`m$1228480["pBar"] = 
       Return[{0, 0, 0, 10, 0, 10}], $CellContext`m$1228480[
        "point elements"] = {}, $CellContext`m$1228480[
        "rigidLinks"] = {}, $CellContext`m$1228480["SBar nl"] = 
       Return[{-15.885136967004987`, -8.766509877730805, 3.076725624077615, 
         3.3653572152850924`, 14.512449537619778`, 
         0.9204568352217339}], $CellContext`m$1228480[
        "sideConstraints"] = {}, $CellContext`m$1228480["solve"] = 
       Null, $CellContext`m$1228480["solve buckling"] = 
       Null, $CellContext`m$1228480["truss only"] = 
       Return[True], $CellContext`m$1228480["u"] = {-0.6, 1.7313708498984761`,
         0.2, 1.931370849898476, 0.4, 
        3.2970562748477144`}, $CellContext`m$1228480[
        "ui scale N"] = -0.125, $CellContext`m$1228480[
        "ui", "bounds"] = {{-2, 10}, {6.5, -2.4}}, $CellContext`m$1228480[
        "ui", "csys"] = 
       Null, $CellContext`m$1228480[
        "ui", "dimensions"] = {}, $CellContext`m$1228480["ui", "scale f"] = {
        1, 1, 1}, $CellContext`m$1228480["ui", "scale u"] = 
       1, $CellContext`m$1228480[
        "ui", "text"] = {{"10 kN", 4.25, -5}, {
         "10 kN", 7.6, -2.2}}, $CellContext`m$1228480["thIICompressionOnly", 
         Pattern[$CellContext`v$, 
          Blank[]]] := 
       Do[$CellContext`e["thIICompressionOnly"] = $CellContext`v$; 
         Null, {$CellContext`e, 
          $CellContext`m$1228480["elements"]}], $CellContext`m$1228480[
        "addNode", 
         Pattern[$CellContext`n$, 
          Blank[]]] := (AppendTo[
          $CellContext`m$1228480["nodes"], $CellContext`n$]; 
        Return[$CellContext`n$]; Null), $CellContext`m$1228480["addNodes", 
         Pattern[$CellContext`coords$, 
          Blank[]]] := 
       Module[{$CellContext`nodes$}, $CellContext`nodes$ = Table[
            
            Apply[$CellContext`newNode, $CellContext`c], {$CellContext`c, \
$CellContext`coords$}]; Do[
           $CellContext`m$1228480[
           "addNode", $CellContext`n], {$CellContext`n, $CellContext`nodes$}]; 
         Return[$CellContext`nodes$]; Null], $CellContext`m$1228480[
        "addElement", 
         Pattern[$CellContext`e$, 
          Blank[]]] := (AppendTo[
          $CellContext`m$1228480["elements"], $CellContext`e$]; If[
          StringMatchQ[
           $CellContext`e$["type"], 
           StringExpression["line element", 
            BlankNullSequence[]]], 
          AppendTo[
           $CellContext`m$1228480["line elements"], $CellContext`e$]]; If[
          StringMatchQ[
           $CellContext`e$["type"], 
           StringExpression["point element", 
            BlankNullSequence[]]], 
          AppendTo[
           $CellContext`m$1228480["point elements"], $CellContext`e$]]; 
        Return[$CellContext`e$]; Null), $CellContext`m$1228480["addRigidLink", 
         Pattern[$CellContext`rl$, 
          Blank[]]] := (AppendTo[
          $CellContext`m$1228480["rigidLinks"], $CellContext`rl$]; 
        Return[$CellContext`rl$]; Null), $CellContext`m$1228480["addForce", 
         Pattern[$CellContext`f$, 
          Blank[]]] := (AppendTo[
          $CellContext`m$1228480["forces"], $CellContext`f$]; 
        Return[$CellContext`f$]; Null), $CellContext`m$1228480["addLoad", 
         Pattern[$CellContext`l$, 
          Blank[]]] := (AppendTo[
          $CellContext`m$1228480["loads"], $CellContext`l$]; 
        Return[$CellContext`l$]; Null), $CellContext`m$1228480[
        "addSideConstraint", 
         Pattern[$CellContext`sc$, 
          Blank[]]] := (AppendTo[
          $CellContext`m$1228480["sideConstraints"], $CellContext`sc$]; 
        Return[$CellContext`sc$]; Null), $CellContext`m$1228480["setUBar", 
         Pattern[$CellContext`ubar$, 
          Blank[]]] := ($CellContext`aInvokeOnList[
          $CellContext`m$1228480["nodes"], 
          "gather u", $CellContext`ubar$]; $CellContext`aInvokeOnList[
          $CellContext`m$1228480["elements"], "gather u", $CellContext`ubar$]; 
        Null), $CellContext`m$1228480["solve II", 
         Pattern[$CellContext`lambda$, 
          Blank[]]] := $CellContext`m$1228480[
        "solve II", $CellContext`lambda$, 100, False], $CellContext`m$1228480[
        "solve II", 
         Pattern[$CellContext`lambda$, 
          Blank[]], 
         Pattern[$CellContext`ns$, 
          Blank[]], 
         Pattern[$CellContext`print$, 
          Blank[]]] := 
       Module[{$CellContext`KBar$, $CellContext`uBar$, \
$CellContext`uBarLast$, $CellContext`pBarL$, $CellContext`converged$, \
$CellContext`cnt$, $CellContext`res$, $CellContext`tol$}, $CellContext`cnt$ = 
          0; $CellContext`converged$ = False; $CellContext`m$1228480[
          "checkConsistency"]; $CellContext`m$1228480[
          "enumerateDofs"]; $CellContext`pBarL$ = $CellContext`lambda$ \
$CellContext`m$1228480["pBar"]; $CellContext`tol$ = 
          Norm[$CellContext`pBarL$]/10^9; $CellContext`uBar$ = Table[0, {
             $CellContext`m$1228480["ndofs"]}]; $CellContext`m$1228480[
          "setUBar", $CellContext`uBar$]; $CellContext`KBar$ = \
$CellContext`m$1228480["KBar"]; While[
           And[
            
            Not[$CellContext`converged$], $CellContext`cnt$ <= \
$CellContext`ns$], $CellContext`uBarLast$ = $CellContext`uBar$; \
$CellContext`uBar$ = 
            LinearSolve[$CellContext`KBar$ + $CellContext`m$1228480[
               "KBarII"], $CellContext`pBarL$]; 
           Print[$CellContext`uBar$]; $CellContext`m$1228480[
             "u"] = $CellContext`uBar$; $CellContext`m$1228480[
            "setUBar", $CellContext`uBar$]; $CellContext`res$ = 
            Norm[$CellContext`uBar$ - $CellContext`uBarLast$]/
             Norm[$CellContext`uBar$]; 
           PrintTemporary[$CellContext`res$]; $CellContext`converged$ = \
$CellContext`res$ < $CellContext`tol$; Increment[$CellContext`cnt$]; Null]; If[
           Not[$CellContext`converged$], 
           Print[
            "Theory II. order did not converge for lambda = ", \
$CellContext`lambda$, " res = ", $CellContext`res$, 
             " tol = ", $CellContext`tol$]; Return[{}]; Null, 
           Return[$CellContext`uBar$]; Null]; Null], $CellContext`m$1228480[
        "solve II sweep", 
         Pattern[$CellContext`ns$, 
          Blank[]]] := 
       Module[{$CellContext`i$, $CellContext`ub$, $CellContext`uBars$}, \
$CellContext`m$1228480["enumerateDofs"]; $CellContext`uBars$ = {
            Table[0, {
              $CellContext`m$1228480["ndofs"]}]}; Do[PrintTemporary[
             StringJoin["II Load step: ", 
              
              ToString[$CellContext`i$]]]; $CellContext`ub$ = \
$CellContext`m$1228480["solve II", $CellContext`i$/$CellContext`ns$]; 
           If[Length[$CellContext`ub$] == 0, 
             Return[$CellContext`uBars$], {}]; 
           AppendTo[$CellContext`uBars$, $CellContext`ub$]; 
           Null, {$CellContext`i$, $CellContext`ns$}]; 
         Return[$CellContext`uBars$]; Null], $CellContext`m$1228480[
        "solve nl", 
         Pattern[$CellContext`ns$, 
          Blank[]]] := $CellContext`m$1228480[
        "solve nl", $CellContext`ns$, 1], $CellContext`m$1228480["solve nl", 
         Pattern[$CellContext`ns$, 
          Blank[]], 
         Pattern[$CellContext`lambda$, 
          Blank[]]] := 
       Module[{$CellContext`i$, $CellContext`pBar$, $CellContext`pBarStep$, \
$CellContext`SBarnl$, $CellContext`cnt$, $CellContext`pts$, \
$CellContext`uBar$, $CellContext`uBars$, $CellContext`converged$, \
$CellContext`res$}, $CellContext`m$1228480[
          "enumerateDofs"]; $CellContext`pBar$ = $CellContext`m$1228480[
           "pBar"]; $CellContext`uBar$ = Table[0, {
             $CellContext`m$1228480["ndofs"]}]; $CellContext`uBars$ = {
            Table[0, {
              $CellContext`m$1228480["ndofs"]}]}; 
         Monitor[For[$CellContext`i$ = 1, $CellContext`i$ <= $CellContext`ns$, 
             
             Increment[$CellContext`i$], $CellContext`cnt$ = 
              0; $CellContext`converged$ = 
              
              False; $CellContext`pBarStep$ = ($CellContext`lambda$ \
$CellContext`i$ $CellContext`pBar$)/$CellContext`ns$; $CellContext`m$1228480[
              "setUBar", $CellContext`uBar$]; $CellContext`SBarnl$ = \
$CellContext`m$1228480["SBar nl"]; $CellContext`pts$ = {1}; While[
               And[
                Not[$CellContext`converged$], $CellContext`cnt$ <= 
                20], $CellContext`uBar$ = $CellContext`uBar$ + LinearSolve[
                   $CellContext`m$1228480[
                   "KBar nl"], $CellContext`pBarStep$ - $CellContext`SBarnl$]; \
$CellContext`m$1228480[
                "setUBar", $CellContext`uBar$]; $CellContext`SBarnl$ = \
$CellContext`m$1228480["SBar nl"]; $CellContext`res$ = 
                Norm[$CellContext`pBarStep$ - $CellContext`SBarnl$]/
                 Norm[$CellContext`SBarnl$]; 
               AppendTo[$CellContext`pts$, $CellContext`res$]; \
$CellContext`converged$ = $CellContext`res$ < 10^(-10); 
               Increment[$CellContext`cnt$]; Null]; 
             AppendTo[$CellContext`uBars$, $CellContext`uBar$]; If[
               Not[$CellContext`converged$], Print[
                 StringJoin["Solution did not converge in step ", 
                  ToString[$CellContext`i$]]]; Return[$CellContext`uBars$]; 
               Null, Null; Null]; Null]; Null, 
           ListLinePlot[$CellContext`pts$]]; Return[$CellContext`uBars$]; 
         Null], Attributes[$CellContext`e$1228490] = {
        Temporary}, $CellContext`e$1228490["alpha"] = 
       0, $CellContext`e$1228490["alpha nl"] = 
       0.018990752903221667`, $CellContext`e$1228490["center"] = {2, 
        0}, $CellContext`e$1228490["checkConsistency"] = 
       Null, $CellContext`e$1228490["dofs"] = {0, 0, 1, 
        2}, $CellContext`e$1228490["EA"] = 200, $CellContext`e$1228490["EI"] = 
       0, $CellContext`e$1228490["eps0"] = 
       0, $CellContext`e$1228490["ex"] = {1, 0}, $CellContext`e$1228490["ez"] = 
       Return[{0, 1}], $CellContext`e$1228490["fields"] = {1, 
        2}, $CellContext`e$1228490["isAlongGlobalXAxis"] = 
       True, $CellContext`e$1228490["isLineElement"] = 
       True, $CellContext`e$1228490["K"] = {{50, -50}, {-50, 
        50}}, $CellContext`e$1228490["kappa0"] = 
       0, $CellContext`e$1228490["KBar"] = {{50, 0, -50, 0}, {0, 0, 0, 
        0}, {-50, 0, 50, 0}, {0, 0, 0, 0}}, $CellContext`e$1228490[
        "KBarII"] = {{0., 0., 0., 0.}, {0., -2.5462968378573576`, 0., 
        2.5462968378573576`}, {0., 0., 0., 0.}, {0., 2.5462968378573576`, 
        0., -2.5462968378573576`}}, $CellContext`e$1228490["KBar nl"] = 
       Return[{{
          13.16598242135977 (4 + $CellContext`uBars$1232277) - 
           0.18543495963966514` Part[
              Last[$CellContext`uBars$1232277], 2]^2, 13.16598242135977 Part[
              Last[$CellContext`uBars$1232277], 2] - 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277) Part[
             Last[$CellContext`uBars$1232277], 2], 
           13.16598242135977 (-4 - $CellContext`uBars$1232277) + 
           0.18543495963966514` Part[
               Last[$CellContext`uBars$1232277], 2]^2, (-13.16598242135977) 
            Part[
              Last[$CellContext`uBars$1232277], 2] + 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277) Part[
              Last[$CellContext`uBars$1232277], 2]}, {(-0.2500619811241277) (
             4 + $CellContext`uBars$1232277) + 
           0.18543495963966514` (4 + $CellContext`uBars$1232277) Part[
              Last[$CellContext`uBars$1232277], 
              2], (-0.18543495963966514`) (-4 - $CellContext`uBars$1232277)^2 - 
           0.2500619811241277 Part[
             Last[$CellContext`uBars$1232277], 
             2], (-0.2500619811241277) (-4 - $CellContext`uBars$1232277) + 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277) Part[
              Last[$CellContext`uBars$1232277], 2], 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277)^2 + 
           0.2500619811241277 Part[
              Last[$CellContext`uBars$1232277], 2]}, {
          13.16598242135977 (-4 - $CellContext`uBars$1232277) + 
           0.18543495963966514` Part[
               Last[$CellContext`uBars$1232277], 2]^2, (-13.16598242135977) 
            Part[
              Last[$CellContext`uBars$1232277], 2] + 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277) Part[
              Last[$CellContext`uBars$1232277], 2], 
           13.16598242135977 (4 + $CellContext`uBars$1232277) - 
           0.18543495963966514` Part[
              Last[$CellContext`uBars$1232277], 2]^2, 13.16598242135977 Part[
              Last[$CellContext`uBars$1232277], 2] - 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277) Part[
             Last[$CellContext`uBars$1232277], 
             2]}, {(-0.2500619811241277) (-4 - $CellContext`uBars$1232277) + 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277) Part[
              Last[$CellContext`uBars$1232277], 2], 
           0.18543495963966514` (-4 - $CellContext`uBars$1232277)^2 + 
           0.2500619811241277 Part[
              Last[$CellContext`uBars$1232277], 2], (-0.2500619811241277) (
             4 + $CellContext`uBars$1232277) + 
           0.18543495963966514` (4 + $CellContext`uBars$1232277) Part[
              Last[$CellContext`uBars$1232277], 
              2], (-0.18543495963966514`) (-4 - $CellContext`uBars$1232277)^2 - 
           0.2500619811241277 Part[
             Last[$CellContext`uBars$1232277], 2]}}], $CellContext`e$1228490[
        "KII"] = {{0., 0., 0., 0.}, {0., -2.5462968378573576`, 0., 
        2.5462968378573576`}, {0., 0., 0., 0.}, {0., 2.5462968378573576`, 
        0., -2.5462968378573576`}}, $CellContext`e$1228490["l"] = 
       4, $CellContext`e$1228490["l c"] = 
       3.79698092050254, $CellContext`e$1228490["load"] = 
       0, $CellContext`e$1228490["M"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228490["N"] = 
       Function[$CellContext`x$, -10.18518735142943], $CellContext`e$1228490[
        "n nl"] = Return[{
         10.150953974873001`, -10.150953974873001`}], $CellContext`e$1228490[
        "N nl"] = Function[$CellContext`x$, (-10.150953974873001`) (
           1 - $CellContext`x$/4) - 
         2.5377384937182503` $CellContext`x$], $CellContext`e$1228490[
        "n nodes"] = 
       2, $CellContext`e$1228490[
        "nodes"] = {$CellContext`n$1228481, $CellContext`n$1228482}, \
$CellContext`e$1228490["p"] = 
       Return[{4 (0["p", 1]/3 + 0["p", 2]/6), 
          4 (0["p", 1]/6 + 0["p", 2]/3)}], $CellContext`e$1228490["P"] = 
       Return[-30.], $CellContext`e$1228490["pBar"] = {
        4 (0["p", 1]/3 + 0["p", 2]/6), 0, 4 (0["p", 1]/6 + 0["p", 2]/3), 
         0}, $CellContext`e$1228490["pBarBCs"] = {0, 0, 0, 
        0}, $CellContext`e$1228490["reset dofs"] = 
       Null, $CellContext`e$1228490["SBar nl"] = {
        10.149123565728976`, -0.1927626715802379, -10.149123565728976`, 
        0.1927626715802379}, $CellContext`e$1228490["T"] = {{1, 0, 0, 0}, {0, 
        0, 1, 0}}, $CellContext`e$1228490["T0"] = {{1, 0}, {0, 
        1}}, $CellContext`e$1228490["T1"] = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 
        0, 1, 0}, {0, 0, 0, 1}}, $CellContext`e$1228490[
        "thIICompressionOnly"] = 
       False, $CellContext`e$1228490[
        "T nl"] = {{0.9998196810714977, -0.018989611425427586`, 0, 0}, {
         0, 0, 0.9998196810714977, -0.018989611425427586`}}, \
$CellContext`e$1228490["type"] = 
       "line element.truss", $CellContext`e$1228490["u"] = Return[{
          Function[$CellContext`x$, 0. - 0.15 $CellContext`x$], 
          
          Function[$CellContext`x$, 0. + 
           0.43284271247461903` $CellContext`x$]}], $CellContext`e$1228490[
        "uBarVector"] = {
        0, 0, -0.6, 1.7313708498984761`}, $CellContext`e$1228490["un"] = {0, 
        0, 0, 0}, $CellContext`e$1228490["uVector"] = {0., 0., -0.6, 
        1.7313708498984761`}, $CellContext`e$1228490["V"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228490["X"] = Return[
         Function[$CellContext`x$, {$CellContext`x$, 
           0}]], $CellContext`e$1228490["computed", "M"] = 
       Null, $CellContext`e$1228490["computed", "N"] = 
       Null, $CellContext`e$1228490["computed", "V"] = 
       Null, $CellContext`e$1228490[
        "EnteredFunction", "M"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228490[
        "EnteredFunction", "N"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228490[
        "EnteredFunction", "V"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228490[
        "forces", 1] = {}, $CellContext`e$1228490[
        "forces", 2] = {}, $CellContext`e$1228490["hinge", 1] = {
        False, False, False}, $CellContext`e$1228490["hinge", 2] = {
        False, False, False}, $CellContext`e$1228490[
        "n", 1] = $CellContext`n$1228481, $CellContext`e$1228490[
        "n", 2] = $CellContext`n$1228482, $CellContext`e$1228490[
        "dofs", 1, 1] = 0, $CellContext`e$1228490["dofs", 1, 2] = 
       0, $CellContext`e$1228490["dofs", 1, 3] = 
       0, $CellContext`e$1228490["dofs", 2, 1] = 
       1, $CellContext`e$1228490["dofs", 2, 2] = 
       2, $CellContext`e$1228490["dofs", 2, 3] = 
       0, $CellContext`e$1228490["ui", "verified", "M"] = 
       False, $CellContext`e$1228490["ui", "verified", "N"] = 
       False, $CellContext`e$1228490["ui", "verified", "V"] = 
       False, $CellContext`e$1228490["indexOfNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Part[
         Position[
          $CellContext`e$1228490["nodes"], $CellContext`ne$], 1, 
         1], $CellContext`e$1228490["dofsByNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Table[
         $CellContext`e$1228490["dofs", 
          $CellContext`e$1228490[
          "indexOfNode", $CellContext`ne$], $CellContext`j$1228490], \
{$CellContext`j$1228490, 
          Length[
           $CellContext`e$1228490["fields"]]}], $CellContext`e$1228490[
        "gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`e$1228490[
         "uBarVector"] = $CellContext`dGatherVectorReturn[
          $CellContext`e$1228490["dofs"], $CellContext`u$, 
          $CellContext`e$1228490["un"]]), $CellContext`e$1228490["x", 
         Pattern[$CellContext`s$, 
          Blank[]]] := 
       Module[{$CellContext`X$, $CellContext`u$, $CellContext`ex$, \
$CellContext`ez$}, $CellContext`X$ = $CellContext`e$1228489[
           "X"]; $CellContext`u$ = $CellContext`e$1228489[
           "u"]; $CellContext`ex$ = $CellContext`e$1228489[
           "ex"]; $CellContext`ez$ = $CellContext`e$1228489["ez"]; Return[
           Function[$CellContext`x$, 
            
            Evaluate[$CellContext`X$[$CellContext`x$] + $CellContext`s$ (
               Part[$CellContext`u$, 1][$CellContext`x$] $CellContext`ex$ + 
               Part[$CellContext`u$, 2][$CellContext`x$] $CellContext`ez$)]]]; 
         Null], $CellContext`e$1228490["directionFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := Module[{$CellContext`on$}, $CellContext`assertThat[
           
           Or[$CellContext`n$ == $CellContext`e$1228489[
             "n", 1], $CellContext`n$ == $CellContext`e$1228489["n", 2]], 
           "Node node part of element in: directionFrom"]; $CellContext`on$ = 
          If[$CellContext`n$ === $CellContext`e$1228489["n", 1], 
            $CellContext`e$1228489["n", 2], 
            $CellContext`e$1228489["n", 1]]; Return[
           Normalize[$CellContext`on$["p"] - $CellContext`n$["p"]]]; 
         Null], $CellContext`e$1228490["minAngleFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`d0$, $CellContext`d1$, $CellContext`a1$, \
$CellContext`a2$}, $CellContext`a1$ = 
          Pi/2; $CellContext`d0$ = $CellContext`e$1228489[
           "directionFrom", $CellContext`n$]; 
         Do[$CellContext`d1$ = $CellContext`ee[
             "directionFrom", $CellContext`n$]; $CellContext`a2$ = 
            VectorAngle[$CellContext`d0$, $CellContext`d1$]; 
           While[$CellContext`a2$ < 0, 
             AddTo[$CellContext`a2$, 2 Pi]]; If[
             
             And[$CellContext`a2$ > 
              0.00001, $CellContext`a2$ < $CellContext`a1$], $CellContext`a1$ = \
$CellContext`a2$]; Null, {$CellContext`ee, 
            $CellContext`n$["elements"]}]; Return[$CellContext`a1$]; 
         Null], $CellContext`e$1228490["endForce", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228489["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228489["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228489[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228489[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228489[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228489[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ {$CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}]; Null], $CellContext`e$1228490["endForceLocal", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228489["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228489["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228489[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228489[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228489[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228489[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ Dot[
             $CellContext`n$[
             "T"], {$CellContext`Ne$, $CellContext`Ve$, $CellContext`me$}]]; 
         Null], $CellContext`e$1228490["getContinuationElement", 
         Pattern[$CellContext`i$, 
          Blank[]]] := 
       Module[{$CellContext`ae$ = 
          Null, $CellContext`node$, $CellContext`elements$, \
$CellContext`elt$}, $CellContext`node$ = $CellContext`e$1228489[
           "n", $CellContext`i$]; $CellContext`elements$ = $CellContext`node$[
           "elements"]; Do[If[
             And[
              
              Not[$CellContext`elt$ === $CellContext`e$1228489], \
$CellContext`elt$["ex"] == $CellContext`e$1228489[
               "ex"]], $CellContext`ae$ = $CellContext`elt$]; 
           Null, {$CellContext`elt$, $CellContext`elements$}]; 
         Return[$CellContext`ae$]; Null], 
       Attributes[$CellContext`n$1228481] = {
        Temporary}, $CellContext`n$1228481["alpha"] = 
       0, $CellContext`n$1228481["c"] = {
        False, False, True}, $CellContext`n$1228481["checkConsistency"] = 
       Null, $CellContext`n$1228481["computedReactionForce"] = {0, 0, 
        0}, $CellContext`n$1228481["cv"] = {0, 0, 0}, $CellContext`n$1228481[
        "dofs"] = {0, 0, 0}, $CellContext`n$1228481[
        "elements"] = {$CellContext`e$1228490}, $CellContext`n$1228481[
        "forces"] = {}, $CellContext`n$1228481["getHingedElements"] = 
       Return[{}], $CellContext`n$1228481[
        "getHinges"] = {}, $CellContext`n$1228481["getHingeType"] = 
       Return[5], $CellContext`n$1228481["isConstrained"] = 
       True, $CellContext`n$1228481["isHinge"] = 
       False, $CellContext`n$1228481["p"] = {0, 0}, $CellContext`n$1228481[
        "pc"] = {0, 0}, $CellContext`n$1228481["reactionForce"] = {
        10.18518735142943, 0., 0}, $CellContext`n$1228481["reset dofs"] = 
       Null, $CellContext`n$1228481["residual"] = {
        10.18518735142943, 0., 0}, $CellContext`n$1228481[
        "rigidLinks"] = {}, $CellContext`n$1228481[
        "summedElementEndForces"] = {
        10.18518735142943, 0., 0}, $CellContext`n$1228481["T"] = {{1, 0, 0}, {
        0, 1, 0}, {0, 0, 1}}, $CellContext`n$1228481["u"] = {0, 0, 
        0}, $CellContext`n$1228481["uBar"] = {0, 0, 
        0}, $CellContext`n$1228481["updateReactionForce"] = 
       Null, $CellContext`n$1228481["dofs", 1] = 
       0, $CellContext`n$1228481["dofs", 2] = 
       0, $CellContext`n$1228481["dofs", 3] = 
       0, $CellContext`n$1228481["fields", 1] = 
       1, $CellContext`n$1228481["fields", 2] = 
       1, $CellContext`n$1228481["fields", 3] = 
       0, $CellContext`n$1228481["ui", "directions"] = {1, -1, 
        1}, $CellContext`n$1228481["ui", "hinge offset"] = {0, 
        0}, $CellContext`n$1228481["ui", "verified", "constraint"] = 
       False, $CellContext`n$1228481["distance to", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228481["p"] - $CellContext`on$[
         "p"]], $CellContext`n$1228481["distance to c", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228481["pc"] - $CellContext`on$[
         "pc"]], $CellContext`n$1228481["gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`n$1228481[
         "u"] = $CellContext`dGatherVectorReturn[
          $CellContext`n$1228481["dofs"], $CellContext`u$, 
          $CellContext`n$1228481["cv"]]), 
       Attributes[$CellContext`on$] = {Temporary}, 
       Attributes[$CellContext`u$] = {
        Temporary}, $CellContext`dGatherVectorReturn[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`g, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`l}, $CellContext`l = Table[0, {$CellContext`i, 
             
             Length[$CellContext`t]}]; \
$CellContext`dGatherVectorWithValue[$CellContext`t, $CellContext`g, \
$CellContext`l, $CellContext`v]; Return[$CellContext`l]; 
         Null], $CellContext`dGatherVectorReturn[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`l}, $CellContext`l = Table[0, {$CellContext`i, 
             
             Length[$CellContext`t]}]; \
$CellContext`dGatherVector[$CellContext`t, $CellContext`g, $CellContext`l]; 
         Return[$CellContext`l]; Null], $CellContext`i = 4, 
       Attributes[$CellContext`dGatherVectorWithValue] = {
        HoldAll}, $CellContext`dGatherVectorWithValue[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`g, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`i}, 
         For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`t], 
           Increment[$CellContext`i], 
           If[Part[$CellContext`t, $CellContext`i] > 0, 
             Part[$CellContext`l, $CellContext`i] = Part[$CellContext`g, 
                Part[$CellContext`t, $CellContext`i]]; Null, 
             Part[$CellContext`l, $CellContext`i] = 
              Part[$CellContext`v, $CellContext`i]; Null]; Null]; Null], 
       Attributes[$CellContext`dGatherVector] = {
        HoldAll}, $CellContext`dGatherVector[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`g, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]]] := 
       Module[{$CellContext`i}, 
         For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`t], 
           Increment[$CellContext`i], 
           If[Part[$CellContext`t, $CellContext`i] > 0, 
             Part[$CellContext`l, $CellContext`i] = Part[$CellContext`g, 
                Part[$CellContext`t, $CellContext`i]]; Null, Null; Null]; 
           Null]; Null], 
       Attributes[$CellContext`n$1228482] = {
        Temporary}, $CellContext`n$1228482["alpha"] = 
       0, $CellContext`n$1228482["c"] = {
        True, True, True}, $CellContext`n$1228482["checkConsistency"] = 
       Null, $CellContext`n$1228482["computedReactionForce"] = {0, 0, 
        0}, $CellContext`n$1228482["cv"] = {0, 0, 0}, $CellContext`n$1228482[
        "dofs"] = {1, 2, 0}, $CellContext`n$1228482[
        "elements"] = {$CellContext`e$1228490, $CellContext`e$1228499, \
$CellContext`e$1228502, $CellContext`e$1228505}, $CellContext`n$1228482[
        "forces"] = {}, $CellContext`n$1228482["getHingedElements"] = 
       Return[{}], $CellContext`n$1228482[
        "getHinges"] = {}, $CellContext`n$1228482["getHingeType"] = 
       Return[5], $CellContext`n$1228482["isConstrained"] = 
       False, $CellContext`n$1228482["isHinge"] = 
       False, $CellContext`n$1228482["p"] = {4, 0}, $CellContext`n$1228482[
        "pc"] = {4 + $CellContext`uBars$1232277, 
         Part[
          Last[$CellContext`uBars$1232277], 2]}, $CellContext`n$1228482[
        "reactionForce"] = {0, 0, 0}, $CellContext`n$1228482["reset dofs"] = 
       Null, $CellContext`n$1228482[
        "residual"] = {-13.821581451604255`, -13.1641760256007, 
         0}, $CellContext`n$1228482[
        "rigidLinks"] = {}, $CellContext`n$1228482[
        "summedElementEndForces"] = {-13.821581451604255`, -13.1641760256007, 
         0}, $CellContext`n$1228482["T"] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 
        1}}, $CellContext`n$1228482[
        "u"] = {-0.6, 1.7313708498984761`, 0}, $CellContext`n$1228482[
        "uBar"] = {-0.6, 1.7313708498984761`, 0.}, $CellContext`n$1228482[
        "updateReactionForce"] = Null, $CellContext`n$1228482["dofs", 1] = 
       1, $CellContext`n$1228482["dofs", 2] = 
       2, $CellContext`n$1228482["dofs", 3] = 
       0, $CellContext`n$1228482["fields", 1] = 
       7, $CellContext`n$1228482["fields", 2] = 
       7, $CellContext`n$1228482["fields", 3] = 
       0, $CellContext`n$1228482["ui", "directions"] = {1, -1, 
        1}, $CellContext`n$1228482["ui", "hinge offset"] = {0, 
        0}, $CellContext`n$1228482["ui", "verified", "constraint"] = 
       False, $CellContext`n$1228482["distance to", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228482["p"] - $CellContext`on$[
         "p"]], $CellContext`n$1228482["distance to c", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228482["pc"] - $CellContext`on$[
         "pc"]], $CellContext`n$1228482["gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`n$1228482[
         "u"] = $CellContext`dGatherVectorReturn[
          $CellContext`n$1228482["dofs"], $CellContext`u$, 
          $CellContext`n$1228482["cv"]]), 
       Attributes[$CellContext`e$1228499] = {
        Temporary}, $CellContext`e$1228499["alpha"] = 
       Pi/2, $CellContext`e$1228499["alpha nl"] = 
       ArcTan[0.3320053329312893 - $CellContext`uBars$1232277, 
         3.931116746831008 + Part[
           Last[$CellContext`uBars$1232277], 2]], $CellContext`e$1228499[
        "center"] = {4, -2}, $CellContext`e$1228499["checkConsistency"] = 
       Null, $CellContext`e$1228499["dofs"] = {1, 2, 3, 
        4}, $CellContext`e$1228499["EA"] = 200, $CellContext`e$1228499["EI"] = 
       0, $CellContext`e$1228499["eps0"] = 
       0, $CellContext`e$1228499["ex"] = {0, -1}, $CellContext`e$1228499[
        "ez"] = Return[{1, 0}], $CellContext`e$1228499["fields"] = {1, 
        2}, $CellContext`e$1228499["isAlongGlobalXAxis"] = 
       False, $CellContext`e$1228499["isLineElement"] = 
       True, $CellContext`e$1228499["K"] = {{50, -50}, {-50, 
        50}}, $CellContext`e$1228499["kappa0"] = 
       0, $CellContext`e$1228499["KBar"] = {{0, 0, 0, 0}, {0, 50, 0, -50}, {0,
         0, 0, 0}, {0, -50, 0, 50}}, $CellContext`e$1228499[
        "KBarII"] = {{-1.7623305679887173`, 0., 1.7623305679887173`, 0.}, {0.,
         0., 0., 0.}, {1.7623305679887173`, 0., -1.7623305679887173`, 0.}, {
        0., 0., 0., 0.}}, $CellContext`e$1228499["KBar nl"] = 
       Return[{{1.7646424160091976` (0.6000000000000001 + Part[
               Last[$CellContext`uBars$1232277], 3]) - 
           0.08791387984169803 (5.731370849898476 - Part[
              Last[$CellContext`uBars$1232277], 4])^2, 
           0.08791387984169803 (-0.6000000000000001 - Part[
              Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
             
              Last[$CellContext`uBars$1232277], 4]) + 
           1.7646424160091976` (-5.731370849898476 + Part[
               Last[$CellContext`uBars$1232277], 4]), 
           1.7646424160091976` (-0.6000000000000001 - Part[
              Last[$CellContext`uBars$1232277], 3]) + 
           0.08791387984169803 (5.731370849898476 - Part[
               Last[$CellContext`uBars$1232277], 4])^2, 
           1.7646424160091976` (5.731370849898476 - Part[
              Last[$CellContext`uBars$1232277], 4]) - 
           0.08791387984169803 (-0.6000000000000001 - Part[
             Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
             Last[$CellContext`uBars$1232277], 4])}, {(-12.711710995905849`) (
             0.6000000000000001 + Part[
               Last[$CellContext`uBars$1232277], 3]) - 
           0.08791387984169803 (0.6000000000000001 + Part[
              Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
            
             Last[$CellContext`uBars$1232277], 
             4]), (-0.08791387984169803) (-0.6000000000000001 - Part[
               Last[$CellContext`uBars$1232277], 3])^2 - 
           12.711710995905849` (-5.731370849898476 + Part[
              Last[$CellContext`uBars$1232277], 
              4]), (-12.711710995905849`) (-0.6000000000000001 - Part[
              Last[$CellContext`uBars$1232277], 3]) - 
           0.08791387984169803 (-0.6000000000000001 - Part[
             Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
             Last[$CellContext`uBars$1232277], 4]), 
           0.08791387984169803 (-0.6000000000000001 - Part[
               Last[$CellContext`uBars$1232277], 3])^2 - 
           12.711710995905849` (5.731370849898476 - Part[
             Last[$CellContext`uBars$1232277], 4])}, {
          1.7646424160091976` (-0.6000000000000001 - Part[
              Last[$CellContext`uBars$1232277], 3]) + 
           0.08791387984169803 (5.731370849898476 - Part[
               Last[$CellContext`uBars$1232277], 4])^2, 
           1.7646424160091976` (5.731370849898476 - Part[
              Last[$CellContext`uBars$1232277], 4]) - 
           0.08791387984169803 (-0.6000000000000001 - Part[
             Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
             Last[$CellContext`uBars$1232277], 4]), 
           1.7646424160091976` (0.6000000000000001 + Part[
               Last[$CellContext`uBars$1232277], 3]) - 
           0.08791387984169803 (5.731370849898476 - Part[
              Last[$CellContext`uBars$1232277], 4])^2, 
           0.08791387984169803 (-0.6000000000000001 - Part[
              Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
             
              Last[$CellContext`uBars$1232277], 4]) + 
           1.7646424160091976` (-5.731370849898476 + Part[
               Last[$CellContext`uBars$1232277], 
               4])}, {(-12.711710995905849`) (-0.6000000000000001 - Part[
              Last[$CellContext`uBars$1232277], 3]) - 
           0.08791387984169803 (-0.6000000000000001 - Part[
             Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
             Last[$CellContext`uBars$1232277], 4]), 
           0.08791387984169803 (-0.6000000000000001 - Part[
               Last[$CellContext`uBars$1232277], 3])^2 - 
           12.711710995905849` (5.731370849898476 - Part[
             Last[$CellContext`uBars$1232277], 4]), (-12.711710995905849`) (
             0.6000000000000001 + Part[
               Last[$CellContext`uBars$1232277], 3]) - 
           0.08791387984169803 (0.6000000000000001 + Part[
              Last[$CellContext`uBars$1232277], 3]) (5.731370849898476 - Part[
            
             Last[$CellContext`uBars$1232277], 
             4]), (-0.08791387984169803) (-0.6000000000000001 - Part[
               Last[$CellContext`uBars$1232277], 3])^2 - 
           12.711710995905849` (-5.731370849898476 + Part[
              Last[$CellContext`uBars$1232277], 
              4])}}], $CellContext`e$1228499["KII"] = {{0., 0., 0., 0.}, {
        0., -1.7623305679887173`, 0., 1.7623305679887173`}, {0., 0., 0., 
        0.}, {0., 1.7623305679887173`, 
        0., -1.7623305679887173`}}, $CellContext`e$1228499["l"] = 
       4, $CellContext`e$1228499["l c"] = 
       Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
         Abs[3.931116746831008 + Part[
              Last[$CellContext`uBars$1232277], 
              2]]^2], $CellContext`e$1228499["load"] = 
       0, $CellContext`e$1228499["M"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228499["N"] = 
       Function[$CellContext`x$, -7.049322271954869], $CellContext`e$1228499[
        "n nl"] = Return[{(-50) (-4 + 
           Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
             Abs[3.931116746831008 + Part[
                  Last[$CellContext`uBars$1232277], 2]]^2]), 
          50 (-4 + Sqrt[
            Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
             Abs[3.931116746831008 + Part[
                  Last[$CellContext`uBars$1232277], 
                  2]]^2])}], $CellContext`e$1228499["N nl"] = 
       Function[$CellContext`x$, 
         50 (1 - $CellContext`x$/4) (-4 + 
           Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
             Abs[3.931116746831008 + Part[
                  Last[$CellContext`uBars$1232277], 2]]^2]) + (
           25 $CellContext`x$ (-4 + 
            Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
              Abs[3.931116746831008 + Part[
                   Last[$CellContext`uBars$1232277], 2]]^2]))/
          2], $CellContext`e$1228499["n nodes"] = 
       2, $CellContext`e$1228499[
        "nodes"] = {$CellContext`n$1228482, $CellContext`n$1228484}, \
$CellContext`e$1228499["p"] = 
       Return[{4 (0["p", 1]/3 + 0["p", 2]/6), 
          4 (0["p", 1]/6 + 0["p", 2]/3)}], $CellContext`e$1228499["P"] = 
       Return[-9.999999999999998], $CellContext`e$1228499["pBar"] = {
        0, (-4) (0["p", 1]/3 + 0["p", 2]/6), 
         0, (-4) (0["p", 1]/6 + 0["p", 2]/3)}, $CellContext`e$1228499[
        "pBarBCs"] = {0, 0, 0, 0}, $CellContext`e$1228499["reset dofs"] = 
       Null, $CellContext`e$1228499[
        "SBar nl"] = {(-6.875081690927258) (-4 + 
          Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
            Abs[3.931116746831008 + Part[
                 Last[$CellContext`uBars$1232277], 2]]^2]), 
         49.525076998860655` (-4 + 
          Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
            Abs[3.931116746831008 + Part[
                 Last[$CellContext`uBars$1232277], 2]]^2]), 
         6.875081690927258 (-4 + 
          Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
            Abs[3.931116746831008 + Part[
                 Last[$CellContext`uBars$1232277], 
                 2]]^2]), (-49.525076998860655`) (-4 + 
          Sqrt[Abs[-0.3320053329312893 + $CellContext`uBars$1232277]^2 + 
            Abs[3.931116746831008 + Part[
                 Last[$CellContext`uBars$1232277], 
                 2]]^2])}, $CellContext`e$1228499["T"] = {{0, -1, 0, 0}, {0, 
        0, 0, -1}}, $CellContext`e$1228499["T0"] = {{0, -1}, {1, 
        0}}, $CellContext`e$1228499["T1"] = {{0, -1, 0, 0}, {1, 0, 0, 0}, {0, 
        0, 0, -1}, {0, 0, 1, 0}}, $CellContext`e$1228499[
        "thIICompressionOnly"] = 
       False, $CellContext`e$1228499[
        "T nl"] = {{(0.3320053329312893 - $CellContext`uBars$1232277)/
          Sqrt[(0.3320053329312893 - $CellContext`uBars$1232277)^2 + (
             3.931116746831008 + Part[
               Last[$CellContext`uBars$1232277], 2])^2], -((3.931116746831008 + 
            Part[
              Last[$CellContext`uBars$1232277], 2])/
           Sqrt[(0.3320053329312893 - $CellContext`uBars$1232277)^2 + (
              3.931116746831008 + Part[
                Last[$CellContext`uBars$1232277], 2])^2]), 0, 0}, {
         0, 0, (0.3320053329312893 - $CellContext`uBars$1232277)/
          Sqrt[(0.3320053329312893 - $CellContext`uBars$1232277)^2 + (
             3.931116746831008 + Part[
               Last[$CellContext`uBars$1232277], 2])^2], -((3.931116746831008 + 
            Part[
              Last[$CellContext`uBars$1232277], 2])/
           Sqrt[(0.3320053329312893 - $CellContext`uBars$1232277)^2 + (
              3.931116746831008 + Part[
                Last[$CellContext`uBars$1232277], 
                2])^2])}}, $CellContext`e$1228499["type"] = 
       "line element.truss", $CellContext`e$1228499["u"] = Return[{
          
          Function[$CellContext`x$, (-1.7313708498984761`) (
             1 - $CellContext`x$/4) - 0.482842712474619 $CellContext`x$], 
          
          Function[$CellContext`x$, (-0.6) (1 - $CellContext`x$/4) + 
           0.05 $CellContext`x$]}], $CellContext`e$1228499[
        "uBarVector"] = {-0.6, 1.7313708498984761`, 0.2, 
        1.931370849898476}, $CellContext`e$1228499["un"] = {0, 0, 0, 
        0}, $CellContext`e$1228499[
        "uVector"] = {-1.7313708498984761`, -0.6, -1.931370849898476, 
        0.2}, $CellContext`e$1228499["V"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228499["X"] = Return[
         Function[$CellContext`x$, {
          4 (1 - $CellContext`x$/
             4) + $CellContext`x$, -$CellContext`x$}]], \
$CellContext`e$1228499["computed", "M"] = 
       Null, $CellContext`e$1228499["computed", "N"] = 
       Null, $CellContext`e$1228499["computed", "V"] = 
       Null, $CellContext`e$1228499[
        "EnteredFunction", "M"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228499[
        "EnteredFunction", "N"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228499[
        "EnteredFunction", "V"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228499[
        "forces", 1] = {}, $CellContext`e$1228499[
        "forces", 2] = {}, $CellContext`e$1228499["hinge", 1] = {
        False, False, False}, $CellContext`e$1228499["hinge", 2] = {
        False, False, False}, $CellContext`e$1228499[
        "n", 1] = $CellContext`n$1228482, $CellContext`e$1228499[
        "n", 2] = $CellContext`n$1228484, $CellContext`e$1228499[
        "dofs", 1, 1] = 1, $CellContext`e$1228499["dofs", 1, 2] = 
       2, $CellContext`e$1228499["dofs", 1, 3] = 
       0, $CellContext`e$1228499["dofs", 2, 1] = 
       3, $CellContext`e$1228499["dofs", 2, 2] = 
       4, $CellContext`e$1228499["dofs", 2, 3] = 
       0, $CellContext`e$1228499["ui", "verified", "M"] = 
       False, $CellContext`e$1228499["ui", "verified", "N"] = 
       False, $CellContext`e$1228499["ui", "verified", "V"] = 
       False, $CellContext`e$1228499["indexOfNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Part[
         Position[
          $CellContext`e$1228499["nodes"], $CellContext`ne$], 1, 
         1], $CellContext`e$1228499["dofsByNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Table[
         $CellContext`e$1228499["dofs", 
          $CellContext`e$1228499[
          "indexOfNode", $CellContext`ne$], $CellContext`j$1228499], \
{$CellContext`j$1228499, 
          Length[
           $CellContext`e$1228499["fields"]]}], $CellContext`e$1228499[
        "gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`e$1228499[
         "uBarVector"] = $CellContext`dGatherVectorReturn[
          $CellContext`e$1228499["dofs"], $CellContext`u$, 
          $CellContext`e$1228499["un"]]), $CellContext`e$1228499["x", 
         Pattern[$CellContext`s$, 
          Blank[]]] := 
       Module[{$CellContext`X$, $CellContext`u$, $CellContext`ex$, \
$CellContext`ez$}, $CellContext`X$ = $CellContext`e$1228498[
           "X"]; $CellContext`u$ = $CellContext`e$1228498[
           "u"]; $CellContext`ex$ = $CellContext`e$1228498[
           "ex"]; $CellContext`ez$ = $CellContext`e$1228498["ez"]; Return[
           Function[$CellContext`x$, 
            
            Evaluate[$CellContext`X$[$CellContext`x$] + $CellContext`s$ (
               Part[$CellContext`u$, 1][$CellContext`x$] $CellContext`ex$ + 
               Part[$CellContext`u$, 2][$CellContext`x$] $CellContext`ez$)]]]; 
         Null], $CellContext`e$1228499["directionFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := Module[{$CellContext`on$}, $CellContext`assertThat[
           
           Or[$CellContext`n$ == $CellContext`e$1228498[
             "n", 1], $CellContext`n$ == $CellContext`e$1228498["n", 2]], 
           "Node node part of element in: directionFrom"]; $CellContext`on$ = 
          If[$CellContext`n$ === $CellContext`e$1228498["n", 1], 
            $CellContext`e$1228498["n", 2], 
            $CellContext`e$1228498["n", 1]]; Return[
           Normalize[$CellContext`on$["p"] - $CellContext`n$["p"]]]; 
         Null], $CellContext`e$1228499["minAngleFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`d0$, $CellContext`d1$, $CellContext`a1$, \
$CellContext`a2$}, $CellContext`a1$ = 
          Pi/2; $CellContext`d0$ = $CellContext`e$1228498[
           "directionFrom", $CellContext`n$]; 
         Do[$CellContext`d1$ = $CellContext`ee[
             "directionFrom", $CellContext`n$]; $CellContext`a2$ = 
            VectorAngle[$CellContext`d0$, $CellContext`d1$]; 
           While[$CellContext`a2$ < 0, 
             AddTo[$CellContext`a2$, 2 Pi]]; If[
             
             And[$CellContext`a2$ > 
              0.00001, $CellContext`a2$ < $CellContext`a1$], $CellContext`a1$ = \
$CellContext`a2$]; Null, {$CellContext`ee, 
            $CellContext`n$["elements"]}]; Return[$CellContext`a1$]; 
         Null], $CellContext`e$1228499["endForce", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228498["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228498["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228498[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228498[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228498[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228498[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ {$CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}]; Null], $CellContext`e$1228499["endForceLocal", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228498["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228498["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228498[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228498[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228498[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228498[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ Dot[
             $CellContext`n$[
             "T"], {$CellContext`Ne$, $CellContext`Ve$, $CellContext`me$}]]; 
         Null], $CellContext`e$1228499["getContinuationElement", 
         Pattern[$CellContext`i$, 
          Blank[]]] := 
       Module[{$CellContext`ae$ = 
          Null, $CellContext`node$, $CellContext`elements$, \
$CellContext`elt$}, $CellContext`node$ = $CellContext`e$1228498[
           "n", $CellContext`i$]; $CellContext`elements$ = $CellContext`node$[
           "elements"]; Do[If[
             And[
              
              Not[$CellContext`elt$ === $CellContext`e$1228498], \
$CellContext`elt$["ex"] == $CellContext`e$1228498[
               "ex"]], $CellContext`ae$ = $CellContext`elt$]; 
           Null, {$CellContext`elt$, $CellContext`elements$}]; 
         Return[$CellContext`ae$]; Null], 
       Attributes[$CellContext`n$1228484] = {
        Temporary}, $CellContext`n$1228484["alpha"] = 
       0, $CellContext`n$1228484["c"] = {
        True, True, True}, $CellContext`n$1228484["checkConsistency"] = 
       Null, $CellContext`n$1228484["computedReactionForce"] = {0, 0, 
        0}, $CellContext`n$1228484["cv"] = {0, 0, 0}, $CellContext`n$1228484[
        "dofs"] = {3, 4, 0}, $CellContext`n$1228484[
        "elements"] = {$CellContext`e$1228493, $CellContext`e$1228496, \
$CellContext`e$1228499}, $CellContext`n$1228484["forces"] = {{0, 10, 
        0}}, $CellContext`n$1228484["getHingedElements"] = 
       Return[{}], $CellContext`n$1228484[
        "getHinges"] = {}, $CellContext`n$1228484["getHingeType"] = 
       Return[5], $CellContext`n$1228484["isConstrained"] = 
       False, $CellContext`n$1228484["isHinge"] = 
       False, $CellContext`n$1228484["p"] = {4, -4}, $CellContext`n$1228484[
        "pc"] = {4 + Part[
           Last[$CellContext`uBars$1232277], 3], -4 + Part[
           Last[$CellContext`uBars$1232277], 4]}, $CellContext`n$1228484[
        "reactionForce"] = {0, 0, 0}, $CellContext`n$1228484["reset dofs"] = 
       Null, $CellContext`n$1228484["residual"] = {
        6.26669257180917, -2.9506777280451306`, 0}, $CellContext`n$1228484[
        "rigidLinks"] = {}, $CellContext`n$1228484[
        "summedElementEndForces"] = {
        6.26669257180917, 7.049322271954869, 0}, $CellContext`n$1228484[
        "T"] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, $CellContext`n$1228484[
        "u"] = {0.2, 1.931370849898476, 0}, $CellContext`n$1228484["uBar"] = {
        0.2, 1.931370849898476, 0.}, $CellContext`n$1228484[
        "updateReactionForce"] = Null, $CellContext`n$1228484["dofs", 1] = 
       3, $CellContext`n$1228484["dofs", 2] = 
       4, $CellContext`n$1228484["dofs", 3] = 
       0, $CellContext`n$1228484["fields", 1] = 
       5, $CellContext`n$1228484["fields", 2] = 
       5, $CellContext`n$1228484["fields", 3] = 
       0, $CellContext`n$1228484["ui", "directions"] = {1, -1, 
        1}, $CellContext`n$1228484["ui", "hinge offset"] = {0, 
        0}, $CellContext`n$1228484["ui", "verified", "constraint"] = 
       False, $CellContext`n$1228484["distance to", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228484["p"] - $CellContext`on$[
         "p"]], $CellContext`n$1228484["distance to c", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228484["pc"] - $CellContext`on$[
         "pc"]], $CellContext`n$1228484["gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`n$1228484[
         "u"] = $CellContext`dGatherVectorReturn[
          $CellContext`n$1228484["dofs"], $CellContext`u$, 
          $CellContext`n$1228484["cv"]]), 
       Attributes[$CellContext`uBars$1232277] = {Temporary}, 
       Attributes[$CellContext`e$1228493] = {
        Temporary}, $CellContext`e$1228493["alpha"] = 
       0, $CellContext`e$1228493["alpha nl"] = ArcTan[4 + Part[
           Last[$CellContext`uBars$1232277], 3], -Part[
           Last[$CellContext`uBars$1232277], 4]], $CellContext`e$1228493[
        "center"] = {2, -4}, $CellContext`e$1228493["checkConsistency"] = 
       Null, $CellContext`e$1228493["dofs"] = {0, 0, 3, 
        4}, $CellContext`e$1228493["EA"] = 200, $CellContext`e$1228493["EI"] = 
       0, $CellContext`e$1228493["eps0"] = 
       0, $CellContext`e$1228493["ex"] = {1, 0}, $CellContext`e$1228493["ez"] = 
       Return[{0, 1}], $CellContext`e$1228493["fields"] = {1, 
        2}, $CellContext`e$1228493["isAlongGlobalXAxis"] = 
       True, $CellContext`e$1228493["isLineElement"] = 
       True, $CellContext`e$1228493["K"] = {{50, -50}, {-50, 
        50}}, $CellContext`e$1228493["kappa0"] = 
       0, $CellContext`e$1228493["KBar"] = {{50, 0, -50, 0}, {0, 0, 0, 
        0}, {-50, 0, 50, 0}, {0, 0, 0, 0}}, $CellContext`e$1228493[
        "KBarII"] = {{0., 0., 0., 0.}, {0., 4.150066661641116, 
        0., -4.150066661641116}, {0., 0., 0., 0.}, {0., -4.150066661641116, 
        0., 4.150066661641116}}, $CellContext`e$1228493["KBar nl"] = 
       Return[{{49.22680005651198, 
         20.627750077522908`, -49.22680005651198, -20.627750077522908`}, \
{-0.8878661857072265, 3.9609719337473535`, 
         0.8878661857072265, -3.9609719337473535`}, {-49.22680005651198, \
-20.627750077522908`, 49.22680005651198, 20.627750077522908`}, {
         0.8878661857072265, -3.9609719337473535`, -0.8878661857072265, 
         3.9609719337473535`}}], $CellContext`e$1228493["KII"] = {{0., 0., 0.,
         0.}, {0., 4.150066661641116, 0., -4.150066661641116}, {0., 0., 0., 
        0.}, {0., -4.150066661641116, 0., 
        4.150066661641116}}, $CellContext`e$1228493["l"] = 
       4, $CellContext`e$1228493["l c"] = Sqrt[Abs[-4 - Part[
             Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
            Part[
             Last[$CellContext`uBars$1232277], 4]]^2], $CellContext`e$1228493[
        "load"] = 0, $CellContext`e$1228493["M"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228493["N"] = 
       Function[$CellContext`x$, 16.600266646564464`], $CellContext`e$1228493[
        "n nl"] = Return[{(-50) (-4 + Sqrt[Abs[-4 - Part[
                 Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
                Part[
                 Last[$CellContext`uBars$1232277], 4]]^2]), 
          50 (-4 + Sqrt[Abs[-4 - Part[
                 Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
                Part[
                 Last[$CellContext`uBars$1232277], 
                 4]]^2])}], $CellContext`e$1228493["N nl"] = 
       Function[$CellContext`x$, 
         50 (1 - $CellContext`x$/4) (-4 + Sqrt[Abs[-4 - Part[
                 Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
                Part[
                 Last[$CellContext`uBars$1232277], 4]]^2]) + (
           25 $CellContext`x$ (-4 + Sqrt[Abs[-4 - Part[
                  Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
                 Part[
                  Last[$CellContext`uBars$1232277], 4]]^2]))/
          2], $CellContext`e$1228493["n nodes"] = 
       2, $CellContext`e$1228493[
        "nodes"] = {$CellContext`n$1228483, $CellContext`n$1228484}, \
$CellContext`e$1228493["p"] = 
       Return[{4 (0["p", 1]/3 + 0["p", 2]/6), 
          4 (0["p", 1]/6 + 0["p", 2]/3)}], $CellContext`e$1228493["P"] = 
       Return[10.], $CellContext`e$1228493["pBar"] = {
        4 (0["p", 1]/3 + 0["p", 2]/6), 0, 4 (0["p", 1]/6 + 0["p", 2]/3), 
         0}, $CellContext`e$1228493["pBarBCs"] = {0, 0, 0, 
        0}, $CellContext`e$1228493["reset dofs"] = 
       Null, $CellContext`e$1228493[
        "SBar nl"] = {(-49.99368014671836) (-4 + Sqrt[Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
               Part[
                Last[$CellContext`uBars$1232277], 
                4]]^2]), (-0.7949499277429981) (-4 + Sqrt[Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
               Part[
                Last[$CellContext`uBars$1232277], 4]]^2]), 
         49.99368014671836 (-4 + Sqrt[Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
               Part[
                Last[$CellContext`uBars$1232277], 4]]^2]), 
         0.7949499277429981 (-4 + Sqrt[Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 3]]^2 + Abs[
               Part[
                Last[$CellContext`uBars$1232277], 
                4]]^2])}, $CellContext`e$1228493["T"] = {{1, 0, 0, 0}, {0, 0, 
        1, 0}}, $CellContext`e$1228493["T0"] = {{1, 0}, {0, 
        1}}, $CellContext`e$1228493["T1"] = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 
        0, 1, 0}, {0, 0, 0, 1}}, $CellContext`e$1228493[
        "thIICompressionOnly"] = 
       False, $CellContext`e$1228493["T nl"] = {{(4 + Part[
             Last[$CellContext`uBars$1232277], 3])/Sqrt[(4 + Part[
               Last[$CellContext`uBars$1232277], 3])^2 + Part[
              Last[$CellContext`uBars$1232277], 4]^2], Part[
            Last[$CellContext`uBars$1232277], 4]/Sqrt[(4 + Part[
               Last[$CellContext`uBars$1232277], 3])^2 + Part[
              Last[$CellContext`uBars$1232277], 4]^2], 0, 0}, {0, 0, (4 + Part[
             Last[$CellContext`uBars$1232277], 3])/Sqrt[(4 + Part[
               Last[$CellContext`uBars$1232277], 3])^2 + Part[
              Last[$CellContext`uBars$1232277], 4]^2], Part[
            Last[$CellContext`uBars$1232277], 4]/Sqrt[(4 + Part[
               Last[$CellContext`uBars$1232277], 3])^2 + Part[
              Last[$CellContext`uBars$1232277], 
              4]^2]}}, $CellContext`e$1228493["type"] = 
       "line element.truss", $CellContext`e$1228493["u"] = Return[{
          Function[$CellContext`x$, 0. + 0.05 $CellContext`x$], 
          
          Function[$CellContext`x$, 0. + 
           0.482842712474619 $CellContext`x$]}], $CellContext`e$1228493[
        "uBarVector"] = {
        0, 0, 0.2, 1.931370849898476}, $CellContext`e$1228493["un"] = {0, 0, 
        0, 0}, $CellContext`e$1228493["uVector"] = {0., 0., 0.2, 
        1.931370849898476}, $CellContext`e$1228493["V"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228493["X"] = Return[
         Function[$CellContext`x$, {$CellContext`x$, (-4) (
             1 - $CellContext`x$/
             4) - $CellContext`x$}]], $CellContext`e$1228493["computed", "M"] = 
       Null, $CellContext`e$1228493["computed", "N"] = 
       Null, $CellContext`e$1228493["computed", "V"] = 
       Null, $CellContext`e$1228493[
        "EnteredFunction", "M"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228493[
        "EnteredFunction", "N"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228493[
        "EnteredFunction", "V"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228493[
        "forces", 1] = {}, $CellContext`e$1228493[
        "forces", 2] = {}, $CellContext`e$1228493["hinge", 1] = {
        False, False, False}, $CellContext`e$1228493["hinge", 2] = {
        False, False, False}, $CellContext`e$1228493[
        "n", 1] = $CellContext`n$1228483, $CellContext`e$1228493[
        "n", 2] = $CellContext`n$1228484, $CellContext`e$1228493[
        "dofs", 1, 1] = 0, $CellContext`e$1228493["dofs", 1, 2] = 
       0, $CellContext`e$1228493["dofs", 1, 3] = 
       0, $CellContext`e$1228493["dofs", 2, 1] = 
       3, $CellContext`e$1228493["dofs", 2, 2] = 
       4, $CellContext`e$1228493["dofs", 2, 3] = 
       0, $CellContext`e$1228493["ui", "verified", "M"] = 
       False, $CellContext`e$1228493["ui", "verified", "N"] = 
       False, $CellContext`e$1228493["ui", "verified", "V"] = 
       False, $CellContext`e$1228493["indexOfNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Part[
         Position[
          $CellContext`e$1228493["nodes"], $CellContext`ne$], 1, 
         1], $CellContext`e$1228493["dofsByNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Table[
         $CellContext`e$1228493["dofs", 
          $CellContext`e$1228493[
          "indexOfNode", $CellContext`ne$], $CellContext`j$1228493], \
{$CellContext`j$1228493, 
          Length[
           $CellContext`e$1228493["fields"]]}], $CellContext`e$1228493[
        "gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`e$1228493[
         "uBarVector"] = $CellContext`dGatherVectorReturn[
          $CellContext`e$1228493["dofs"], $CellContext`u$, 
          $CellContext`e$1228493["un"]]), $CellContext`e$1228493["x", 
         Pattern[$CellContext`s$, 
          Blank[]]] := 
       Module[{$CellContext`X$, $CellContext`u$, $CellContext`ex$, \
$CellContext`ez$}, $CellContext`X$ = $CellContext`e$1228492[
           "X"]; $CellContext`u$ = $CellContext`e$1228492[
           "u"]; $CellContext`ex$ = $CellContext`e$1228492[
           "ex"]; $CellContext`ez$ = $CellContext`e$1228492["ez"]; Return[
           Function[$CellContext`x$, 
            
            Evaluate[$CellContext`X$[$CellContext`x$] + $CellContext`s$ (
               Part[$CellContext`u$, 1][$CellContext`x$] $CellContext`ex$ + 
               Part[$CellContext`u$, 2][$CellContext`x$] $CellContext`ez$)]]]; 
         Null], $CellContext`e$1228493["directionFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := Module[{$CellContext`on$}, $CellContext`assertThat[
           
           Or[$CellContext`n$ == $CellContext`e$1228492[
             "n", 1], $CellContext`n$ == $CellContext`e$1228492["n", 2]], 
           "Node node part of element in: directionFrom"]; $CellContext`on$ = 
          If[$CellContext`n$ === $CellContext`e$1228492["n", 1], 
            $CellContext`e$1228492["n", 2], 
            $CellContext`e$1228492["n", 1]]; Return[
           Normalize[$CellContext`on$["p"] - $CellContext`n$["p"]]]; 
         Null], $CellContext`e$1228493["minAngleFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`d0$, $CellContext`d1$, $CellContext`a1$, \
$CellContext`a2$}, $CellContext`a1$ = 
          Pi/2; $CellContext`d0$ = $CellContext`e$1228492[
           "directionFrom", $CellContext`n$]; 
         Do[$CellContext`d1$ = $CellContext`ee[
             "directionFrom", $CellContext`n$]; $CellContext`a2$ = 
            VectorAngle[$CellContext`d0$, $CellContext`d1$]; 
           While[$CellContext`a2$ < 0, 
             AddTo[$CellContext`a2$, 2 Pi]]; If[
             
             And[$CellContext`a2$ > 
              0.00001, $CellContext`a2$ < $CellContext`a1$], $CellContext`a1$ = \
$CellContext`a2$]; Null, {$CellContext`ee, 
            $CellContext`n$["elements"]}]; Return[$CellContext`a1$]; 
         Null], $CellContext`e$1228493["endForce", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228492["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228492["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228492[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228492[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228492[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228492[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ {$CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}]; Null], $CellContext`e$1228493["endForceLocal", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228492["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228492["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228492[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228492[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228492[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228492[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ Dot[
             $CellContext`n$[
             "T"], {$CellContext`Ne$, $CellContext`Ve$, $CellContext`me$}]]; 
         Null], $CellContext`e$1228493["getContinuationElement", 
         Pattern[$CellContext`i$, 
          Blank[]]] := 
       Module[{$CellContext`ae$ = 
          Null, $CellContext`node$, $CellContext`elements$, \
$CellContext`elt$}, $CellContext`node$ = $CellContext`e$1228492[
           "n", $CellContext`i$]; $CellContext`elements$ = $CellContext`node$[
           "elements"]; Do[If[
             And[
              
              Not[$CellContext`elt$ === $CellContext`e$1228492], \
$CellContext`elt$["ex"] == $CellContext`e$1228492[
               "ex"]], $CellContext`ae$ = $CellContext`elt$]; 
           Null, {$CellContext`elt$, $CellContext`elements$}]; 
         Return[$CellContext`ae$]; Null], 
       Attributes[$CellContext`n$1228483] = {
        Temporary}, $CellContext`n$1228483["alpha"] = 
       0, $CellContext`n$1228483["c"] = {
        False, False, True}, $CellContext`n$1228483["checkConsistency"] = 
       Null, $CellContext`n$1228483["computedReactionForce"] = {0, 0, 
        0}, $CellContext`n$1228483["cv"] = {0, 0, 0}, $CellContext`n$1228483[
        "dofs"] = {0, 0, 0}, $CellContext`n$1228483[
        "elements"] = {$CellContext`e$1228493, $CellContext`e$1228505}, \
$CellContext`n$1228483["forces"] = {}, $CellContext`n$1228483[
        "getHingedElements"] = 
       Return[{}], $CellContext`n$1228483[
        "getHinges"] = {}, $CellContext`n$1228483["getHingeType"] = 
       Return[5], $CellContext`n$1228483["isConstrained"] = 
       True, $CellContext`n$1228483["isHinge"] = 
       False, $CellContext`n$1228483["p"] = {0, -4}, $CellContext`n$1228483[
        "pc"] = {0, -4}, $CellContext`n$1228483[
        "reactionForce"] = {-11.724642719654137`, 4.875623926910327, 
         0}, $CellContext`n$1228483["reset dofs"] = 
       Null, $CellContext`n$1228483[
        "residual"] = {-11.724642719654137`, 4.875623926910327, 
         0}, $CellContext`n$1228483[
        "rigidLinks"] = {}, $CellContext`n$1228483[
        "summedElementEndForces"] = {-11.724642719654137`, 4.875623926910327, 
         0}, $CellContext`n$1228483["T"] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 
        1}}, $CellContext`n$1228483["u"] = {0, 0, 0}, $CellContext`n$1228483[
        "uBar"] = {0, 0, 0}, $CellContext`n$1228483["updateReactionForce"] = 
       Null, $CellContext`n$1228483["dofs", 1] = 
       0, $CellContext`n$1228483["dofs", 2] = 
       0, $CellContext`n$1228483["dofs", 3] = 
       0, $CellContext`n$1228483["fields", 1] = 
       3, $CellContext`n$1228483["fields", 2] = 
       3, $CellContext`n$1228483["fields", 3] = 
       0, $CellContext`n$1228483["ui", "directions"] = {1, -1, 
        1}, $CellContext`n$1228483["ui", "hinge offset"] = {0, 
        0}, $CellContext`n$1228483["ui", "verified", "constraint"] = 
       False, $CellContext`n$1228483["distance to", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228483["p"] - $CellContext`on$[
         "p"]], $CellContext`n$1228483["distance to c", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228483["pc"] - $CellContext`on$[
         "pc"]], $CellContext`n$1228483["gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`n$1228483[
         "u"] = $CellContext`dGatherVectorReturn[
          $CellContext`n$1228483["dofs"], $CellContext`u$, 
          $CellContext`n$1228483["cv"]]), 
       Attributes[$CellContext`e$1228505] = {
        Temporary}, $CellContext`e$1228505["alpha"] = -Pi/
        4, $CellContext`e$1228505["alpha nl"] = 
       ArcTan[4 + $CellContext`uBars$1232277, -4 - Part[
          Last[$CellContext`uBars$1232277], 2]], $CellContext`e$1228505[
        "center"] = {2, -2}, $CellContext`e$1228505["checkConsistency"] = 
       Null, $CellContext`e$1228505["dofs"] = {0, 0, 1, 
        2}, $CellContext`e$1228505["EA"] = 200, $CellContext`e$1228505["EI"] = 
       0, $CellContext`e$1228505["eps0"] = 
       0, $CellContext`e$1228505["ex"] = {
        1/Sqrt[2], 1/Sqrt[2]}, $CellContext`e$1228505["ez"] = 
       Return[{-(1/Sqrt[2]), 1/Sqrt[2]}], $CellContext`e$1228505["fields"] = {
        1, 2}, $CellContext`e$1228505["isAlongGlobalXAxis"] = 
       False, $CellContext`e$1228505["isLineElement"] = 
       True, $CellContext`e$1228505[
        "K"] = {{
         25 Sqrt[2], (-25) Sqrt[2]}, {(-25) Sqrt[2], 25 
          Sqrt[2]}}, $CellContext`e$1228505["kappa0"] = 
       0, $CellContext`e$1228505[
        "KBar"] = {{25/Sqrt[2], 25/Sqrt[2], (-25)/Sqrt[2], (-25)/Sqrt[2]}, {
         25/Sqrt[2], 25/Sqrt[2], (-25)/Sqrt[2], (-25)/Sqrt[2]}, {(-25)/Sqrt[
          2], (-25)/Sqrt[2], 25/Sqrt[2], 25/Sqrt[2]}, {(-25)/Sqrt[2], (-25)/
          Sqrt[2], 25/Sqrt[2], 25/Sqrt[2]}}, $CellContext`e$1228505[
        "KBarII"] = {{-0.6094529908637908, 0.6094529908637908, 
        0.6094529908637908, -0.6094529908637908}, {
        0.6094529908637908, -0.6094529908637908, -0.6094529908637908, 
        0.6094529908637908}, {
        0.6094529908637908, -0.6094529908637908, -0.6094529908637908, 
        0.6094529908637908}, {-0.6094529908637908, 0.6094529908637908, 
        0.6094529908637908, -0.6094529908637908}}, $CellContext`e$1228505[
        "KBar nl"] = 
       Return[{{13.909112943030259`, 
         26.6002501456032, -13.909112943030259`, -26.6002501456032}, {
         16.644042884257463`, 
         26.185962911138134`, -16.644042884257463`, -26.185962911138134`}, \
{-13.909112943030259`, -26.6002501456032, 13.909112943030259`, 
         26.6002501456032}, {-16.644042884257463`, -26.185962911138134`, 
         16.644042884257463`, 26.185962911138134`}}], $CellContext`e$1228505[
        "KII"] = {{0., 0., 0., 0.}, {0., -1.2189059817275818`, 0., 
        1.2189059817275818`}, {0., 0., 0., 0.}, {0., 1.2189059817275818`, 
        0., -1.2189059817275818`}}, $CellContext`e$1228505["l"] = 
       4 Sqrt[2], $CellContext`e$1228505["l c"] = 
       Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
             Last[$CellContext`uBars$1232277], 2]]^2], $CellContext`e$1228505[
        "load"] = 0, $CellContext`e$1228505["M"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228505["N"] = 
       Function[$CellContext`x$, -6.895173482467354], $CellContext`e$1228505[
        "n nl"] = Return[{(-25) 
          Sqrt[2] ((-4) Sqrt[2] + 
           Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                 Last[$CellContext`uBars$1232277], 2]]^2]), 25 
          Sqrt[2] ((-4) Sqrt[2] + 
           Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                 Last[$CellContext`uBars$1232277], 
                 2]]^2])}], $CellContext`e$1228505["N nl"] = 
       Function[$CellContext`x$, (
           25 $CellContext`x$ ((-4) Sqrt[2] + 
            Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                  Last[$CellContext`uBars$1232277], 2]]^2]))/4 + 
         25 Sqrt[2] (1 - $CellContext`x$/(4 Sqrt[2])) ((-4) Sqrt[2] + 
           Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                 Last[$CellContext`uBars$1232277], 
                 2]]^2])], $CellContext`e$1228505["n nodes"] = 
       2, $CellContext`e$1228505[
        "nodes"] = {$CellContext`n$1228483, $CellContext`n$1228482}, \
$CellContext`e$1228505["p"] = 
       Return[{4 Sqrt[2] (0["p", 1]/3 + 0["p", 2]/6), 4 
          Sqrt[2] (0["p", 1]/6 + 0["p", 2]/3)}], $CellContext`e$1228505["P"] = 
       Return[28.284271247461895`], $CellContext`e$1228505["pBar"] = {
        4 (0["p", 1]/3 + 0["p", 2]/6), 4 (0["p", 1]/3 + 0["p", 2]/6), 
         4 (0["p", 1]/6 + 0["p", 2]/3), 
         4 (0["p", 1]/6 + 0["p", 2]/3)}, $CellContext`e$1228505["pBarBCs"] = {
        0, 0, 0, 0}, $CellContext`e$1228505["reset dofs"] = 
       Null, $CellContext`e$1228505[
        "SBar nl"] = {(-24.57049790618177) ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 
                2]]^2]), (-25.4222468055504) ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 2]]^2]), 
         24.57049790618177 ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 2]]^2]), 
         25.4222468055504 ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 - $CellContext`uBars$1232277]^2 + Abs[-4 - Part[
                Last[$CellContext`uBars$1232277], 
                2]]^2])}, $CellContext`e$1228505[
        "T"] = {{1/Sqrt[2], 1/Sqrt[2], 0, 0}, {
         0, 0, 1/Sqrt[2], 1/Sqrt[2]}}, $CellContext`e$1228505[
        "T0"] = {{
         1/Sqrt[2], 1/Sqrt[2]}, {-(1/Sqrt[2]), 1/Sqrt[
          2]}}, $CellContext`e$1228505[
        "T1"] = {{
         1/Sqrt[2], 1/Sqrt[2], 0, 0}, {-(1/Sqrt[2]), 1/Sqrt[2], 0, 0}, {
         0, 0, 1/Sqrt[2], 1/Sqrt[2]}, {
         0, 0, -(1/Sqrt[2]), 1/Sqrt[2]}}, $CellContext`e$1228505[
        "thIICompressionOnly"] = 
       False, $CellContext`e$1228505[
        "T nl"] = {{(4 + $CellContext`uBars$1232277)/
          Sqrt[(4 + $CellContext`uBars$1232277)^2 + (-4 - Part[
              Last[$CellContext`uBars$1232277], 2])^2], -((-4 - Part[
             Last[$CellContext`uBars$1232277], 2])/
           Sqrt[(4 + $CellContext`uBars$1232277)^2 + (-4 - Part[
               Last[$CellContext`uBars$1232277], 2])^2]), 0, 0}, {
         0, 0, (4 + $CellContext`uBars$1232277)/
          Sqrt[(4 + $CellContext`uBars$1232277)^2 + (-4 - Part[
              Last[$CellContext`uBars$1232277], 2])^2], -((-4 - Part[
             Last[$CellContext`uBars$1232277], 2])/
           Sqrt[(4 + $CellContext`uBars$1232277)^2 + (-4 - Part[
               Last[$CellContext`uBars$1232277], 
               2])^2])}}, $CellContext`e$1228505["type"] = 
       "line element.truss", $CellContext`e$1228505["u"] = Return[{
          
          Function[$CellContext`x$, 0. + 
           0.14142135623730948` $CellContext`x$], 
          
          Function[$CellContext`x$, 0. + 
           0.29142135623730947` $CellContext`x$]}], $CellContext`e$1228505[
        "uBarVector"] = {
        0, 0, -0.6, 1.7313708498984761`}, $CellContext`e$1228505["un"] = {0, 
        0, 0, 0}, $CellContext`e$1228505["uVector"] = {0., 0., 
        0.7999999999999999, 1.648528137423857}, $CellContext`e$1228505["V"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228505["X"] = Return[
         Function[$CellContext`x$, {$CellContext`x$/Sqrt[
           2], (-4) (1 - $CellContext`x$/(4 
            Sqrt[2]))}]], $CellContext`e$1228505["computed", "M"] = 
       Null, $CellContext`e$1228505["computed", "N"] = 
       Null, $CellContext`e$1228505["computed", "V"] = 
       Null, $CellContext`e$1228505[
        "EnteredFunction", "M"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4 Sqrt[2]]], $CellContext`e$1228505[
        "EnteredFunction", "N"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4 Sqrt[2]]], $CellContext`e$1228505[
        "EnteredFunction", "V"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4 Sqrt[2]]], $CellContext`e$1228505[
        "forces", 1] = {}, $CellContext`e$1228505[
        "forces", 2] = {}, $CellContext`e$1228505["hinge", 1] = {
        False, False, False}, $CellContext`e$1228505["hinge", 2] = {
        False, False, False}, $CellContext`e$1228505[
        "n", 1] = $CellContext`n$1228483, $CellContext`e$1228505[
        "n", 2] = $CellContext`n$1228482, $CellContext`e$1228505[
        "dofs", 1, 1] = 0, $CellContext`e$1228505["dofs", 1, 2] = 
       0, $CellContext`e$1228505["dofs", 1, 3] = 
       0, $CellContext`e$1228505["dofs", 2, 1] = 
       1, $CellContext`e$1228505["dofs", 2, 2] = 
       2, $CellContext`e$1228505["dofs", 2, 3] = 
       0, $CellContext`e$1228505["ui", "verified", "M"] = 
       False, $CellContext`e$1228505["ui", "verified", "N"] = 
       False, $CellContext`e$1228505["ui", "verified", "V"] = 
       False, $CellContext`e$1228505["indexOfNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Part[
         Position[
          $CellContext`e$1228505["nodes"], $CellContext`ne$], 1, 
         1], $CellContext`e$1228505["dofsByNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Table[
         $CellContext`e$1228505["dofs", 
          $CellContext`e$1228505[
          "indexOfNode", $CellContext`ne$], $CellContext`j$1228505], \
{$CellContext`j$1228505, 
          Length[
           $CellContext`e$1228505["fields"]]}], $CellContext`e$1228505[
        "gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`e$1228505[
         "uBarVector"] = $CellContext`dGatherVectorReturn[
          $CellContext`e$1228505["dofs"], $CellContext`u$, 
          $CellContext`e$1228505["un"]]), $CellContext`e$1228505["x", 
         Pattern[$CellContext`s$, 
          Blank[]]] := 
       Module[{$CellContext`X$, $CellContext`u$, $CellContext`ex$, \
$CellContext`ez$}, $CellContext`X$ = $CellContext`e$1228504[
           "X"]; $CellContext`u$ = $CellContext`e$1228504[
           "u"]; $CellContext`ex$ = $CellContext`e$1228504[
           "ex"]; $CellContext`ez$ = $CellContext`e$1228504["ez"]; Return[
           Function[$CellContext`x$, 
            
            Evaluate[$CellContext`X$[$CellContext`x$] + $CellContext`s$ (
               Part[$CellContext`u$, 1][$CellContext`x$] $CellContext`ex$ + 
               Part[$CellContext`u$, 2][$CellContext`x$] $CellContext`ez$)]]]; 
         Null], $CellContext`e$1228505["directionFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := Module[{$CellContext`on$}, $CellContext`assertThat[
           
           Or[$CellContext`n$ == $CellContext`e$1228504[
             "n", 1], $CellContext`n$ == $CellContext`e$1228504["n", 2]], 
           "Node node part of element in: directionFrom"]; $CellContext`on$ = 
          If[$CellContext`n$ === $CellContext`e$1228504["n", 1], 
            $CellContext`e$1228504["n", 2], 
            $CellContext`e$1228504["n", 1]]; Return[
           Normalize[$CellContext`on$["p"] - $CellContext`n$["p"]]]; 
         Null], $CellContext`e$1228505["minAngleFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`d0$, $CellContext`d1$, $CellContext`a1$, \
$CellContext`a2$}, $CellContext`a1$ = 
          Pi/2; $CellContext`d0$ = $CellContext`e$1228504[
           "directionFrom", $CellContext`n$]; 
         Do[$CellContext`d1$ = $CellContext`ee[
             "directionFrom", $CellContext`n$]; $CellContext`a2$ = 
            VectorAngle[$CellContext`d0$, $CellContext`d1$]; 
           While[$CellContext`a2$ < 0, 
             AddTo[$CellContext`a2$, 2 Pi]]; If[
             
             And[$CellContext`a2$ > 
              0.00001, $CellContext`a2$ < $CellContext`a1$], $CellContext`a1$ = \
$CellContext`a2$]; Null, {$CellContext`ee, 
            $CellContext`n$["elements"]}]; Return[$CellContext`a1$]; 
         Null], $CellContext`e$1228505["endForce", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228504["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228504["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228504[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228504[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228504[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228504[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ {$CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}]; Null], $CellContext`e$1228505["endForceLocal", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228504["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228504["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228504[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228504[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228504[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228504[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ Dot[
             $CellContext`n$[
             "T"], {$CellContext`Ne$, $CellContext`Ve$, $CellContext`me$}]]; 
         Null], $CellContext`e$1228505["getContinuationElement", 
         Pattern[$CellContext`i$, 
          Blank[]]] := 
       Module[{$CellContext`ae$ = 
          Null, $CellContext`node$, $CellContext`elements$, \
$CellContext`elt$}, $CellContext`node$ = $CellContext`e$1228504[
           "n", $CellContext`i$]; $CellContext`elements$ = $CellContext`node$[
           "elements"]; Do[If[
             And[
              
              Not[$CellContext`elt$ === $CellContext`e$1228504], \
$CellContext`elt$["ex"] == $CellContext`e$1228504[
               "ex"]], $CellContext`ae$ = $CellContext`elt$]; 
           Null, {$CellContext`elt$, $CellContext`elements$}]; 
         Return[$CellContext`ae$]; Null], 
       Attributes[$CellContext`x$] = {Temporary}, 
       Attributes[$CellContext`ne$] = {Temporary}, 
       Attributes[$CellContext`j$1228505] = {Temporary}, 
       Attributes[$CellContext`s$] = {Temporary}, 
       Attributes[$CellContext`X$] = {Temporary}, 
       Attributes[$CellContext`ex$] = {Temporary}, 
       Attributes[$CellContext`ez$] = {Temporary}, 
       Attributes[$CellContext`e$1228504] = {
        Temporary}, $CellContext`e$1228504 = $CellContext`e$1228505, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`assertThat[
         Pattern[$CellContext`b, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]]] := If[
         Not[$CellContext`b], 
         Message[
          MessageName[$CellContext`assertThat, "message"], $CellContext`m], 
         Null; Null], 
       TagSet[$CellContext`assertThat, 
        MessageName[$CellContext`assertThat, "message"], 
        "Assertion failed: `1`"], Attributes[$CellContext`d0$] = {Temporary}, 
       Attributes[$CellContext`d1$] = {Temporary}, 
       Attributes[$CellContext`a1$] = {Temporary}, 
       Attributes[$CellContext`a2$] = {Temporary}, 
       Attributes[$CellContext`idx$] = {Temporary}, 
       Attributes[$CellContext`sgn$] = {Temporary}, 
       Attributes[$CellContext`ve$] = {Temporary}, 
       Attributes[$CellContext`Ne$] = {Temporary}, 
       Attributes[$CellContext`Ve$] = {Temporary}, 
       Attributes[$CellContext`me$] = {Temporary}, 
       Attributes[$CellContext`i$] = {Temporary}, 
       Attributes[$CellContext`ae$] = {Temporary}, 
       Attributes[$CellContext`node$] = {Temporary}, 
       Attributes[$CellContext`elements$] = {Temporary}, 
       Attributes[$CellContext`elt$] = {Temporary}, 
       Attributes[$CellContext`j$1228493] = {Temporary}, 
       Attributes[$CellContext`e$1228492] = {
        Temporary}, $CellContext`e$1228492 = $CellContext`e$1228493, 
       Attributes[$CellContext`e$1228496] = {
        Temporary}, $CellContext`e$1228496["alpha"] = 
       0, $CellContext`e$1228496["alpha nl"] = ArcTan[4.538676814426395 - Part[
          Last[$CellContext`uBars$1232277], 3], -0.7403787942995423 + Part[
           Last[$CellContext`uBars$1232277], 4]], $CellContext`e$1228496[
        "center"] = {6, -4}, $CellContext`e$1228496["checkConsistency"] = 
       Null, $CellContext`e$1228496["dofs"] = {3, 4, 5, 
        6}, $CellContext`e$1228496["EA"] = 200, $CellContext`e$1228496["EI"] = 
       0, $CellContext`e$1228496["eps0"] = 
       0, $CellContext`e$1228496["ex"] = {1, 0}, $CellContext`e$1228496["ez"] = 
       Return[{0, 1}], $CellContext`e$1228496["fields"] = {1, 
        2}, $CellContext`e$1228496["isAlongGlobalXAxis"] = 
       True, $CellContext`e$1228496["isLineElement"] = 
       True, $CellContext`e$1228496["K"] = {{50, -50}, {-50, 
        50}}, $CellContext`e$1228496["kappa0"] = 
       0, $CellContext`e$1228496["KBar"] = {{50, 0, -50, 0}, {0, 0, 0, 
        0}, {-50, 0, 50, 0}, {0, 0, 0, 0}}, $CellContext`e$1228496[
        "KBarII"] = {{0., 0., 0., 0.}, {0., 2.5833935186888235`, 
        0., -2.5833935186888235`}, {0., 0., 0., 0.}, {
        0., -2.5833935186888235`, 0., 
        2.5833935186888235`}}, $CellContext`e$1228496["KBar nl"] = 
       Return[{{11.590548073947412` (3.8 + Part[
               Last[$CellContext`uBars$1232277], 5]) + 
           0.16811909282722906` (1.9313708498984763` - Part[
               Last[$CellContext`uBars$1232277], 
               6])^2, (-0.16811909282722906`) (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 6]) + 
           11.590548073947412` (-1.9313708498984763` + Part[
               Last[$CellContext`uBars$1232277], 6]), 
           11.590548073947412` (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) - 
           0.16811909282722906` (1.9313708498984763` - Part[
              Last[$CellContext`uBars$1232277], 6])^2, 
           11.590548073947412` (1.9313708498984763` - Part[
              Last[$CellContext`uBars$1232277], 6]) + 
           0.16811909282722906` (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 6])}, {
          1.850156682106489 (3.8 + Part[
               Last[$CellContext`uBars$1232277], 5]) + 
           0.16811909282722906` (3.8 + Part[
               Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 6]), 
           0.16811909282722906` (-3.8 - Part[
               Last[$CellContext`uBars$1232277], 5])^2 + 
           1.850156682106489 (-1.9313708498984763` + Part[
               Last[$CellContext`uBars$1232277], 6]), 
           1.850156682106489 (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) + 
           0.16811909282722906` (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 
              6]), (-0.16811909282722906`) (-3.8 - Part[
               Last[$CellContext`uBars$1232277], 5])^2 + 
           1.850156682106489 (1.9313708498984763` - Part[
              Last[$CellContext`uBars$1232277], 6])}, {
          11.590548073947412` (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) - 
           0.16811909282722906` (1.9313708498984763` - Part[
              Last[$CellContext`uBars$1232277], 6])^2, 
           11.590548073947412` (1.9313708498984763` - Part[
              Last[$CellContext`uBars$1232277], 6]) + 
           0.16811909282722906` (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 6]), 
           11.590548073947412` (3.8 + Part[
               Last[$CellContext`uBars$1232277], 5]) + 
           0.16811909282722906` (1.9313708498984763` - Part[
               Last[$CellContext`uBars$1232277], 
               6])^2, (-0.16811909282722906`) (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 6]) + 
           11.590548073947412` (-1.9313708498984763` + Part[
               Last[$CellContext`uBars$1232277], 6])}, {
          1.850156682106489 (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) + 
           0.16811909282722906` (-3.8 - Part[
              Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 
              6]), (-0.16811909282722906`) (-3.8 - Part[
               Last[$CellContext`uBars$1232277], 5])^2 + 
           1.850156682106489 (1.9313708498984763` - Part[
              Last[$CellContext`uBars$1232277], 6]), 
           1.850156682106489 (3.8 + Part[
               Last[$CellContext`uBars$1232277], 5]) + 
           0.16811909282722906` (3.8 + Part[
               Last[$CellContext`uBars$1232277], 5]) (1.9313708498984763` - 
             Part[
              Last[$CellContext`uBars$1232277], 6]), 
           0.16811909282722906` (-3.8 - Part[
               Last[$CellContext`uBars$1232277], 5])^2 + 
           1.850156682106489 (-1.9313708498984763` + Part[
               Last[$CellContext`uBars$1232277], 
               6])}}], $CellContext`e$1228496["KII"] = {{0., 0., 0., 0.}, {0.,
         2.5833935186888235`, 0., -2.5833935186888235`}, {0., 0., 0., 0.}, {
        0., -2.5833935186888235`, 0., 
        2.5833935186888235`}}, $CellContext`e$1228496["l"] = 
       4, $CellContext`e$1228496["l c"] = Sqrt[Abs[-4.538676814426395 + Part[
              Last[$CellContext`uBars$1232277], 3]]^2 + 
         Abs[-0.7403787942995423 + Part[
              Last[$CellContext`uBars$1232277], 
              4]]^2], $CellContext`e$1228496["load"] = 
       0, $CellContext`e$1228496["M"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228496["N"] = 
       Function[$CellContext`x$, 10.333574074755294`], $CellContext`e$1228496[
        "n nl"] = Return[{(-50) (-4 + Sqrt[Abs[-4.538676814426395 + Part[
                  Last[$CellContext`uBars$1232277], 3]]^2 + 
             Abs[-0.7403787942995423 + Part[
                  Last[$CellContext`uBars$1232277], 4]]^2]), 
          50 (-4 + Sqrt[Abs[-4.538676814426395 + Part[
                  Last[$CellContext`uBars$1232277], 3]]^2 + 
             Abs[-0.7403787942995423 + Part[
                  Last[$CellContext`uBars$1232277], 
                  4]]^2])}], $CellContext`e$1228496["N nl"] = 
       Function[$CellContext`x$, 
         50 (1 - $CellContext`x$/4) (-4 + Sqrt[Abs[-4.538676814426395 + Part[
                  Last[$CellContext`uBars$1232277], 3]]^2 + 
             Abs[-0.7403787942995423 + Part[
                  Last[$CellContext`uBars$1232277], 4]]^2]) + (
           25 $CellContext`x$ (-4 + Sqrt[Abs[-4.538676814426395 + Part[
                   Last[$CellContext`uBars$1232277], 3]]^2 + 
              Abs[-0.7403787942995423 + Part[
                   Last[$CellContext`uBars$1232277], 4]]^2]))/
          2], $CellContext`e$1228496["n nodes"] = 
       2, $CellContext`e$1228496[
        "nodes"] = {$CellContext`n$1228484, $CellContext`n$1228485}, \
$CellContext`e$1228496["p"] = 
       Return[{4 (0["p", 1]/3 + 0["p", 2]/6), 
          4 (0["p", 1]/6 + 0["p", 2]/3)}], $CellContext`e$1228496["P"] = 
       Return[10.], $CellContext`e$1228496["pBar"] = {
        4 (0["p", 1]/3 + 0["p", 2]/6), 0, 4 (0["p", 1]/6 + 0["p", 2]/3), 
         0}, $CellContext`e$1228496["pBarBCs"] = {0, 0, 0, 
        0}, $CellContext`e$1228496["reset dofs"] = 
       Null, $CellContext`e$1228496[
        "SBar nl"] = {(-49.37490660121425) (-4 + 
          Sqrt[Abs[-4.538676814426395 + Part[
                 Last[$CellContext`uBars$1232277], 3]]^2 + 
            Abs[-0.7403787942995423 + Part[
                 Last[$CellContext`uBars$1232277], 
                 4]]^2]), (-7.881535264234374) (-4 + 
          Sqrt[Abs[-4.538676814426395 + Part[
                 Last[$CellContext`uBars$1232277], 3]]^2 + 
            Abs[-0.7403787942995423 + Part[
                 Last[$CellContext`uBars$1232277], 4]]^2]), 
         49.37490660121425 (-4 + Sqrt[Abs[-4.538676814426395 + Part[
                 Last[$CellContext`uBars$1232277], 3]]^2 + 
            Abs[-0.7403787942995423 + Part[
                 Last[$CellContext`uBars$1232277], 4]]^2]), 
         7.881535264234374 (-4 + Sqrt[Abs[-4.538676814426395 + Part[
                 Last[$CellContext`uBars$1232277], 3]]^2 + 
            Abs[-0.7403787942995423 + Part[
                 Last[$CellContext`uBars$1232277], 
                 4]]^2])}, $CellContext`e$1228496["T"] = {{1, 0, 0, 0}, {0, 0,
         1, 0}}, $CellContext`e$1228496["T0"] = {{1, 0}, {0, 
        1}}, $CellContext`e$1228496["T1"] = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 
        0, 1, 0}, {0, 0, 0, 1}}, $CellContext`e$1228496[
        "thIICompressionOnly"] = 
       False, $CellContext`e$1228496["T nl"] = {{(4.538676814426395 - Part[
            Last[$CellContext`uBars$1232277], 3])/
          Sqrt[(4.538676814426395 - Part[
              Last[$CellContext`uBars$1232277], 3])^2 + (-0.7403787942995423 + 
             Part[
               Last[$CellContext`uBars$1232277], 
               4])^2], -((-0.7403787942995423 + Part[
              Last[$CellContext`uBars$1232277], 4])/
           Sqrt[(4.538676814426395 - Part[
               Last[$CellContext`uBars$1232277], 3])^2 + (-0.7403787942995423 + 
              Part[
                Last[$CellContext`uBars$1232277], 4])^2]), 0, 0}, {
         0, 0, (4.538676814426395 - Part[
            Last[$CellContext`uBars$1232277], 3])/
          Sqrt[(4.538676814426395 - Part[
              Last[$CellContext`uBars$1232277], 3])^2 + (-0.7403787942995423 + 
             Part[
               Last[$CellContext`uBars$1232277], 
               4])^2], -((-0.7403787942995423 + Part[
              Last[$CellContext`uBars$1232277], 4])/
           Sqrt[(4.538676814426395 - Part[
               Last[$CellContext`uBars$1232277], 3])^2 + (-0.7403787942995423 + 
              Part[
                Last[$CellContext`uBars$1232277], 
                4])^2])}}, $CellContext`e$1228496["type"] = 
       "line element.truss", $CellContext`e$1228496["u"] = Return[{
          
          Function[$CellContext`x$, 0.2 (1 - $CellContext`x$/4) + 
           0.1 $CellContext`x$], 
          
          Function[$CellContext`x$, 1.931370849898476 (1 - $CellContext`x$/4) + 
           0.8242640687119286 $CellContext`x$]}], $CellContext`e$1228496[
        "uBarVector"] = {0.2, 1.931370849898476, 0.4, 
        3.2970562748477144`}, $CellContext`e$1228496["un"] = {0, 0, 0, 
        0}, $CellContext`e$1228496["uVector"] = {0.2, 1.931370849898476, 0.4, 
        3.2970562748477144`}, $CellContext`e$1228496["V"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228496["X"] = Return[
         Function[$CellContext`x$, {
          4 (1 - $CellContext`x$/4) + 
           2 $CellContext`x$, (-4) (1 - $CellContext`x$/
             4) - $CellContext`x$}]], $CellContext`e$1228496["computed", "M"] = 
       Null, $CellContext`e$1228496["computed", "N"] = 
       Null, $CellContext`e$1228496["computed", "V"] = 
       Null, $CellContext`e$1228496[
        "EnteredFunction", "M"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228496[
        "EnteredFunction", "N"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228496[
        "EnteredFunction", "V"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4]], $CellContext`e$1228496[
        "forces", 1] = {}, $CellContext`e$1228496[
        "forces", 2] = {}, $CellContext`e$1228496["hinge", 1] = {
        False, False, False}, $CellContext`e$1228496["hinge", 2] = {
        False, False, False}, $CellContext`e$1228496[
        "n", 1] = $CellContext`n$1228484, $CellContext`e$1228496[
        "n", 2] = $CellContext`n$1228485, $CellContext`e$1228496[
        "dofs", 1, 1] = 3, $CellContext`e$1228496["dofs", 1, 2] = 
       4, $CellContext`e$1228496["dofs", 1, 3] = 
       0, $CellContext`e$1228496["dofs", 2, 1] = 
       5, $CellContext`e$1228496["dofs", 2, 2] = 
       6, $CellContext`e$1228496["dofs", 2, 3] = 
       0, $CellContext`e$1228496["ui", "verified", "M"] = 
       False, $CellContext`e$1228496["ui", "verified", "N"] = 
       False, $CellContext`e$1228496["ui", "verified", "V"] = 
       False, $CellContext`e$1228496["indexOfNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Part[
         Position[
          $CellContext`e$1228496["nodes"], $CellContext`ne$], 1, 
         1], $CellContext`e$1228496["dofsByNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Table[
         $CellContext`e$1228496["dofs", 
          $CellContext`e$1228496[
          "indexOfNode", $CellContext`ne$], $CellContext`j$1228496], \
{$CellContext`j$1228496, 
          Length[
           $CellContext`e$1228496["fields"]]}], $CellContext`e$1228496[
        "gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`e$1228496[
         "uBarVector"] = $CellContext`dGatherVectorReturn[
          $CellContext`e$1228496["dofs"], $CellContext`u$, 
          $CellContext`e$1228496["un"]]), $CellContext`e$1228496["x", 
         Pattern[$CellContext`s$, 
          Blank[]]] := 
       Module[{$CellContext`X$, $CellContext`u$, $CellContext`ex$, \
$CellContext`ez$}, $CellContext`X$ = $CellContext`e$1228495[
           "X"]; $CellContext`u$ = $CellContext`e$1228495[
           "u"]; $CellContext`ex$ = $CellContext`e$1228495[
           "ex"]; $CellContext`ez$ = $CellContext`e$1228495["ez"]; Return[
           Function[$CellContext`x$, 
            
            Evaluate[$CellContext`X$[$CellContext`x$] + $CellContext`s$ (
               Part[$CellContext`u$, 1][$CellContext`x$] $CellContext`ex$ + 
               Part[$CellContext`u$, 2][$CellContext`x$] $CellContext`ez$)]]]; 
         Null], $CellContext`e$1228496["directionFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := Module[{$CellContext`on$}, $CellContext`assertThat[
           
           Or[$CellContext`n$ == $CellContext`e$1228495[
             "n", 1], $CellContext`n$ == $CellContext`e$1228495["n", 2]], 
           "Node node part of element in: directionFrom"]; $CellContext`on$ = 
          If[$CellContext`n$ === $CellContext`e$1228495["n", 1], 
            $CellContext`e$1228495["n", 2], 
            $CellContext`e$1228495["n", 1]]; Return[
           Normalize[$CellContext`on$["p"] - $CellContext`n$["p"]]]; 
         Null], $CellContext`e$1228496["minAngleFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`d0$, $CellContext`d1$, $CellContext`a1$, \
$CellContext`a2$}, $CellContext`a1$ = 
          Pi/2; $CellContext`d0$ = $CellContext`e$1228495[
           "directionFrom", $CellContext`n$]; 
         Do[$CellContext`d1$ = $CellContext`ee[
             "directionFrom", $CellContext`n$]; $CellContext`a2$ = 
            VectorAngle[$CellContext`d0$, $CellContext`d1$]; 
           While[$CellContext`a2$ < 0, 
             AddTo[$CellContext`a2$, 2 Pi]]; If[
             
             And[$CellContext`a2$ > 
              0.00001, $CellContext`a2$ < $CellContext`a1$], $CellContext`a1$ = \
$CellContext`a2$]; Null, {$CellContext`ee, 
            $CellContext`n$["elements"]}]; Return[$CellContext`a1$]; 
         Null], $CellContext`e$1228496["endForce", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228495["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228495["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228495[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228495[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228495[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228495[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ {$CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}]; Null], $CellContext`e$1228496["endForceLocal", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228495["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228495["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228495[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228495[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228495[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228495[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ Dot[
             $CellContext`n$[
             "T"], {$CellContext`Ne$, $CellContext`Ve$, $CellContext`me$}]]; 
         Null], $CellContext`e$1228496["getContinuationElement", 
         Pattern[$CellContext`i$, 
          Blank[]]] := 
       Module[{$CellContext`ae$ = 
          Null, $CellContext`node$, $CellContext`elements$, \
$CellContext`elt$}, $CellContext`node$ = $CellContext`e$1228495[
           "n", $CellContext`i$]; $CellContext`elements$ = $CellContext`node$[
           "elements"]; Do[If[
             And[
              
              Not[$CellContext`elt$ === $CellContext`e$1228495], \
$CellContext`elt$["ex"] == $CellContext`e$1228495[
               "ex"]], $CellContext`ae$ = $CellContext`elt$]; 
           Null, {$CellContext`elt$, $CellContext`elements$}]; 
         Return[$CellContext`ae$]; Null], 
       Attributes[$CellContext`n$1228485] = {
        Temporary}, $CellContext`n$1228485["alpha"] = 
       0, $CellContext`n$1228485["c"] = {
        True, True, True}, $CellContext`n$1228485["checkConsistency"] = 
       Null, $CellContext`n$1228485["computedReactionForce"] = {0, 0, 
        0}, $CellContext`n$1228485["cv"] = {0, 0, 0}, $CellContext`n$1228485[
        "dofs"] = {5, 6, 0}, $CellContext`n$1228485[
        "elements"] = {$CellContext`e$1228496, $CellContext`e$1228502}, \
$CellContext`n$1228485["forces"] = {{0, 10, 0}}, $CellContext`n$1228485[
        "getHingedElements"] = 
       Return[{}], $CellContext`n$1228485[
        "getHinges"] = {}, $CellContext`n$1228485["getHingeType"] = 
       Return[5], $CellContext`n$1228485["isConstrained"] = 
       False, $CellContext`n$1228485["isHinge"] = 
       False, $CellContext`n$1228485["p"] = {8, -4}, $CellContext`n$1228485[
        "pc"] = {8 + Part[
           Last[$CellContext`uBars$1232277], 5], -4 + Part[
           Last[$CellContext`uBars$1232277], 6]}, $CellContext`n$1228485[
        "reactionForce"] = {0, 0, 0}, $CellContext`n$1228485["reset dofs"] = 
       Null, $CellContext`n$1228485["residual"] = {
        9.094344248019791, -8.760770173264497, 0}, $CellContext`n$1228485[
        "rigidLinks"] = {}, $CellContext`n$1228485[
        "summedElementEndForces"] = {
        9.094344248019791, 1.2392298267355029`, 0}, $CellContext`n$1228485[
        "T"] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, $CellContext`n$1228485[
        "u"] = {0.4, 3.2970562748477144`, 0}, $CellContext`n$1228485[
        "uBar"] = {0.4, 3.2970562748477144`, 0.}, $CellContext`n$1228485[
        "updateReactionForce"] = Null, $CellContext`n$1228485["dofs", 1] = 
       5, $CellContext`n$1228485["dofs", 2] = 
       6, $CellContext`n$1228485["dofs", 3] = 
       0, $CellContext`n$1228485["fields", 1] = 
       3, $CellContext`n$1228485["fields", 2] = 
       3, $CellContext`n$1228485["fields", 3] = 
       0, $CellContext`n$1228485["ui", "directions"] = {1, -1, 
        1}, $CellContext`n$1228485["ui", "hinge offset"] = {0, 
        0}, $CellContext`n$1228485["ui", "verified", "constraint"] = 
       False, $CellContext`n$1228485["distance to", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228485["p"] - $CellContext`on$[
         "p"]], $CellContext`n$1228485["distance to c", 
         Pattern[$CellContext`on$, 
          Blank[]]] := 
       Norm[$CellContext`n$1228485["pc"] - $CellContext`on$[
         "pc"]], $CellContext`n$1228485["gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`n$1228485[
         "u"] = $CellContext`dGatherVectorReturn[
          $CellContext`n$1228485["dofs"], $CellContext`u$, 
          $CellContext`n$1228485["cv"]]), 
       Attributes[$CellContext`e$1228502] = {
        Temporary}, $CellContext`e$1228502["alpha"] = 
       Pi/4, $CellContext`e$1228502["alpha nl"] = 
       ArcTan[4 - $CellContext`uBars$1232277 + Part[
           Last[$CellContext`uBars$1232277], 5], 4 + Part[
           Last[$CellContext`uBars$1232277], 2] - Part[
          Last[$CellContext`uBars$1232277], 6]], $CellContext`e$1228502[
        "center"] = {6, -2}, $CellContext`e$1228502["checkConsistency"] = 
       Null, $CellContext`e$1228502["dofs"] = {1, 2, 5, 
        6}, $CellContext`e$1228502["EA"] = 200, $CellContext`e$1228502["EI"] = 
       0, $CellContext`e$1228502["eps0"] = 
       0, $CellContext`e$1228502["ex"] = {
        1/Sqrt[2], -(1/Sqrt[2])}, $CellContext`e$1228502["ez"] = 
       Return[{1/Sqrt[2], 1/Sqrt[2]}], $CellContext`e$1228502["fields"] = {1, 
        2}, $CellContext`e$1228502["isAlongGlobalXAxis"] = 
       False, $CellContext`e$1228502["isLineElement"] = 
       True, $CellContext`e$1228502[
        "K"] = {{
         25 Sqrt[2], (-25) Sqrt[2]}, {(-25) Sqrt[2], 25 
          Sqrt[2]}}, $CellContext`e$1228502["kappa0"] = 
       0, $CellContext`e$1228502[
        "KBar"] = {{
         25/Sqrt[2], (-25)/Sqrt[2], (-25)/Sqrt[2], 25/Sqrt[2]}, {(-25)/Sqrt[
          2], 25/Sqrt[2], 25/Sqrt[2], (-25)/Sqrt[2]}, {(-25)/Sqrt[2], 25/Sqrt[
          2], 25/Sqrt[2], (-25)/Sqrt[2]}, {
         25/Sqrt[2], (-25)/Sqrt[2], (-25)/Sqrt[2], 25/Sqrt[
          2]}}, $CellContext`e$1228502[
        "KBarII"] = {{-0.15490372834193783`, -0.15490372834193783`, 
        0.15490372834193783`, 
        0.15490372834193783`}, {-0.15490372834193783`, -0.15490372834193783`, 
        0.15490372834193783`, 0.15490372834193783`}, {0.15490372834193783`, 
        0.15490372834193783`, -0.15490372834193783`, -0.15490372834193783`}, {
        0.15490372834193783`, 
        0.15490372834193783`, -0.15490372834193783`, -0.15490372834193783`}}, \
$CellContext`e$1228502["KBar nl"] = 
       Return[{{25.74053018931944, -12.368892635467805`, -25.74053018931944, 
         12.368892635467805`}, {-17.125982354783428`, 8.673247751344912, 
         17.125982354783428`, -8.673247751344912}, {-25.74053018931944, 
         12.368892635467805`, 25.74053018931944, -12.368892635467805`}, {
         17.125982354783428`, -8.673247751344912, -17.125982354783428`, 
         8.673247751344912}}], $CellContext`e$1228502["KII"] = {{0., 0., 0., 
        0.}, {0., -0.3098074566838757, 0., 0.3098074566838757}, {0., 0., 0., 
        0.}, {0., 0.3098074566838757, 
        0., -0.3098074566838757}}, $CellContext`e$1228502["l"] = 
       4 Sqrt[2], $CellContext`e$1228502["l c"] = 
       Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
             Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
              Last[$CellContext`uBars$1232277], 2] - Part[
             Last[$CellContext`uBars$1232277], 6]]^2], $CellContext`e$1228502[
        "load"] = 0, $CellContext`e$1228502["M"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228502["N"] = 
       Function[$CellContext`x$, -1.7525356278666089`], \
$CellContext`e$1228502["n nl"] = 
       Return[{(-25) 
          Sqrt[2] ((-4) Sqrt[2] + 
           Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                 Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                  Last[$CellContext`uBars$1232277], 2] - Part[
                 Last[$CellContext`uBars$1232277], 6]]^2]), 25 
          Sqrt[2] ((-4) Sqrt[2] + 
           Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                 Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                  Last[$CellContext`uBars$1232277], 2] - Part[
                 Last[$CellContext`uBars$1232277], 
                 6]]^2])}], $CellContext`e$1228502["N nl"] = 
       Function[$CellContext`x$, (
           25 $CellContext`x$ ((-4) Sqrt[2] + 
            Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                  Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                   Last[$CellContext`uBars$1232277], 2] - Part[
                  Last[$CellContext`uBars$1232277], 6]]^2]))/4 + 
         25 Sqrt[2] (1 - $CellContext`x$/(4 Sqrt[2])) ((-4) Sqrt[2] + 
           Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                 Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                  Last[$CellContext`uBars$1232277], 2] - Part[
                 Last[$CellContext`uBars$1232277], 
                 6]]^2])], $CellContext`e$1228502["n nodes"] = 
       2, $CellContext`e$1228502[
        "nodes"] = {$CellContext`n$1228482, $CellContext`n$1228485}, \
$CellContext`e$1228502["p"] = 
       Return[{4 Sqrt[2] (0["p", 1]/3 + 0["p", 2]/6), 4 
          Sqrt[2] (0["p", 1]/6 + 0["p", 2]/3)}], $CellContext`e$1228502["P"] = 
       Return[-14.142135623730962`], $CellContext`e$1228502["pBar"] = {
        4 (0["p", 1]/3 + 0["p", 2]/6), (-4) (0["p", 1]/3 + 0["p", 2]/6), 
         4 (0["p", 1]/6 + 0["p", 2]/3), (-4) (0["p", 1]/6 + 
          0["p", 2]/3)}, $CellContext`e$1228502["pBarBCs"] = {0, 0, 0, 
        0}, $CellContext`e$1228502["reset dofs"] = 
       Null, $CellContext`e$1228502[
        "SBar nl"] = {(-29.34315849586862) ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                 Last[$CellContext`uBars$1232277], 2] - Part[
                Last[$CellContext`uBars$1232277], 6]]^2]), 
         19.722551799560154` ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                 Last[$CellContext`uBars$1232277], 2] - Part[
                Last[$CellContext`uBars$1232277], 6]]^2]), 
         29.34315849586862 ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                 Last[$CellContext`uBars$1232277], 2] - Part[
                Last[$CellContext`uBars$1232277], 
                6]]^2]), (-19.722551799560154`) ((-4) Sqrt[2] + 
          Sqrt[Abs[-4 + $CellContext`uBars$1232277 - Part[
                Last[$CellContext`uBars$1232277], 5]]^2 + Abs[4 + Part[
                 Last[$CellContext`uBars$1232277], 2] - Part[
                Last[$CellContext`uBars$1232277], 
                6]]^2])}, $CellContext`e$1228502[
        "T"] = {{1/Sqrt[2], -(1/Sqrt[2]), 0, 0}, {
         0, 0, 1/Sqrt[2], -(1/Sqrt[2])}}, $CellContext`e$1228502[
        "T0"] = {{1/Sqrt[2], -(1/Sqrt[2])}, {
         1/Sqrt[2], 1/Sqrt[2]}}, $CellContext`e$1228502[
        "T1"] = {{1/Sqrt[2], -(1/Sqrt[2]), 0, 0}, {
         1/Sqrt[2], 1/Sqrt[2], 0, 0}, {0, 0, 1/Sqrt[2], -(1/Sqrt[2])}, {
         0, 0, 1/Sqrt[2], 1/Sqrt[2]}}, $CellContext`e$1228502[
        "thIICompressionOnly"] = 
       False, $CellContext`e$1228502[
        "T nl"] = {{(4 - $CellContext`uBars$1232277 + Part[
             Last[$CellContext`uBars$1232277], 5])/
          Sqrt[(4 - $CellContext`uBars$1232277 + Part[
               Last[$CellContext`uBars$1232277], 5])^2 + (4 + Part[
               Last[$CellContext`uBars$1232277], 2] - Part[
              Last[$CellContext`uBars$1232277], 6])^2], -((4 + Part[
              Last[$CellContext`uBars$1232277], 2] - Part[
             Last[$CellContext`uBars$1232277], 6])/
           Sqrt[(4 - $CellContext`uBars$1232277 + Part[
                Last[$CellContext`uBars$1232277], 5])^2 + (4 + Part[
                Last[$CellContext`uBars$1232277], 2] - Part[
               Last[$CellContext`uBars$1232277], 6])^2]), 0, 0}, {
         0, 0, (4 - $CellContext`uBars$1232277 + Part[
             Last[$CellContext`uBars$1232277], 5])/
          Sqrt[(4 - $CellContext`uBars$1232277 + Part[
               Last[$CellContext`uBars$1232277], 5])^2 + (4 + Part[
               Last[$CellContext`uBars$1232277], 2] - Part[
              Last[$CellContext`uBars$1232277], 6])^2], -((4 + Part[
              Last[$CellContext`uBars$1232277], 2] - Part[
             Last[$CellContext`uBars$1232277], 6])/
           Sqrt[(4 - $CellContext`uBars$1232277 + Part[
                Last[$CellContext`uBars$1232277], 5])^2 + (4 + Part[
                Last[$CellContext`uBars$1232277], 2] - Part[
               Last[$CellContext`uBars$1232277], 
               6])^2])}}, $CellContext`e$1228502["type"] = 
       "line element.truss", $CellContext`e$1228502["u"] = Return[{
          
          Function[$CellContext`x$, (-0.36213203435596425`) $CellContext`x$ - 
           1.648528137423857 (1 - $CellContext`x$/(4 Sqrt[2]))], 
          
          Function[$CellContext`x$, 0.4621320343559642 $CellContext`x$ + 
           0.7999999999999999 (1 - $CellContext`x$/(4 
             Sqrt[2]))]}], $CellContext`e$1228502["uBarVector"] = {-0.6, 
        1.7313708498984761`, 0.4, 
        3.2970562748477144`}, $CellContext`e$1228502["un"] = {0, 0, 0, 
        0}, $CellContext`e$1228502["uVector"] = {-1.648528137423857, 
        0.7999999999999999, -2.0485281374238573`, 
        2.614213562373095}, $CellContext`e$1228502["V"] = 
       Function[$CellContext`x$, 0], $CellContext`e$1228502["X"] = Return[
         Function[$CellContext`x$, {
          Sqrt[2] $CellContext`x$ + 
           4 (1 - $CellContext`x$/(4 Sqrt[2])), -($CellContext`x$/Sqrt[
            2])}]], $CellContext`e$1228502["computed", "M"] = 
       Null, $CellContext`e$1228502["computed", "N"] = 
       Null, $CellContext`e$1228502["computed", "V"] = 
       Null, $CellContext`e$1228502[
        "EnteredFunction", "M"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4 Sqrt[2]]], $CellContext`e$1228502[
        "EnteredFunction", "N"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4 Sqrt[2]]], $CellContext`e$1228502[
        "EnteredFunction", "V"] = $CellContext`newDelegateFunction[
         $CellContext`newConstantFunction[4 Sqrt[2]]], $CellContext`e$1228502[
        "forces", 1] = {}, $CellContext`e$1228502[
        "forces", 2] = {}, $CellContext`e$1228502["hinge", 1] = {
        False, False, False}, $CellContext`e$1228502["hinge", 2] = {
        False, False, False}, $CellContext`e$1228502[
        "n", 1] = $CellContext`n$1228482, $CellContext`e$1228502[
        "n", 2] = $CellContext`n$1228485, $CellContext`e$1228502[
        "dofs", 1, 1] = 1, $CellContext`e$1228502["dofs", 1, 2] = 
       2, $CellContext`e$1228502["dofs", 1, 3] = 
       0, $CellContext`e$1228502["dofs", 2, 1] = 
       5, $CellContext`e$1228502["dofs", 2, 2] = 
       6, $CellContext`e$1228502["dofs", 2, 3] = 
       0, $CellContext`e$1228502["ui", "verified", "M"] = 
       False, $CellContext`e$1228502["ui", "verified", "N"] = 
       False, $CellContext`e$1228502["ui", "verified", "V"] = 
       False, $CellContext`e$1228502["indexOfNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Part[
         Position[
          $CellContext`e$1228502["nodes"], $CellContext`ne$], 1, 
         1], $CellContext`e$1228502["dofsByNode", 
         Pattern[$CellContext`ne$, 
          Blank[]]] := Table[
         $CellContext`e$1228502["dofs", 
          $CellContext`e$1228502[
          "indexOfNode", $CellContext`ne$], $CellContext`j$1228502], \
{$CellContext`j$1228502, 
          Length[
           $CellContext`e$1228502["fields"]]}], $CellContext`e$1228502[
        "gather u", 
         Pattern[$CellContext`u$, 
          Blank[]]] := ($CellContext`e$1228502[
         "uBarVector"] = $CellContext`dGatherVectorReturn[
          $CellContext`e$1228502["dofs"], $CellContext`u$, 
          $CellContext`e$1228502["un"]]), $CellContext`e$1228502["x", 
         Pattern[$CellContext`s$, 
          Blank[]]] := 
       Module[{$CellContext`X$, $CellContext`u$, $CellContext`ex$, \
$CellContext`ez$}, $CellContext`X$ = $CellContext`e$1228501[
           "X"]; $CellContext`u$ = $CellContext`e$1228501[
           "u"]; $CellContext`ex$ = $CellContext`e$1228501[
           "ex"]; $CellContext`ez$ = $CellContext`e$1228501["ez"]; Return[
           Function[$CellContext`x$, 
            
            Evaluate[$CellContext`X$[$CellContext`x$] + $CellContext`s$ (
               Part[$CellContext`u$, 1][$CellContext`x$] $CellContext`ex$ + 
               Part[$CellContext`u$, 2][$CellContext`x$] $CellContext`ez$)]]]; 
         Null], $CellContext`e$1228502["directionFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := Module[{$CellContext`on$}, $CellContext`assertThat[
           
           Or[$CellContext`n$ == $CellContext`e$1228501[
             "n", 1], $CellContext`n$ == $CellContext`e$1228501["n", 2]], 
           "Node node part of element in: directionFrom"]; $CellContext`on$ = 
          If[$CellContext`n$ === $CellContext`e$1228501["n", 1], 
            $CellContext`e$1228501["n", 2], 
            $CellContext`e$1228501["n", 1]]; Return[
           Normalize[$CellContext`on$["p"] - $CellContext`n$["p"]]]; 
         Null], $CellContext`e$1228502["minAngleFrom", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`d0$, $CellContext`d1$, $CellContext`a1$, \
$CellContext`a2$}, $CellContext`a1$ = 
          Pi/2; $CellContext`d0$ = $CellContext`e$1228501[
           "directionFrom", $CellContext`n$]; 
         Do[$CellContext`d1$ = $CellContext`ee[
             "directionFrom", $CellContext`n$]; $CellContext`a2$ = 
            VectorAngle[$CellContext`d0$, $CellContext`d1$]; 
           While[$CellContext`a2$ < 0, 
             AddTo[$CellContext`a2$, 2 Pi]]; If[
             
             And[$CellContext`a2$ > 
              0.00001, $CellContext`a2$ < $CellContext`a1$], $CellContext`a1$ = \
$CellContext`a2$]; Null, {$CellContext`ee, 
            $CellContext`n$["elements"]}]; Return[$CellContext`a1$]; 
         Null], $CellContext`e$1228502["endForce", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228501["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228501["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228501[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228501[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228501[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228501[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ {$CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}]; Null], $CellContext`e$1228502["endForceLocal", 
         Pattern[$CellContext`n$, 
          Blank[]]] := 
       Module[{$CellContext`idx$, $CellContext`x$, $CellContext`sgn$, \
$CellContext`ne$, $CellContext`ve$, $CellContext`Ne$, $CellContext`Ve$, \
$CellContext`me$}, $CellContext`idx$ = Part[
            Position[
             $CellContext`e$1228501["nodes"], $CellContext`n$], 1, 
            1]; $CellContext`x$ = If[$CellContext`idx$ == 1, 0, 
            $CellContext`e$1228501["l"]]; $CellContext`sgn$ = 
          If[$CellContext`idx$ == 1, -1, 
            1]; $CellContext`ne$ = $CellContext`e$1228501[
           "N"][$CellContext`x$]; $CellContext`ve$ = $CellContext`e$1228501[
           "V"][$CellContext`x$]; $CellContext`me$ = $CellContext`e$1228501[
           "M"][$CellContext`x$]; {$CellContext`Ne$, $CellContext`Ve$} = Dot[
            Transpose[
             $CellContext`e$1228501[
             "T0"]], {$CellContext`ne$, $CellContext`ve$}]; 
         Return[$CellContext`sgn$ Dot[
             $CellContext`n$[
             "T"], {$CellContext`Ne$, $CellContext`Ve$, $CellContext`me$}]]; 
         Null], $CellContext`e$1228502["getContinuationElement", 
         Pattern[$CellContext`i$, 
          Blank[]]] := 
       Module[{$CellContext`ae$ = 
          Null, $CellContext`node$, $CellContext`elements$, \
$CellContext`elt$}, $CellContext`node$ = $CellContext`e$1228501[
           "n", $CellContext`i$]; $CellContext`elements$ = $CellContext`node$[
           "elements"]; Do[If[
             And[
              
              Not[$CellContext`elt$ === $CellContext`e$1228501], \
$CellContext`elt$["ex"] == $CellContext`e$1228501[
               "ex"]], $CellContext`ae$ = $CellContext`elt$]; 
           Null, {$CellContext`elt$, $CellContext`elements$}]; 
         Return[$CellContext`ae$]; Null], 
       Attributes[$CellContext`j$1228502] = {Temporary}, 
       Attributes[$CellContext`e$1228501] = {
        Temporary}, $CellContext`e$1228501 = $CellContext`e$1228502, 
       Attributes[$CellContext`j$1228496] = {Temporary}, 
       Attributes[$CellContext`e$1228495] = {
        Temporary}, $CellContext`e$1228495 = $CellContext`e$1228496, 
       Attributes[$CellContext`j$1228499] = {Temporary}, 
       Attributes[$CellContext`e$1228498] = {
        Temporary}, $CellContext`e$1228498 = $CellContext`e$1228499, 
       Attributes[$CellContext`j$1228490] = {Temporary}, 
       Attributes[$CellContext`e$1228489] = {
        Temporary}, $CellContext`e$1228489 = $CellContext`e$1228490, 
       Attributes[$CellContext`lambdas$1232277] = {Temporary}, 
       Attributes[$CellContext`f$1228486] = {
        Temporary}, $CellContext`f$1228486[
        "checkConsistency"] := $CellContext`assertThat[
         Or[
          Not[
           $CellContext`f$1228486["n"]["isHinge"]], 
          Not[$CellContext`f$1228486["e"] === Null]], 
         "Force on node with hinge should be constructed with element"], \
$CellContext`f$1228486["dofs"] := If[$CellContext`f$1228486["e"] === Null, 
         $CellContext`n$1228484["dofs"], 
         $CellContext`f$1228486["e"][
         "dofsByNode", $CellContext`n$1228484]], $CellContext`f$1228486["e"] = 
       Null, $CellContext`f$1228486[
        "n"] = $CellContext`n$1228484, $CellContext`f$1228486["value"] = {0, 
        10, 0}, $CellContext`f$1228486["ui", "mode"] = "auto", 
       Attributes[$CellContext`f$1228487] = {
        Temporary}, $CellContext`f$1228487[
        "checkConsistency"] := $CellContext`assertThat[
         Or[
          Not[
           $CellContext`f$1228487["n"]["isHinge"]], 
          Not[$CellContext`f$1228487["e"] === Null]], 
         "Force on node with hinge should be constructed with element"], \
$CellContext`f$1228487["dofs"] := If[$CellContext`f$1228487["e"] === Null, 
         $CellContext`n$1228485["dofs"], 
         $CellContext`f$1228487["e"][
         "dofsByNode", $CellContext`n$1228485]], $CellContext`f$1228487["e"] = 
       Null, $CellContext`f$1228487[
        "n"] = $CellContext`n$1228485, $CellContext`f$1228487["value"] = {0, 
        10, 0}, $CellContext`f$1228487["ui", "mode"] = "auto", 
       Attributes[$CellContext`v$] = {Temporary}, 
       Attributes[$CellContext`coords$] = {Temporary}, 
       Attributes[$CellContext`nodes$] = {Temporary}, $CellContext`newNode[
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`z, 
          Blank[]]] := 
       Module[{$CellContext`n, $CellContext`nf = 
          Length[$CellContext`fFields]}, $CellContext`n[
           "p"] = {$CellContext`x, $CellContext`z}; $CellContext`n["c"] = {
           True, True, True}; $CellContext`n["cv"] = {0, 0, 
           0}; $CellContext`n["alpha"] = 
          0; $CellContext`n["elements"] = {}; $CellContext`n[
           "rigidLinks"] = {}; $CellContext`n["u"] = {0, 0, 
           0}; $CellContext`n[
          "reset dofs"]; $CellContext`n["forces"] = {}; $CellContext`n[
           "reactionForce"] = {0, 0, 0}; $CellContext`n[
           "computedReactionForce"] = {0, 0, 0}; $CellContext`n[
           "ui", "hinge offset"] = {0, 0}; $CellContext`n[
           "ui", "directions"] = {1, -1, 1}; $CellContext`n[
           "ui", "verified", "constraint"] = 
          False; $CellContext`n["checkConsistency"] := 
          Do[$CellContext`assertThat[
              Not[
               And[
                Part[
                 $CellContext`n["c"], $CellContext`i], Part[
                  $CellContext`n["cv"], $CellContext`i] != 0]], 
              "Inconstent prescribed displacement and constraint"]; 
            Null, {$CellContext`i, 
             Length[
              $CellContext`n["c"]]}]; $CellContext`n[
           "pc"] := $CellContext`n["p"] + Take[
             $CellContext`n["u"], 2]; $CellContext`n["distance to", 
            Pattern[$CellContext`on, 
             Blank[]]] := 
          Norm[$CellContext`n["p"] - $CellContext`on["p"]]; $CellContext`n[
           "distance to c", 
            Pattern[$CellContext`on, 
             Blank[]]] := 
          Norm[$CellContext`n["pc"] - $CellContext`on["pc"]]; $CellContext`n[
           "gather u", 
            Pattern[$CellContext`u, 
             Blank[]]] := ($CellContext`n[
            "u"] = $CellContext`dGatherVectorReturn[
             $CellContext`n["dofs"], $CellContext`u, 
             $CellContext`n["cv"]]); $CellContext`n[
           "T"] := $CellContext`tMat[
            $CellContext`n["alpha"], 
            Length[
             $CellContext`n["u"]]]; $CellContext`n["uBar"] := Dot[
            Transpose[
             $CellContext`n["T"]], 
            $CellContext`n["u"]]; $CellContext`n["dofs"] := Table[
            $CellContext`n[
            "dofs", $CellContext`i], {$CellContext`i, $CellContext`nf}]; \
$CellContext`n["isConstrained"] := Count[
             $CellContext`n["c"], False] > 0; $CellContext`n["reset dofs"] := 
          Do[$CellContext`n["fields", $CellContext`i] = 
             0; $CellContext`n["dofs", $CellContext`i] = 0; 
            Null, {$CellContext`i, $CellContext`nf}]; $CellContext`n[
           "summedElementEndForces"] := Sum[
            $CellContext`e["endForce", $CellContext`n], {$CellContext`e, 
             $CellContext`n["elements"]}]; $CellContext`n[
           "residual"] := $CellContext`n["summedElementEndForces"] - 
           Sum[$CellContext`f, {$CellContext`f, 
             $CellContext`n["forces"]}]; $CellContext`n[
           "updateReactionForce"] := 
          Module[{$CellContext`c, $CellContext`f}, $CellContext`f = \
$CellContext`n["residual"]; $CellContext`c = $CellContext`n["c"]; 
            For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`f], 
              
              Increment[$CellContext`i], If[
                Part[$CellContext`c, $CellContext`i], 
                Part[$CellContext`f, $CellContext`i] = 0]; 
              Null]; $CellContext`n["reactionForce"] = $CellContext`f; 
            Null]; $CellContext`n["getHingedElements"] := 
          Module[{$CellContext`e, $CellContext`l = {}, $CellContext`h}, 
            Do[$CellContext`e = Part[
                 $CellContext`n[
                 "elements"], $CellContext`i]; $CellContext`h = \
$CellContext`e["hinge", 
                 $CellContext`e["indexOfNode", $CellContext`n]]; 
              If[Count[$CellContext`h, True] > 0, 
                AppendTo[$CellContext`l, $CellContext`i]]; 
              Null, {$CellContext`i, 
               Length[
                $CellContext`n["elements"]]}]; Return[$CellContext`l]; 
            Null]; $CellContext`n["getHinges"] := Table[
            Part[
             $CellContext`n["elements"], $CellContext`i]["hinge", 
             Part[
              $CellContext`n["elements"], $CellContext`i][
             "indexOfNode", $CellContext`n]], {$CellContext`i, 
             $CellContext`n["getHingedElements"]}]; $CellContext`n["isHinge"] := 
          Length[
             $CellContext`n["getHingedElements"]] > 0; $CellContext`n[
           "getHingeType"] := 
          Module[{$CellContext`elements, $CellContext`hinges, \
$CellContext`nHinges, $CellContext`uh, $CellContext`sh}, \
$CellContext`elements = $CellContext`n[
              "getHingedElements"]; $CellContext`hinges = $CellContext`n[
              "getHinges"]; $CellContext`nHinges = 
             Length[$CellContext`elements]; $CellContext`uh = True; Do[
              If[
              Part[$CellContext`hinges, 1] != 
               Part[$CellContext`hinges, $CellContext`i], $CellContext`uh = 
                False; Null], {$CellContext`i, 
               2, $CellContext`nHinges}]; $CellContext`sh = Count[
                Part[$CellContext`hinges, 1], True] == 1; Return[
              If[
               And[$CellContext`uh, $CellContext`sh], 
               Part[
                Position[
                 Part[$CellContext`hinges, 1], True], 1, 1], 
               If[Count[
                  Part[$CellContext`hinges, 1], True] == 3, 4, 5]]]; Null]; 
         Return[$CellContext`n]; Null], $CellContext`fFields = {1, 2, 
        3}, $CellContext`tMat[
         Pattern[$CellContext`a, 
          Blank[]], 
         Pattern[$CellContext`sz, 
          Blank[]]] := 
       Module[{$CellContext`s = Sin[$CellContext`a], $CellContext`c = 
          Cos[$CellContext`a]}, 
         Switch[$CellContext`sz, 
          2, {{$CellContext`c, -$CellContext`s}, {$CellContext`s, \
$CellContext`c}}, 
          3, {{$CellContext`c, -$CellContext`s, 
            0}, {$CellContext`s, $CellContext`c, 0}, {0, 0, 1}}, 
          Blank[], Null]], $CellContext`tMat[
         Pattern[$CellContext`a, 
          Blank[]], 
         Pattern[$CellContext`a1, 
          Blank[]], 
         Pattern[$CellContext`a2, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Module[{$CellContext`s1 = 
          Sin[$CellContext`a - $CellContext`a1], $CellContext`c1 = 
          Cos[$CellContext`a - $CellContext`a1], $CellContext`s2 = 
          Sin[$CellContext`a - $CellContext`a2], $CellContext`c2 = 
          Cos[$CellContext`a - $CellContext`a2]}, 
         Switch[$CellContext`s, {2, 
          4}, {{$CellContext`c1, -$CellContext`s1, 0, 0}, {
           0, 0, $CellContext`c2, -$CellContext`s2}}, {4, 
          4}, {{$CellContext`c1, -$CellContext`s1, 0, 
            0}, {$CellContext`s1, $CellContext`c1, 0, 0}, {
           0, 0, $CellContext`c2, -$CellContext`s2}, {
           0, 0, $CellContext`s2, $CellContext`c2}}, {6, 
          6}, {{$CellContext`c1, -$CellContext`s1, 0, 0, 0, 
            0}, {$CellContext`s1, $CellContext`c1, 0, 0, 0, 0}, {0, 0, 1, 0, 
           0, 0}, {0, 0, 0, $CellContext`c2, -$CellContext`s2, 0}, {
           0, 0, 0, $CellContext`s2, $CellContext`c2, 0}, {0, 0, 0, 0, 0, 1}}, 
          Blank[], Null]], Attributes[$CellContext`e$] = {Temporary}, 
       Attributes[$CellContext`rl$] = {Temporary}, 
       Attributes[$CellContext`f$] = {Temporary}, 
       Attributes[$CellContext`l$] = {Temporary}, 
       Attributes[$CellContext`sc$] = {Temporary}, 
       Attributes[$CellContext`ubar$] = {Temporary}, 
       Attributes[$CellContext`aInvokeOnList] = {
        HoldAll}, $CellContext`aInvokeOnList[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`i}, 
         For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`l], 
           Increment[$CellContext`i], 
           Part[$CellContext`l, $CellContext`i][$CellContext`c]; Null]; 
         Null], $CellContext`aInvokeOnList[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`c, 
          Blank[]], 
         Pattern[$CellContext`arg, 
          Blank[]]] := 
       Module[{$CellContext`i}, 
         For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`l], 
           Increment[$CellContext`i], 
           Part[$CellContext`l, $CellContext`i][$CellContext`c, \
$CellContext`arg]; Null]; Null], 
       Attributes[$CellContext`lambda$] = {Temporary}, 
       Attributes[$CellContext`ns$] = {Temporary}, 
       Attributes[$CellContext`print$] = {Temporary}, 
       Attributes[$CellContext`KBar$] = {Temporary}, 
       Attributes[$CellContext`uBar$] = {Temporary}, 
       Attributes[$CellContext`uBarLast$] = {Temporary}, 
       Attributes[$CellContext`pBarL$] = {Temporary}, 
       Attributes[$CellContext`converged$] = {Temporary}, 
       Attributes[$CellContext`cnt$] = {Temporary}, 
       Attributes[$CellContext`res$] = {Temporary}, 
       Attributes[$CellContext`tol$] = {Temporary}, 
       Attributes[$CellContext`ub$] = {Temporary}, 
       Attributes[$CellContext`uBars$] = {Temporary}, 
       Attributes[$CellContext`pBar$] = {Temporary}, 
       Attributes[$CellContext`pBarStep$] = {Temporary}, 
       Attributes[$CellContext`SBarnl$] = {Temporary}, 
       Attributes[$CellContext`pts$] = {Temporary}, $CellContext`newModel[] := 
       Module[{$CellContext`m}, $CellContext`nodeId = 
          1; $CellContext`m["nodes"] = {}; $CellContext`m[
           "elements"] = {}; $CellContext`m[
           "rigidLinks"] = {}; $CellContext`m[
           "line elements"] = {}; $CellContext`m[
           "point elements"] = {}; $CellContext`m[
           "forces"] = {}; $CellContext`m["loads"] = {}; $CellContext`m[
           "sideConstraints"] = {}; $CellContext`m[
           "ui", "dimensions"] = {}; $CellContext`m[
           "ui", "text"] = {}; $CellContext`m["ui", "bounds"] = 
          Automatic; $CellContext`m["ui", "scale u"] = 
          1; $CellContext`m["ui", "scale f"] = {1, 1, 1}; $CellContext`m[
           "ui", "csys"] = Null; $CellContext`m["thIICompressionOnly", 
            Pattern[$CellContext`v, 
             Blank[]]] := 
          Do[$CellContext`e["thIICompressionOnly"] = $CellContext`v; 
            Null, {$CellContext`e, 
             $CellContext`m["elements"]}]; $CellContext`m["addNode", 
            Pattern[$CellContext`n, 
             Blank[]]] := (AppendTo[
             $CellContext`m["nodes"], $CellContext`n]; Return[$CellContext`n]; 
           Null); $CellContext`m["addNodes", 
            Pattern[$CellContext`coords, 
             Blank[]]] := 
          Module[{$CellContext`nodes}, $CellContext`nodes = Table[
               
               Apply[$CellContext`newNode, $CellContext`c], {$CellContext`c, \
$CellContext`coords}]; Do[
              $CellContext`m[
              "addNode", $CellContext`n], {$CellContext`n, \
$CellContext`nodes}]; Return[$CellContext`nodes]; Null]; $CellContext`m[
           "addElement", 
            Pattern[$CellContext`e, 
             Blank[]]] := (AppendTo[
             $CellContext`m["elements"], $CellContext`e]; If[
             StringMatchQ[
              $CellContext`e["type"], 
              StringExpression["line element", 
               BlankNullSequence[]]], 
             AppendTo[
              $CellContext`m["line elements"], $CellContext`e]]; If[
             StringMatchQ[
              $CellContext`e["type"], 
              StringExpression["point element", 
               BlankNullSequence[]]], 
             AppendTo[
              $CellContext`m["point elements"], $CellContext`e]]; 
           Return[$CellContext`e]; Null); $CellContext`m["addRigidLink", 
            Pattern[$CellContext`rl, 
             Blank[]]] := (AppendTo[
             $CellContext`m["rigidLinks"], $CellContext`rl]; 
           Return[$CellContext`rl]; Null); $CellContext`m["addForce", 
            Pattern[$CellContext`f, 
             Blank[]]] := (AppendTo[
             $CellContext`m["forces"], $CellContext`f]; 
           Return[$CellContext`f]; Null); $CellContext`m["addLoad", 
            Pattern[$CellContext`l, 
             Blank[]]] := (AppendTo[
             $CellContext`m["loads"], $CellContext`l]; Return[$CellContext`l]; 
           Null); $CellContext`m["addSideConstraint", 
            Pattern[$CellContext`sc, 
             Blank[]]] := (AppendTo[
             $CellContext`m["sideConstraints"], $CellContext`sc]; 
           Return[$CellContext`sc]; Null); $CellContext`m["truss only"] := 
          Module[{$CellContext`e, $CellContext`b}, $CellContext`b = True; 
            Do[If[
                
                And[$CellContext`e["type"] != 
                 "line element.truss", $CellContext`e["type"] != 
                 "point element.spring"], $CellContext`b = False; Break[]; 
                Null]; Null, {$CellContext`e, 
               $CellContext`m["elements"]}]; Return[$CellContext`b]; 
            Null]; $CellContext`m["characteristicSize"] := 
          Module[{$CellContext`xc, $CellContext`zc, $CellContext`p1, \
$CellContext`p2, $CellContext`w, $CellContext`h}, {$CellContext`xc, \
$CellContext`zc} = Table[
               Part[
                $CellContext`n["p"], $CellContext`i], {$CellContext`i, 
                2}, {$CellContext`n, 
                $CellContext`m["nodes"]}]; $CellContext`p1 = {
               Min[$CellContext`xc], 
               Min[$CellContext`zc]}; $CellContext`p2 = {
               Max[$CellContext`xc], 
               Max[$CellContext`zc]}; $CellContext`w = 
             Max[Part[$CellContext`p2, 1] - Part[$CellContext`p1, 1], 
               1]; $CellContext`h = 
             Max[Part[$CellContext`p2, 2] - Part[$CellContext`p1, 2], 1]; 
            Return[
              Sqrt[$CellContext`w $CellContext`h]]; Null]; $CellContext`m[
           "checkConsistency"] := Module[{}, Scan[#["checkConsistency"]& , 
              $CellContext`m["nodes"]]; Scan[#["checkConsistency"]& , 
              $CellContext`m["forces"]]; Scan[#["checkConsistency"]& , 
              $CellContext`m["elements"]]; Null]; $CellContext`m[
           "enumerateDofs"] := 
          Module[{$CellContext`i, $CellContext`nodes, $CellContext`cnt = 
             1}, $CellContext`nodes = $CellContext`m["nodes"]; 
            Scan[#["reset dofs"]& , 
              $CellContext`m["nodes"]]; Scan[#["reset dofs"]& , 
              $CellContext`m["elements"]]; 
            Scan[$CellContext`enumerateNodeDofs[$CellContext`cnt, #]& , 
              $CellContext`m["nodes"]]; Table[Part[
                 $CellContext`m["sideConstraints"], $CellContext`i][
                "sc position"] = $CellContext`cnt + $CellContext`i - 1; 
              Null, {$CellContext`i, 
               Length[
                $CellContext`m["sideConstraints"]]}]; $CellContext`m[
              "ndofs"] = $CellContext`cnt - 1 + Length[
                $CellContext`m["sideConstraints"]]; Null]; $CellContext`m[
           "pBar"] := Module[{$CellContext`pBar}, $CellContext`pBar = 
             Table[0, {
                $CellContext`m["ndofs"]}]; Scan[$CellContext`dScatterVector[
               #["dofs"], 
               #["value"], $CellContext`pBar]& , 
              $CellContext`m["forces"]]; Scan[$CellContext`dScatterVector[
               #["e"]["dofs"], 
               #["e"]["pBar"], $CellContext`pBar]& , 
              $CellContext`m["loads"]]; Scan[$CellContext`dScatterVector[
               #["dofs"], 
               #["pBarBCs"], $CellContext`pBar]& , 
              $CellContext`m["elements"]]; 
            Scan[$CellContext`scatterSideConstraintVector[#, \
$CellContext`pBar]& , 
              $CellContext`m["sideConstraints"]]; Return[$CellContext`pBar]; 
            Null]; $CellContext`m["KBar"] := 
          Module[{$CellContext`KBar}, $CellContext`KBar = Table[0, {
                $CellContext`m["ndofs"]}, {
                $CellContext`m["ndofs"]}]; Scan[$CellContext`dScatterMatrix[
               #["dofs"], 
               #["KBar"], $CellContext`KBar]& , 
              $CellContext`m["elements"]]; 
            Scan[$CellContext`scatterSideConstraintsMatrix[#, $CellContext`m, \
$CellContext`KBar]& , 
              $CellContext`m["sideConstraints"]]; Return[$CellContext`KBar]; 
            Null]; $CellContext`m["KBarII"] := 
          Module[{$CellContext`KBarII}, $CellContext`KBarII = Table[0, {
                $CellContext`m["ndofs"]}, {
                $CellContext`m["ndofs"]}]; Scan[$CellContext`dScatterMatrix[
               #["dofs"], 
               #["KBarII"], $CellContext`KBarII]& , 
              $CellContext`m["elements"]]; Return[$CellContext`KBarII]; 
            Null]; $CellContext`m["KBar nl"] := 
          Module[{$CellContext`KBarnl}, $CellContext`KBarnl = Table[0, {
                $CellContext`m["ndofs"]}, {
                $CellContext`m["ndofs"]}]; Scan[$CellContext`dScatterMatrix[
               #["dofs"], 
               #["KBar nl"], $CellContext`KBarnl]& , 
              $CellContext`m["elements"]]; 
            Scan[$CellContext`scatterSideConstraintsMatrix[#, $CellContext`m, \
$CellContext`KBarnl]& , 
              $CellContext`m["sideConstraints"]]; Return[$CellContext`KBarnl]; 
            Null]; $CellContext`m["SBar nl"] := 
          Module[{$CellContext`SBarnl}, $CellContext`SBarnl = Table[0, {
                $CellContext`m["ndofs"]}]; Scan[$CellContext`dScatterVector[
               #["dofs"], 
               #["SBar nl"], $CellContext`SBarnl]& , 
              $CellContext`m["elements"]]; Return[$CellContext`SBarnl]; 
            Null]; $CellContext`m["setUBar", 
            Pattern[$CellContext`ubar, 
             Blank[]]] := ($CellContext`aInvokeOnList[
             $CellContext`m["nodes"], 
             "gather u", $CellContext`ubar]; $CellContext`aInvokeOnList[
             $CellContext`m["elements"], "gather u", $CellContext`ubar]; 
           Null); $CellContext`m[
           "solve"] := ($CellContext`m["checkConsistency"]; $CellContext`m[
            "enumerateDofs"]; $CellContext`m["u"] = N[
              LinearSolve[
               $CellContext`m["KBar"], 
               $CellContext`m["pBar"]]]; $CellContext`m["setUBar", 
             $CellContext`m["u"]]; $CellContext`aInvokeOnList[
             $CellContext`m["nodes"], "updateReactionForce"]; 
           Null); $CellContext`m["solve buckling"] := 
          Module[{$CellContext`lambdas, $CellContext`uBars}, $CellContext`m[
             "checkConsistency"]; $CellContext`m[
             "enumerateDofs"]; $CellContext`m["setUBar", 
              LinearSolve[
               $CellContext`m["KBar"], 
               $CellContext`m[
               "pBar"]]]; {$CellContext`lambdas, $CellContext`uBars} = 
             Eigensystem[{
                $CellContext`m[
                "KBar"], -$CellContext`m["KBarII"]}]; $CellContext`m[
             "setUBar", 
              Last[$CellContext`uBars]]; $CellContext`m["lambda crit"] = 
             Last[$CellContext`lambdas]; $CellContext`m["u"] = 
             Last[$CellContext`uBars]; Print[
              $CellContext`m["u"]]; Null]; $CellContext`m["solve II", 
            Pattern[$CellContext`lambda, 
             Blank[]]] := $CellContext`m[
           "solve II", $CellContext`lambda, 100, False]; $CellContext`m[
           "solve II", 
            Pattern[$CellContext`lambda, 
             Blank[]], 
            Pattern[$CellContext`ns, 
             Blank[]], 
            Pattern[$CellContext`print, 
             Blank[]]] := 
          Module[{$CellContext`KBar, $CellContext`uBar, \
$CellContext`uBarLast, $CellContext`pBarL, $CellContext`converged, \
$CellContext`cnt, $CellContext`res, $CellContext`tol}, $CellContext`cnt = 
             0; $CellContext`converged = False; $CellContext`m[
             "checkConsistency"]; $CellContext`m[
             "enumerateDofs"]; $CellContext`pBarL = $CellContext`lambda \
$CellContext`m["pBar"]; $CellContext`tol = 
             Norm[$CellContext`pBarL]/10^9; $CellContext`uBar = Table[0, {
                $CellContext`m["ndofs"]}]; $CellContext`m[
             "setUBar", $CellContext`uBar]; $CellContext`KBar = \
$CellContext`m["KBar"]; While[
              And[
               
               Not[$CellContext`converged], $CellContext`cnt <= \
$CellContext`ns], $CellContext`uBarLast = $CellContext`uBar; \
$CellContext`uBar = 
               LinearSolve[$CellContext`KBar + $CellContext`m[
                  "KBarII"], $CellContext`pBarL]; 
              Print[$CellContext`uBar]; $CellContext`m[
                "u"] = $CellContext`uBar; $CellContext`m[
               "setUBar", $CellContext`uBar]; $CellContext`res = 
               Norm[$CellContext`uBar - $CellContext`uBarLast]/
                Norm[$CellContext`uBar]; 
              PrintTemporary[$CellContext`res]; $CellContext`converged = \
$CellContext`res < $CellContext`tol; Increment[$CellContext`cnt]; Null]; If[
              Not[$CellContext`converged], 
              Print["Theory II. order did not converge for lambda = ", \
$CellContext`lambda, " res = ", $CellContext`res, 
                " tol = ", $CellContext`tol]; Return[{}]; Null, 
              Return[$CellContext`uBar]; Null]; Null]; $CellContext`m[
           "solve II sweep", 
            Pattern[$CellContext`ns, 
             Blank[]]] := 
          Module[{$CellContext`i, $CellContext`ub, $CellContext`uBars}, \
$CellContext`m["enumerateDofs"]; $CellContext`uBars = {
               Table[0, {
                 $CellContext`m["ndofs"]}]}; Do[PrintTemporary[
                StringJoin["II Load step: ", 
                 ToString[$CellContext`i]]]; $CellContext`ub = $CellContext`m[
                "solve II", $CellContext`i/$CellContext`ns]; 
              If[Length[$CellContext`ub] == 0, 
                Return[$CellContext`uBars], {}]; 
              AppendTo[$CellContext`uBars, $CellContext`ub]; 
              Null, {$CellContext`i, $CellContext`ns}]; 
            Return[$CellContext`uBars]; Null]; $CellContext`m["solve nl", 
            Pattern[$CellContext`ns, 
             Blank[]]] := $CellContext`m[
           "solve nl", $CellContext`ns, 1]; $CellContext`m["solve nl", 
            Pattern[$CellContext`ns, 
             Blank[]], 
            Pattern[$CellContext`lambda, 
             Blank[]]] := 
          Module[{$CellContext`i, $CellContext`pBar, $CellContext`pBarStep, \
$CellContext`SBarnl, $CellContext`cnt, $CellContext`pts, $CellContext`uBar, \
$CellContext`uBars, $CellContext`converged, $CellContext`res}, $CellContext`m[
             "enumerateDofs"]; $CellContext`pBar = $CellContext`m[
              "pBar"]; $CellContext`uBar = Table[0, {
                $CellContext`m["ndofs"]}]; $CellContext`uBars = {
               Table[0, {
                 $CellContext`m["ndofs"]}]}; 
            Monitor[For[$CellContext`i = 1, $CellContext`i <= $CellContext`ns, 
                
                Increment[$CellContext`i], $CellContext`cnt = 
                 0; $CellContext`converged = 
                 False; $CellContext`pBarStep = ($CellContext`lambda \
$CellContext`i $CellContext`pBar)/$CellContext`ns; $CellContext`m[
                 "setUBar", $CellContext`uBar]; $CellContext`SBarnl = \
$CellContext`m["SBar nl"]; $CellContext`pts = {1}; While[
                  And[
                   Not[$CellContext`converged], $CellContext`cnt <= 
                   20], $CellContext`uBar = $CellContext`uBar + LinearSolve[
                    $CellContext`m[
                    "KBar nl"], $CellContext`pBarStep - $CellContext`SBarnl]; \
$CellContext`m[
                   "setUBar", $CellContext`uBar]; $CellContext`SBarnl = \
$CellContext`m["SBar nl"]; $CellContext`res = 
                   Norm[$CellContext`pBarStep - $CellContext`SBarnl]/
                    Norm[$CellContext`SBarnl]; 
                  AppendTo[$CellContext`pts, $CellContext`res]; \
$CellContext`converged = $CellContext`res < 10^(-10); 
                  Increment[$CellContext`cnt]; Null]; 
                AppendTo[$CellContext`uBars, $CellContext`uBar]; If[
                  Not[$CellContext`converged], Print[
                    StringJoin["Solution did not converge in step ", 
                    ToString[$CellContext`i]]]; Return[$CellContext`uBars]; 
                  Null, Null; Null]; Null]; Null, 
              ListLinePlot[$CellContext`pts]]; Return[$CellContext`uBars]; 
            Null]; Return[$CellContext`m]; Null], $CellContext`nodeId = 1, 
       Attributes[$CellContext`enumerateNodeDofs] = {
        HoldAll}, $CellContext`enumerateNodeDofs[
         Pattern[$CellContext`cnt, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`nodeIdx, $CellContext`c, $CellContext`nf = 
          Length[$CellContext`fFields], $CellContext`on, $CellContext`rl, \
$CellContext`idx}, Do[$CellContext`c = 1; Do[If[
               MemberQ[
                $CellContext`e[
                "fields"], $CellContext`j], $CellContext`nodeIdx = Part[
                  Position[
                   $CellContext`e["nodes"], $CellContext`n], 1, 1]; If[
                 Not[
                  Part[
                   $CellContext`e[
                   "hinge", $CellContext`nodeIdx], $CellContext`j]], If[
                   
                   And[$CellContext`n["dofs", $CellContext`j] == 
                    0, $CellContext`e["type"] != 
                    "point element.spring"], $CellContext`n[
                    "dofs", $CellContext`j] = If[
                    Part[
                    $CellContext`n["c"], $CellContext`j], 
                    Increment[$CellContext`cnt], 0]; Null, Null; 
                   Null]; $CellContext`e["dofs", $CellContext`nodeIdx, 
                    Increment[$CellContext`c]] = $CellContext`n[
                   "dofs", $CellContext`j]; 
                 Null, $CellContext`e["dofs", $CellContext`nodeIdx, 
                    Increment[$CellContext`c]] = Increment[$CellContext`cnt]; 
                 Null]; Null, Null; Null]; 
             Null, {$CellContext`j, $CellContext`nf}]; 
           Null, {$CellContext`e, 
            $CellContext`n["elements"]}]; 
         Do[$CellContext`on = $CellContext`rl[
             "otherNode", $CellContext`n]; $CellContext`idx = $CellContext`rl[
             "index"]; If[Part[
               $CellContext`on["dofs"], $CellContext`idx] == 
             0, $CellContext`on["dofs", $CellContext`idx] = $CellContext`n[
               "dofs", $CellContext`idx]; Null], {$CellContext`rl, 
            $CellContext`n["rigidLinks"]}]; Null], 
       Attributes[$CellContext`dScatterVector] = {
        HoldAll}, $CellContext`dScatterVector[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`i}, 
         For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`t], 
           Increment[$CellContext`i], 
           If[Part[$CellContext`t, $CellContext`i] > 0, AddTo[
               Part[$CellContext`g, 
                Part[$CellContext`t, $CellContext`i]], 
               Part[$CellContext`l, $CellContext`i]]; Null, Null; Null]; 
           Null]; Null], 
       Attributes[$CellContext`scatterSideConstraintVector] = {
        HoldAll}, $CellContext`scatterSideConstraintVector[
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`pBar, 
          Blank[]]] := (Part[$CellContext`pBar, 
          $CellContext`sc["sc position"]] = $CellContext`sc["rhs"]), 
       Attributes[$CellContext`dScatterMatrix] = {
        HoldAll}, $CellContext`dScatterMatrix[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`i, $CellContext`j}, 
         For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`t], 
           Increment[$CellContext`i], 
           For[$CellContext`j = 1, $CellContext`j <= Length[$CellContext`t], 
             Increment[$CellContext`j], If[
               And[
               Part[$CellContext`t, $CellContext`i] > 0, 
                Part[$CellContext`t, $CellContext`j] > 0], AddTo[
                 Part[$CellContext`g, 
                  Part[$CellContext`t, $CellContext`i], 
                  Part[$CellContext`t, $CellContext`j]], 
                 Part[$CellContext`l, $CellContext`i, $CellContext`j]]; Null, 
               Null; Null]; Null]; Null]; Null], 
       Attributes[$CellContext`scatterSideConstraintsMatrix] = {
        HoldAll}, $CellContext`scatterSideConstraintsMatrix[
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`KBar, 
          Blank[]]] := 
       Module[{$CellContext`scIdxs, $CellContext`j, $CellContext`p, \
$CellContext`scNode, $CellContext`scNodeDof, $CellContext`idx}, \
$CellContext`scIdxs = $CellContext`sc["idxs"]; 
         For[$CellContext`j = 1, $CellContext`j <= 
           Length[$CellContext`scIdxs], 
           
           Increment[$CellContext`j], $CellContext`p = $CellContext`sc[
             "sc position"]; {$CellContext`scNode, $CellContext`scNodeDof} = 
            Part[$CellContext`scIdxs, $CellContext`j]; $CellContext`idx = Part[
              Part[
               $CellContext`m["nodes"], $CellContext`scNode][
              "dofs"], $CellContext`scNodeDof]; 
           Part[$CellContext`KBar, $CellContext`p, $CellContext`idx] = (
             Part[$CellContext`KBar, $CellContext`idx, $CellContext`p] = \
$CellContext`sc[$CellContext`j]); Null]; Null], $CellContext`newForce[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`e, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`vv}, $CellContext`vv = 
          If[Length[$CellContext`v] == 2, {
             Part[$CellContext`v, 1], 
             Part[$CellContext`v, 2], 0}, $CellContext`v]; $CellContext`f[
           "n"] = $CellContext`n; $CellContext`f[
           "e"] = $CellContext`e; $CellContext`f["ui", "mode"] = "auto"; 
         AppendTo[
           $CellContext`n["forces"], $CellContext`vv]; If[
           Not[$CellContext`e === Null], AppendTo[
             $CellContext`e["forces", 
              $CellContext`e[
              "indexOfNode", $CellContext`n]], $CellContext`vv]; 
           Null]; $CellContext`f["value"] = $CellContext`vv; $CellContext`f[
           "dofs"] := If[$CellContext`f["e"] === Null, 
            $CellContext`n["dofs"], 
            $CellContext`f["e"][
            "dofsByNode", $CellContext`n]]; $CellContext`f[
           "checkConsistency"] := $CellContext`assertThat[
            Or[
             Not[
              $CellContext`f["n"]["isHinge"]], 
             Not[$CellContext`f["e"] === Null]], 
            "Force on node with hinge should be constructed with element"]; 
         Return[$CellContext`f]; Null], $CellContext`newForce[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]]] := $CellContext`newForce[$CellContext`n, 
         Null, $CellContext`v], $CellContext`newTrussElement[
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`n2, 
          Blank[]], 
         Pattern[$CellContext`EA, 
          Blank[]]] := 
       Module[{$CellContext`e}, $CellContext`e = \
$CellContext`newLineElement[$CellContext`n1, $CellContext`n2]; $CellContext`e[
           "type"] = StringJoin[
            $CellContext`e["type"], ".truss"]; $CellContext`e[
           "EA"] = $CellContext`EA; $CellContext`e["EI"] = 
          0; $CellContext`e["fields"] = {1, 2}; $CellContext`e["n nl"] := 
          Module[{$CellContext`l = $CellContext`e[
              "l"], $CellContext`lc = $CellContext`e[
              "l c"], $CellContext`n}, $CellContext`n = ($CellContext`e[
                "EA"] ($CellContext`lc - $CellContext`l))/$CellContext`l; 
            Return[{-$CellContext`n, $CellContext`n}]; Null]; $CellContext`e[
           "T"] := $CellContext`tMat[
            $CellContext`e["alpha"], 
            $CellContext`e["n", 1]["alpha"], 
            $CellContext`e["n", 2]["alpha"], {2, 4}]; $CellContext`e[
           "T nl"] := $CellContext`tMat[
            $CellContext`e["alpha nl"], 
            $CellContext`e["n", 1]["alpha"], 
            $CellContext`e["n", 2]["alpha"], {2, 4}]; $CellContext`e[
           "T1"] := $CellContext`tMat[
            $CellContext`e["alpha"], 
            $CellContext`e["n", 1]["alpha"], 
            $CellContext`e["n", 2]["alpha"], {4, 4}]; $CellContext`e[
           "K"] := ($CellContext`e["EA"]/$CellContext`e["l"]) {{1, -1}, {-1, 
            1}}; $CellContext`e["KBar nl"] := 
          Module[{$CellContext`x1, $CellContext`z1, $CellContext`u1, \
$CellContext`w1, $CellContext`x2, $CellContext`z2, $CellContext`u2, \
$CellContext`w2, $CellContext`eps, $CellContext`eps0 = $CellContext`e[
              "eps0"], $CellContext`dEps, $CellContext`T, $CellContext`dT, \
$CellContext`l, $CellContext`l0, $CellContext`ea = $CellContext`e[
              "EA"], $CellContext`km, $CellContext`ks}, $CellContext`l0 = \
$CellContext`e["l"]; $CellContext`l = $CellContext`e[
              "l c"]; $CellContext`T = $CellContext`e[
              "T nl"]; {$CellContext`x1, $CellContext`z1} = $CellContext`e[
              "n", 1]["p"]; {$CellContext`u1, $CellContext`w1} = Take[
               $CellContext`e["n", 1]["u"], 
               2]; {$CellContext`x2, $CellContext`z2} = $CellContext`e[
              "n", 2]["p"]; {$CellContext`u2, $CellContext`w2} = Take[
               $CellContext`e["n", 2]["u"], 
               2]; $CellContext`eps = ($CellContext`l - \
$CellContext`l0)/$CellContext`l0 - $CellContext`eps0; $CellContext`dEps = \
{$CellContext`u1 - $CellContext`u2 + $CellContext`x1 - $CellContext`x2, \
$CellContext`w1 - $CellContext`w2 + $CellContext`z1 - $CellContext`z2, \
-$CellContext`u1 + $CellContext`u2 - $CellContext`x1 + $CellContext`x2, \
-$CellContext`w1 + $CellContext`w2 - $CellContext`z1 + $CellContext`z2}; \
$CellContext`dT = {{($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2)^2, -(($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2)), -($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2)^2, ($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2)}, {(-$CellContext`u1 + $CellContext`u2 - $CellContext`x1 + \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2), ($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2)^2, ($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2), -($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2)^2}, {-($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2)^2, ($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2), ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2)^2, -(($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2))}, {($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2), -($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2)^2, (-$CellContext`u1 + $CellContext`u2 - $CellContext`x1 + \
$CellContext`x2) ($CellContext`w1 - $CellContext`w2 + $CellContext`z1 - \
$CellContext`z2), ($CellContext`u1 - $CellContext`u2 + $CellContext`x1 - \
$CellContext`x2)^2}}; $CellContext`km = ($CellContext`ea Dot[
                 
                 Transpose[$CellContext`T], {-$CellContext`dEps, \
$CellContext`dEps}])/($CellContext`l0 $CellContext`l); $CellContext`ks = \
($CellContext`ea $CellContext`dT $CellContext`eps)/$CellContext`l^3; 
            Return[$CellContext`km + $CellContext`ks]; Null]; $CellContext`e[
           "P"] := Module[{$CellContext`u1, $CellContext`u2, $CellContext`l, \
$CellContext`eps, $CellContext`n}, $CellContext`l = $CellContext`e[
              "l"]; $CellContext`u1 = Part[
               $CellContext`e["uVector"], 1]; $CellContext`u2 = Part[
               $CellContext`e["uVector"], 
               3]; $CellContext`eps = ($CellContext`u2 - \
$CellContext`u1)/$CellContext`l; $CellContext`n = $CellContext`e[
               "EA"] ($CellContext`eps - $CellContext`e["eps0"]); Return[
              If[
               Or[$CellContext`n < 0, 
                Not[
                 $CellContext`e["thIICompressionOnly"]]], $CellContext`n, 0]]; 
            Null]; $CellContext`e[
           "KII"] := ($CellContext`e["P"] {{0, 0, 0, 0}, {0, 1, 0, -1}, {0, 0,
              0, 0}, {0, -1, 0, 1}})/$CellContext`e["l"]; $CellContext`e[
           "KBarII"] := Dot[
            Transpose[
             $CellContext`e["T1"]], 
            $CellContext`e["KII"], 
            $CellContext`e["T1"]]; $CellContext`e["u"] := 
          Module[{$CellContext`ubv, $CellContext`sf, $CellContext`up, \
$CellContext`p1, $CellContext`p2}, $CellContext`sf = \
$CellContext`fLinearShapeFunctions[
               $CellContext`e["l"]]; $CellContext`up = $CellContext`fup0[
               $CellContext`e["l"], 
               $CellContext`e["EA"]]; $CellContext`ubv = $CellContext`e[
              "uVector"]; 
            If[$CellContext`e["load"] === 
              0, $CellContext`p1 = 0; $CellContext`p2 = 0; 
              Null, $CellContext`p1 = $CellContext`e["load"][
                "p", 1]; $CellContext`p2 = $CellContext`e["load"]["p", 2]; 
              Null]; Return[{
               $CellContext`fLinearCombination[{
                 Part[$CellContext`ubv, 1], 
                 Part[$CellContext`ubv, 3], $CellContext`p1, $CellContext`p2}, 
                Flatten[{$CellContext`sf, $CellContext`up}]], 
               $CellContext`fLinearCombination[{
                 Part[$CellContext`ubv, 2], 
                 Part[$CellContext`ubv, 4]}, $CellContext`sf]}]; 
            Null]; $CellContext`e["p"] := 
          Module[{$CellContext`p1, $CellContext`p2, $CellContext`l, \
$CellContext`p0}, $CellContext`p1 = $CellContext`e["load"][
              "p", 1]; $CellContext`p2 = $CellContext`e["load"][
              "p", 2]; $CellContext`l = $CellContext`e[
              "l"]; $CellContext`p0 = $CellContext`e["EA"] $CellContext`e[
               "eps0"]; 
            Return[{-$CellContext`p0 + ($CellContext`p1/3 + $CellContext`p2/
                  6) $CellContext`l, $CellContext`p0 + ($CellContext`p1/
                  6 + $CellContext`p2/3) $CellContext`l}]; Null]; 
         Return[$CellContext`e]; Null], $CellContext`newLineElement[
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`n2, 
          Blank[]]] := 
       Module[{$CellContext`e}, $CellContext`e = \
$CellContext`newElement[{$CellContext`n1, $CellContext`n2}]; $CellContext`e[
           "type"] = "line element"; $CellContext`e["eps0"] = 
          0; $CellContext`e["kappa0"] = 
          0; $CellContext`e["l"] := $CellContext`n1[
           "distance to", $CellContext`n2]; $CellContext`e[
           "l c"] := $CellContext`n1[
           "distance to c", $CellContext`n2]; $CellContext`e[
           "center"] := $CellContext`e[
           "X"][$CellContext`e["l"]/2]; $CellContext`e["alpha"] := ArcTan[Part[
              $CellContext`n2["p"], 1] - Part[
             $CellContext`n1["p"], 1], -Part[
               $CellContext`n2["p"], 2] + Part[
              $CellContext`n1["p"], 2]]; $CellContext`e["alpha nl"] := 
          ArcTan[Part[
              $CellContext`n2["pc"], 1] - Part[
             $CellContext`n1["pc"], 1], -Part[
               $CellContext`n2["pc"], 2] + Part[
              $CellContext`n1["pc"], 2]]; $CellContext`e[
           "T0"] := $CellContext`tMat[
            $CellContext`e["alpha"], 2]; $CellContext`e["KBar"] := Dot[
            Transpose[
             $CellContext`e["T"]], 
            $CellContext`e["K"], 
            $CellContext`e["T"]]; $CellContext`e["pBar"] := Dot[
            Transpose[
             $CellContext`e["T"]], 
            $CellContext`e["p"]]; $CellContext`e["SBar nl"] := Dot[
            Transpose[
             $CellContext`e["T nl"]], 
            $CellContext`e["n nl"]]; $CellContext`e["isLineElement"] := 
          True; $CellContext`e["isAlongGlobalXAxis"] := 
          Norm[Normalize[$CellContext`e["n", 2]["p"] - $CellContext`e["n", 1][
               "p"]] - {1, 0}] < 1.*^-6; $CellContext`e["uVector"] := Dot[
            $CellContext`e["T1"], 
            $CellContext`e["uBarVector"]]; $CellContext`e["X"] := 
          Module[{$CellContext`sf}, $CellContext`sf = \
$CellContext`fLinearShapeFunctions[
               $CellContext`e["l"]]; Return[
              Function[$CellContext`x, 
               
               Evaluate[$CellContext`e["n", 1]["p"] 
                 Part[$CellContext`sf, 1][$CellContext`x] + $CellContext`e[
                  "n", 2]["p"] Part[$CellContext`sf, 2][$CellContext`x]]]]; 
            Null]; $CellContext`e["x", 
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Module[{$CellContext`X, $CellContext`u, $CellContext`ex, \
$CellContext`ez}, $CellContext`X = $CellContext`e[
              "X"]; $CellContext`u = $CellContext`e[
              "u"]; $CellContext`ex = $CellContext`e[
              "ex"]; $CellContext`ez = $CellContext`e["ez"]; Return[
              Function[$CellContext`x, 
               
               Evaluate[$CellContext`X[$CellContext`x] + $CellContext`s (
                  Part[$CellContext`u, 1][$CellContext`x] $CellContext`ex + 
                  Part[$CellContext`u, 2][$CellContext`x] $CellContext`ez)]]]; 
            Null]; $CellContext`e["ex"] := 
          Normalize[$CellContext`e["n", 2]["p"] - $CellContext`e["n", 1][
            "p"]]; $CellContext`e["ez"] := 
          Module[{$CellContext`ex}, $CellContext`ex = $CellContext`e["ex"]; 
            Return[{-Part[$CellContext`ex, 2], 
               Part[$CellContext`ex, 1]}]; Null]; $CellContext`e[
           "directionFrom", 
            Pattern[$CellContext`n, 
             Blank[]]] := Module[{$CellContext`on}, $CellContext`assertThat[
              
              Or[$CellContext`n == $CellContext`e[
                "n", 1], $CellContext`n == $CellContext`e["n", 2]], 
              "Node node part of element in: directionFrom"]; $CellContext`on = 
             If[$CellContext`n === $CellContext`e["n", 1], 
               $CellContext`e["n", 2], 
               $CellContext`e["n", 1]]; Return[
              Normalize[$CellContext`on["p"] - $CellContext`n["p"]]]; 
            Null]; $CellContext`e["minAngleFrom", 
            Pattern[$CellContext`n, 
             Blank[]]] := 
          Module[{$CellContext`d0, $CellContext`d1, $CellContext`a1, \
$CellContext`a2}, $CellContext`a1 = 
             Pi/2; $CellContext`d0 = $CellContext`e[
              "directionFrom", $CellContext`n]; 
            Do[$CellContext`d1 = $CellContext`ee[
                "directionFrom", $CellContext`n]; $CellContext`a2 = 
               VectorAngle[$CellContext`d0, $CellContext`d1]; 
              While[$CellContext`a2 < 0, 
                AddTo[$CellContext`a2, 2 Pi]]; If[
                
                And[$CellContext`a2 > 
                 0.00001, $CellContext`a2 < $CellContext`a1], $CellContext`a1 = \
$CellContext`a2]; Null, {$CellContext`ee, 
               $CellContext`n["elements"]}]; Return[$CellContext`a1]; 
            Null]; $CellContext`e["N"] := Function[$CellContext`x, 
            Evaluate[
             $CellContext`prepareF[$CellContext`e["EA"] (D[
                 Part[
                  $CellContext`e["u"], 
                  1][$CellContext`x], $CellContext`x] - $CellContext`e[
               "eps0"])]]]; $CellContext`e["V"] := Function[$CellContext`x, 
            Evaluate[
             $CellContext`prepareF[-($CellContext`e["EI"] D[
                 Part[
                  $CellContext`e["u"], 2][$CellContext`x], {$CellContext`x, 
                  3}])]]]; $CellContext`e["M"] := Function[$CellContext`x, 
            Evaluate[
             $CellContext`prepareF[-($CellContext`e["EI"] (D[
                  Part[
                   $CellContext`e["u"], 2][$CellContext`x], {$CellContext`x, 
                   2}] + $CellContext`e["kappa0"]))]]]; $CellContext`e[
           "endForce", 
            Pattern[$CellContext`n, 
             Blank[]]] := 
          Module[{$CellContext`idx, $CellContext`x, $CellContext`sgn, \
$CellContext`ne, $CellContext`ve, $CellContext`Ne, $CellContext`Ve, \
$CellContext`me}, $CellContext`idx = Part[
               Position[
                $CellContext`e["nodes"], $CellContext`n], 1, 
               1]; $CellContext`x = If[$CellContext`idx == 1, 0, 
               $CellContext`e["l"]]; $CellContext`sgn = 
             If[$CellContext`idx == 1, -1, 
               1]; $CellContext`ne = $CellContext`e[
              "N"][$CellContext`x]; $CellContext`ve = $CellContext`e[
              "V"][$CellContext`x]; $CellContext`me = $CellContext`e[
              "M"][$CellContext`x]; {$CellContext`Ne, $CellContext`Ve} = Dot[
               Transpose[
                $CellContext`e["T0"]], {$CellContext`ne, $CellContext`ve}]; 
            Return[$CellContext`sgn {$CellContext`Ne, $CellContext`Ve, \
$CellContext`me}]; Null]; $CellContext`e["endForceLocal", 
            Pattern[$CellContext`n, 
             Blank[]]] := 
          Module[{$CellContext`idx, $CellContext`x, $CellContext`sgn, \
$CellContext`ne, $CellContext`ve, $CellContext`Ne, $CellContext`Ve, \
$CellContext`me}, $CellContext`idx = Part[
               Position[
                $CellContext`e["nodes"], $CellContext`n], 1, 
               1]; $CellContext`x = If[$CellContext`idx == 1, 0, 
               $CellContext`e["l"]]; $CellContext`sgn = 
             If[$CellContext`idx == 1, -1, 
               1]; $CellContext`ne = $CellContext`e[
              "N"][$CellContext`x]; $CellContext`ve = $CellContext`e[
              "V"][$CellContext`x]; $CellContext`me = $CellContext`e[
              "M"][$CellContext`x]; {$CellContext`Ne, $CellContext`Ve} = Dot[
               Transpose[
                $CellContext`e["T0"]], {$CellContext`ne, $CellContext`ve}]; 
            Return[$CellContext`sgn Dot[
                $CellContext`n[
                "T"], {$CellContext`Ne, $CellContext`Ve, $CellContext`me}]]; 
            Null]; $CellContext`e[
           "EnteredFunction", "N"] = $CellContext`newDelegateFunction[
            $CellContext`newConstantFunction[
             $CellContext`e["l"]]]; $CellContext`e[
           "EnteredFunction", "V"] = $CellContext`newDelegateFunction[
            $CellContext`newConstantFunction[
             $CellContext`e["l"]]]; $CellContext`e[
           "EnteredFunction", "M"] = $CellContext`newDelegateFunction[
            $CellContext`newConstantFunction[
             $CellContext`e["l"]]]; $CellContext`e["computed", "N"] = 
          Null; $CellContext`e["computed", "V"] = 
          Null; $CellContext`e["computed", "M"] = 
          Null; $CellContext`e["ui", "verified", "N"] = 
          False; $CellContext`e["ui", "verified", "V"] = 
          False; $CellContext`e["ui", "verified", "M"] = 
          False; $CellContext`e["getContinuationElement", 
            Pattern[$CellContext`i, 
             Blank[]]] := 
          Module[{$CellContext`ae = 
             Null, $CellContext`node, $CellContext`elements, \
$CellContext`elt}, $CellContext`node = $CellContext`e[
              "n", $CellContext`i]; $CellContext`elements = $CellContext`node[
              "elements"]; Do[If[
                And[
                 
                 Not[$CellContext`elt === $CellContext`e], $CellContext`elt[
                  "ex"] == $CellContext`e[
                  "ex"]], $CellContext`ae = $CellContext`elt]; 
              Null, {$CellContext`elt, $CellContext`elements}]; 
            Return[$CellContext`ae]; Null]; $CellContext`e[
           "N nl"] := $CellContext`fLinearCombination[
            Dot[{{-1, 0}, {0, 1}}, 
             $CellContext`e["n nl"]], 
            $CellContext`fLinearShapeFunctions[
             $CellContext`e["l"]]]; Return[$CellContext`e]; 
         Null], $CellContext`newElement[
         Pattern[$CellContext`nodes, 
          Blank[]]] := 
       Module[{$CellContext`e, $CellContext`n, $CellContext`i, \
$CellContext`j, $CellContext`nn = Length[$CellContext`nodes], $CellContext`nf = 
          Length[$CellContext`fFields]}, $CellContext`e["load"] = 
          0; $CellContext`e["nodes"] = $CellContext`nodes; $CellContext`e[
           "n nodes"] = $CellContext`nn; 
         Do[$CellContext`n = 
            Part[$CellContext`nodes, $CellContext`i]; $CellContext`e[
             "n", $CellContext`i] = $CellContext`n; $CellContext`e[
             "hinge", $CellContext`i] = {False, False, False}; $CellContext`e[
             "forces", $CellContext`i] = {}; AppendTo[
             $CellContext`n["elements"], $CellContext`e]; 
           Null, {$CellContext`i, $CellContext`nn}]; 
         Do[$CellContext`e["dofs", $CellContext`i, $CellContext`j] = 
           0, {$CellContext`i, $CellContext`nn}, {$CellContext`j, \
$CellContext`nf}]; $CellContext`e["checkConsistency"] := 
          Module[{$CellContext`c, $CellContext`h}, 
            Do[$CellContext`h = $CellContext`e[
                "hinge", $CellContext`i]; $CellContext`c = $CellContext`e[
                "n", $CellContext`i]["c"]; Do[$CellContext`assertThat[
                  Or[
                   Part[$CellContext`c, $CellContext`j], 
                   Not[
                    Part[$CellContext`h, $CellContext`j]]], 
                  "Can't have prescribed displacement and hinge at one node"]; 
                Null, {$CellContext`j, 
                 Length[$CellContext`h]}]; Null, {$CellContext`i, 
               Length[
                $CellContext`e["nodes"]]}]; Null]; $CellContext`e[
           "reset dofs"] := (Do[
             Increment[
              $CellContext`e["n", $CellContext`i][
              "fields", $CellContext`j]], {$CellContext`i, $CellContext`nn}, \
{$CellContext`j, 
              $CellContext`e["fields"]}]; 
           Do[$CellContext`e["dofs", $CellContext`i, $CellContext`j] = 
             0, {$CellContext`i, $CellContext`nn}, {$CellContext`j, \
$CellContext`nf}]); $CellContext`e["indexOfNode", 
            Pattern[$CellContext`ne, 
             Blank[]]] := Part[
            Position[
             $CellContext`e["nodes"], $CellContext`ne], 1, 1]; $CellContext`e[
           "dofsByNode", 
            Pattern[$CellContext`ne, 
             Blank[]]] := Table[
            $CellContext`e["dofs", 
             $CellContext`e[
             "indexOfNode", $CellContext`ne], $CellContext`j], \
{$CellContext`j, 
             Length[
              $CellContext`e["fields"]]}]; $CellContext`e["dofs"] := Flatten[
            Table[
             $CellContext`e[
             "dofs", $CellContext`i, $CellContext`j], {$CellContext`i, \
$CellContext`nn}, {$CellContext`j, 
              Length[
               $CellContext`e["fields"]]}]]; $CellContext`e["un"] := Flatten[
            Table[
             Part[
              $CellContext`n["cv"], $CellContext`f], {$CellContext`n, 
              $CellContext`e["nodes"]}, {$CellContext`f, 
              $CellContext`e["fields"]}]]; $CellContext`e["gather u", 
            Pattern[$CellContext`u, 
             Blank[]]] := ($CellContext`e[
            "uBarVector"] = $CellContext`dGatherVectorReturn[
             $CellContext`e["dofs"], $CellContext`u, 
             $CellContext`e["un"]]); $CellContext`e["pBarBCs"] := -Dot[
             $CellContext`e["KBar"], 
             $CellContext`e["un"]]; $CellContext`e["isLineElement"] := 
          False; $CellContext`e["thIICompressionOnly"] := False; 
         Return[$CellContext`e]; Null], $CellContext`fLinearShapeFunctions[
         Pattern[$CellContext`l, 
          Blank[]]] := {
        1 - #/$CellContext`l& , #/$CellContext`l& }, $CellContext`prepareF[
         Pattern[$CellContext`f, 
          Blank[]]] := Chop[
         Simplify[$CellContext`f]], $CellContext`fLinearCombination[
         Pattern[$CellContext`c, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := Function[$CellContext`x, 
         Evaluate[
          Sum[
          Part[$CellContext`c, $CellContext`i] 
           Part[$CellContext`n, $CellContext`i][$CellContext`x], \
{$CellContext`i, 
            Length[$CellContext`c]}]]], $CellContext`fup0[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`EA, 
          Blank[]]] := {(($CellContext`l - #) (2 $CellContext`l - #) #)/(
         6 $CellContext`EA $CellContext`l)& , (($CellContext`l - #) # \
($CellContext`l + #))/(
         6 $CellContext`EA $CellContext`l)& }, $CellContext`m2[] := 
       Module[{$CellContext`EA, $CellContext`m, $CellContext`n1, \
$CellContext`n2, $CellContext`n3}, $CellContext`EA = 
          30; $CellContext`m = $CellContext`newModel[]; $CellContext`n1 = \
$CellContext`m["addNode", 
            $CellContext`newNode[0, 0]]; $CellContext`n1["c"] = {
           False, False, True}; $CellContext`n2 = $CellContext`m["addNode", 
            $CellContext`newNode[4, -4]]; $CellContext`m["addForce", 
           $CellContext`newForce[$CellContext`n2, {10, 0, 
            0}]]; $CellContext`n3 = $CellContext`m["addNode", 
            $CellContext`newNode[8, 0]]; $CellContext`n3["c"] = {
           True, False, True}; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n1, $CellContext`n2, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n2, $CellContext`n3, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n1, $CellContext`n3, \
$CellContext`EA]]; $CellContext`m[
           "ui", "bounds"] = {{-2, 12}, {6.5, -2}}; $CellContext`m[
           "ui", "scale u"] = 1; $CellContext`m["ui scale N"] = 
          0.15; $CellContext`m["ui", "text"] = {{"10 kN", 5, -4.5}}; 
         Return[$CellContext`m]], $CellContext`m3[] := 
       Module[{$CellContext`EA, $CellContext`m, $CellContext`n1, \
$CellContext`n2, $CellContext`n3, $CellContext`n4, $CellContext`n5, \
$CellContext`n6}, $CellContext`EA = 
          200; $CellContext`m = $CellContext`newModel[]; $CellContext`n1 = \
$CellContext`m["addNode", 
            $CellContext`newNode[0, 0]]; $CellContext`n2 = $CellContext`m[
           "addNode", 
            $CellContext`newNode[4, 0]]; $CellContext`n1["c"] = {
           False, False, True}; $CellContext`n4 = $CellContext`m["addNode", 
            $CellContext`newNode[0, -4]]; $CellContext`n5 = $CellContext`m[
           "addNode", 
            $CellContext`newNode[4, -4]]; $CellContext`n6 = $CellContext`m[
           "addNode", 
            $CellContext`newNode[8, -4]]; $CellContext`n4["c"] = {
           False, False, True}; $CellContext`m["addForce", 
           $CellContext`newForce[$CellContext`n5, {0, 10, 
            0}]]; $CellContext`m["addForce", 
           $CellContext`newForce[$CellContext`n6, {0, 10, 
            0}]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n1, $CellContext`n2, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n4, $CellContext`n5, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n5, $CellContext`n6, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n2, $CellContext`n5, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n2, $CellContext`n6, \
$CellContext`EA]]; $CellContext`m["addElement", 
           $CellContext`newTrussElement[$CellContext`n4, $CellContext`n2, \
$CellContext`EA]]; $CellContext`m[
           "ui", "bounds"] = {{-2, 10}, {6.5, -2.4}}; $CellContext`m[
           "ui", "scale u"] = 
          1; $CellContext`m["ui scale N"] = -0.125; $CellContext`m[
           "ui", "text"] = {{"10 kN", 4.25, -5}, {"10 kN", 7.6, -2.2}}; 
         Return[$CellContext`m]], $CellContext`setSize[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`b, $CellContext`fm, $CellContext`mm, \
$CellContext`rfm, $CellContext`rmm, $CellContext`pm, $CellContext`s}, \
$CellContext`b = $CellContext`bounds[$CellContext`m]; $CellContext`fm = \
$CellContext`maxForce[$CellContext`m]; $CellContext`rfm = If[
            Or[
             $CellContext`draw2["system rescale forces"], $CellContext`fm == 
             0], 
            $CellContext`maxReactionForce[$CellContext`m], 
            0]; $CellContext`mm = $CellContext`maxMoment[$CellContext`m]; \
$CellContext`rmm = If[
            Or[
             $CellContext`draw2["system rescale forces"], $CellContext`mm == 
             0], 
            $CellContext`maxReactionMoment[$CellContext`m], 
            0]; $CellContext`pm = $CellContext`maxLoad[$CellContext`m]; If[
           $CellContext`draw2[
           "system draw reaction forces"], $CellContext`fm = 
            Max[$CellContext`fm, $CellContext`rfm]; $CellContext`mm = 
            Max[$CellContext`mm, $CellContext`rmm]; Null]; $CellContext`s = 
          Max[
            Abs[Part[$CellContext`b, 1, 2] - Part[$CellContext`b, 1, 1]], 
            Abs[
            Part[$CellContext`b, 2, 2] - 
             Part[$CellContext`b, 2, 1]]]; $CellContext`draw2[
           "f max"] = $CellContext`fm; $CellContext`draw2[
           "m max"] = $CellContext`mm; $CellContext`draw2["p max"] = 
          Part[$CellContext`pm, 1]; $CellContext`draw2["q max"] = 
          Part[$CellContext`pm, 2]; $CellContext`draw2[
           "bounds"] = $CellContext`b; $CellContext`draw2[
           "size"] = $CellContext`draw2[
            "scale"] $CellContext`s; $CellContext`draw2[
           "e1"] = {$CellContext`s, 0}; $CellContext`draw2["e2"] = {
           0, -$CellContext`s}; Null], $CellContext`bounds[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`i, $CellContext`p, $CellContext`x11, \
$CellContext`x12, $CellContext`x21, $CellContext`x22, $CellContext`l1, \
$CellContext`l2, $CellContext`mm, $CellContext`mr = 
          0.07}, $CellContext`x11 = ($CellContext`x12 = Part[
             Part[
              $CellContext`m["nodes"], 1]["p"], 
             1]); $CellContext`x21 = ($CellContext`x22 = Part[
             Part[
              $CellContext`m["nodes"], 1]["p"], 2]); 
         For[$CellContext`i = 2, $CellContext`i <= Length[
             $CellContext`m["nodes"]], 
           Increment[$CellContext`i], $CellContext`p = Part[
              $CellContext`m["nodes"], $CellContext`i]["p"]; $CellContext`x11 = 
            Min[$CellContext`x11, 
              Part[$CellContext`p, 1]]; $CellContext`x12 = 
            Max[$CellContext`x12, 
              Part[$CellContext`p, 1]]; $CellContext`x21 = 
            Min[$CellContext`x21, 
              Part[$CellContext`p, 2]]; $CellContext`x22 = 
            Max[$CellContext`x22, 
              Part[$CellContext`p, 2]]; 
           Null]; $CellContext`l1 = $CellContext`x12 - $CellContext`x11; \
$CellContext`l2 = $CellContext`x22 - $CellContext`x21; $CellContext`mm = \
$CellContext`mr Max[$CellContext`l1, $CellContext`l2]; 
         Return[{{$CellContext`x11 - $CellContext`mm, $CellContext`x12 + \
$CellContext`mm}, {-$CellContext`x21 + $CellContext`mm, -$CellContext`x22 - \
$CellContext`mm}}]; Null], $CellContext`maxForce[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`fm = 0, $CellContext`p}, 
         Do[$CellContext`fm = Max[$CellContext`fm, 
              Norm[
               Take[
                $CellContext`f["value"], 2], 2]]; Null, {$CellContext`f, 
            $CellContext`m["forces"]}]; Do[
           If[Length[
              $CellContext`p["f"]] > 0, 
            Do[$CellContext`fm = Max[$CellContext`fm, 
               Norm[
                Part[$CellContext`f, 2]]], {$CellContext`f, 
              $CellContext`p["f"]}]], {$CellContext`p, 
            $CellContext`m["loads"]}]; Return[$CellContext`fm]; 
         Null], $CellContext`draw2["incorrect marker symbol"][
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`isClose, 
          Blank[]], 
         Pattern[$CellContext`text, 
          Blank[]]] := Module[{$CellContext`cnt = 0}, 
         Tooltip[
          $CellContext`drawWithStyle[
           If[$CellContext`isClose, 
            $CellContext`draw2["close result marker style"], 
            $CellContext`draw2["marker style"]], 
           Polygon[
            Table[
             Offset[
             2 $CellContext`draw2["truss node size"] (
               1 + (-1)^Increment[$CellContext`cnt] RandomReal[{0, 0.6}]) {
                Cos[$CellContext`phi], 
                Sin[$CellContext`phi]}, 
              $CellContext`tran[$CellContext`p]], {$CellContext`phi, 0, 2 
              Pi, (2 Pi)/20}]]], $CellContext`text]], $CellContext`draw2[
        "correct marker symbol"][
         Pattern[$CellContext`p, 
          Blank[]]] := {{
          Apply[RGBColor, {34, 97, 34}/255], 
          AbsoluteThickness[1.5], 
          Disk[
           Offset[{0, 0}, 
            $CellContext`tran[$CellContext`p]], 
           Offset[7]]}, {
          Apply[RGBColor, {136, 239, 136}/255], 
          EdgeForm[White], 
          Disk[
           Offset[{0, 0}, 
            $CellContext`tran[$CellContext`p]], 
           Offset[5]]}, {
          Darker[Red], 
          Text[
           Style[$CellContext`\[Checkmark], 20], 
           $CellContext`tran[$CellContext`p]]}}, $CellContext`draw2[
        "undefined marker symbol"][
         Pattern[$CellContext`p, 
          Blank[]]] := Tooltip[{{
           Apply[RGBColor, {27, 117, 187}/255], 
           AbsoluteThickness[1.5], 
           Disk[
            Offset[{0, 0}, 
             $CellContext`tran[$CellContext`p]], 
            Offset[8]]}, {
           Lighter[
            Lighter[
             Apply[RGBColor, {27, 117, 187}/255]]], 
           EdgeForm[White], 
           Disk[
            Offset[{0, 0}, 
             $CellContext`tran[$CellContext`p]], 
            Offset[6]]}, {Red, 
           Text[
            Style[$CellContext`u, {12, "Title"}], 
            $CellContext`tran[$CellContext`p], {-0.1, 0}]}}, 
         $CellContext`LocalizedString["undefined"]], $CellContext`draw2[
        "force arrowhead size"][
         Pattern[$CellContext`nf, 
          Blank[]]] := If[Abs[$CellContext`nf] > 0.5, Medium, 
         If[Abs[$CellContext`nf] > 0.3, Small, 
          If[Abs[$CellContext`nf] > 0.2, Tiny, 0]]], $CellContext`draw2[
        "load arrowhead size"][
         Pattern[$CellContext`nf, 
          Blank[]]] := If[Abs[$CellContext`nf] > 0.5, Small, 
         If[Abs[$CellContext`nf] > 0.3, Small, 
          If[Abs[$CellContext`nf] > 0.2, Tiny, 0]]], $CellContext`draw2[
        "moment arrowhead size"][
         Pattern[$CellContext`nf, 
          Blank[]]] := $CellContext`draw2[
        "load arrowhead size"][$CellContext`nf], $CellContext`draw2[
        "horizontal hinge"][
         Pattern[$CellContext`d$, 
          Blank[]]] := 
       Module[{$CellContext`tr$}, $CellContext`tr$ = \
$CellContext`tv$1227732[$CellContext`w$1227732, $CellContext`h$1227732, \
$CellContext`d$]; {
           EdgeForm[{White}], 
           FaceForm[{White}], 
           Rectangle[
            $CellContext`thp[{-$CellContext`h$1227732, \
-($CellContext`w$1227732 0.8)} + $CellContext`tr$], 
            $CellContext`thp[{$CellContext`h$1227732, $CellContext`w$1227732 
               0.8} + $CellContext`tr$]], {
            EdgeForm[{
              AbsoluteThickness[1 $CellContext`PT], Black}], 
            Line[
             $CellContext`th[{{-$CellContext`h$1227732, \
-$CellContext`w$1227732} + $CellContext`tr$, {$CellContext`h$1227732, \
-$CellContext`w$1227732} + $CellContext`tr$}]], 
            Line[
             $CellContext`th[{{-$CellContext`h$1227732, \
$CellContext`w$1227732} + $CellContext`tr$, {$CellContext`h$1227732, \
$CellContext`w$1227732} + $CellContext`tr$}]]}}], $CellContext`draw2[
        "vertical hinge"][
         Pattern[$CellContext`d$, 
          Blank[]]] := 
       Module[{$CellContext`tr$}, $CellContext`tr$ = \
$CellContext`tv$1227732[$CellContext`h$1227732, $CellContext`w$1227732, \
$CellContext`d$]; {
           EdgeForm[{White}], 
           FaceForm[{White}], 
           Rectangle[
            $CellContext`thp[{-($CellContext`w$1227732 
                0.8), -$CellContext`h$1227732} + $CellContext`tr$], 
            $CellContext`thp[{$CellContext`w$1227732 
               0.8, $CellContext`h$1227732} + $CellContext`tr$]], {
            EdgeForm[{
              AbsoluteThickness[1 $CellContext`PT], Black}], 
            Line[
             $CellContext`th[{{-$CellContext`w$1227732, \
-$CellContext`h$1227732} + $CellContext`tr$, {-$CellContext`w$1227732, \
$CellContext`h$1227732} + $CellContext`tr$}]], 
            Line[
             $CellContext`th[{{$CellContext`w$1227732, \
-$CellContext`h$1227732} + $CellContext`tr$, {$CellContext`w$1227732, \
$CellContext`h$1227732} + $CellContext`tr$}]]}}], $CellContext`draw2[
        "rotational hinge"][
         Pattern[$CellContext`d$, 
          Blank[]]] := 
       Module[{$CellContext`tr$}, $CellContext`tr$ = 
          1.3 $CellContext`tns$1227732 $CellContext`d$; {
           EdgeForm[{
             AbsoluteThickness[0.5 $CellContext`PT], Black}], 
           FaceForm[{White}], 
           Disk[
            Offset[{0, 0} + $CellContext`tr$], 
            Offset[$CellContext`tns$1227732]]}], $CellContext`draw2[
        "all free hinge"][
         Pattern[$CellContext`d$, 
          Blank[]]] := 
       Module[{$CellContext`tr$}, $CellContext`tr$ = $CellContext`tns$1227732 
           Normalize[$CellContext`d$]; {
           FaceForm[{White}], 
           Disk[
            Offset[{0, 0} + $CellContext`tr$], 
            Offset[$CellContext`tns$1227732]]}], $CellContext`draw2[
        "undefined hinge"][
         Pattern[$CellContext`d$, 
          Blank[]]] := 
       Module[{$CellContext`tr$}, $CellContext`tr$ = $CellContext`tns$1227732 
           Normalize[$CellContext`d$]; {
           EdgeForm[{
             AbsoluteThickness[0.5 $CellContext`PT], Black}], 
           FaceForm[{Green}], 
           Disk[
            Offset[{0, 0} + $CellContext`tr$], 
            Offset[$CellContext`tns$1227732]]}], $CellContext`draw2[
        "hinge types"][
         Pattern[$CellContext`d, 
          Blank[]]] := {
         $CellContext`draw2["horizontal hinge"][$CellContext`d], 
         $CellContext`draw2["vertical hinge"][$CellContext`d], 
         $CellContext`draw2["rotational hinge"][$CellContext`d], 
         $CellContext`draw2["all free hinge"][$CellContext`d], 
         $CellContext`draw2[
         "undefined hinge"][$CellContext`d]}, $CellContext`draw2[
        "angular dimension radius"] = 
       20, $CellContext`draw2["bounds"] = {{-0.28, 4.28}, {
        0.28, -2.2800000000000002`}}, $CellContext`draw2[
        "close result marker style"] = {
         EdgeForm[{
           GrayLevel[0], 
           AbsoluteThickness[0.75]}], 
         RGBColor[0, 1, 0]}, $CellContext`draw2["constraint size"] = 
       17, $CellContext`draw2["correct color"] = 
       RGBColor[0, 4/9, 0], $CellContext`draw2["correct constraint style"] = {
        
         GrayLevel[0], 
         AbsoluteThickness[0.5], 
         EdgeForm[{
           GrayLevel[0], 
           AbsoluteThickness[0.5]}], 
         FaceForm[
          GrayLevel[1]]}, $CellContext`draw2["correct elt style"] = {
         RGBColor[0, 4/9, 0], 
         AbsoluteThickness[1.5]}, $CellContext`draw2[
        "deformation draw connections"] = 
       False, $CellContext`draw2["deformation draw label"] = 
       False, $CellContext`draw2[
        "deformation graphics items"] = {}, $CellContext`draw2[
        "deformed system color"] = 
       RGBColor[1, 0.5, 0], $CellContext`draw2["dimension arrowhead"] = 
       Graphics[{
          Line[{{0, -1}, {0, 1}}], 
          Line[{{-0.45, 0}, {0.45, 0}}], 
          Line[{{-0.3, -0.3}, {0.3, 0.3}}]}], $CellContext`draw2[
        "dimension size"] = 1, $CellContext`draw2["dimension style"] = {
         AbsoluteThickness[0.75], 
         GrayLevel[0]}, $CellContext`draw2["draw nodes"] = 
       False, $CellContext`draw2["draw truss nodes"] = 
       True, $CellContext`draw2["e1"] = {
        4.5600000000000005`, 0}, $CellContext`draw2["e2"] = {
        0, -4.5600000000000005`}, $CellContext`draw2["f max"] = 
       10, $CellContext`draw2["font size"] = 
       Medium, $CellContext`draw2["force arrowhead"] = Graphics[{
          Line[{{-0.9, 0.27}, {0., 0.}, {-0.9, -0.27}}]}], $CellContext`draw2[
        "force label offset"] = 1.5, $CellContext`draw2["force offset"] = 
       3, $CellContext`draw2["force push or pull"] = 
       "auto", $CellContext`draw2["force size"] = 
       40, $CellContext`draw2["force style"] = {
         AbsoluteThickness[0.75], 
         RGBColor[1, 0, 0]}, $CellContext`draw2["fRound"] = 
       1/100000000, $CellContext`draw2["highlight color"] = 
       RGBColor[1, 0.5, 0], $CellContext`draw2["highlight constraint style"] = {
         RGBColor[1, 0.5, 0], 
         AbsoluteThickness[1.5], 
         EdgeForm[{
           RGBColor[1, 0.5, 0], 
           AbsoluteThickness[1.5]}], 
         FaceForm[
          GrayLevel[1]]}, $CellContext`draw2["highlight elt style"] = {
         RGBColor[1, 0.5, 0], 
         AbsoluteThickness[2.5]}, $CellContext`draw2["highlight thickness"] = 
       AbsoluteThickness[1.5], $CellContext`draw2["hinge size"] = 
       17, $CellContext`draw2["image margins"] = 
       0, $CellContext`draw2["image padding"] = 
       0, $CellContext`draw2["image size deformation"] = {825, 
        450}, $CellContext`draw2["image size results"] = 
       400, $CellContext`draw2["image size system"] = 
       400, $CellContext`draw2["load dp"] = 
       0.06, $CellContext`draw2["load dq"] = 
       0.035, $CellContext`draw2["load offset"] = 
       5, $CellContext`draw2["load size"] = 
       40, $CellContext`draw2["load style"] = {
         AbsoluteThickness[0.5], 
         RGBColor[1, 0, 0]}, $CellContext`draw2["marker style"] = {
         EdgeForm[{
           GrayLevel[0], 
           AbsoluteThickness[0.75]}], 
         RGBColor[1, 0, 0]}, $CellContext`draw2["m max"] = 
       0, $CellContext`draw2["moment arrowhead -"] = Graphics[{
          
          Line[{{-0.9, -0.675}, {0., 0.}, {-0.9, 
           0.315}}]}], $CellContext`draw2["moment arrowhead +"] = Graphics[{
          
          Line[{{-0.9, 0.675}, {0., 
           0.}, {-0.9, -0.315}}]}], $CellContext`draw2["moment offset"] = 
       6, $CellContext`draw2["moment size"] = 
       15, $CellContext`draw2["mouseover color"] = 
       RGBColor[{193/255, 13/85, 3/17}], $CellContext`draw2[
        "mouseover constraint style"] = {
         RGBColor[{193/255, 13/85, 3/17}], 
         AbsoluteThickness[1.5], 
         EdgeForm[{
           RGBColor[{193/255, 13/85, 3/17}], 
           AbsoluteThickness[1.5]}], 
         FaceForm[
          GrayLevel[1]]}, $CellContext`draw2["mouseover elt style"] = {
         RGBColor[{193/255, 13/85, 3/17}], 
         AbsoluteThickness[2.5]}, $CellContext`draw2["mouseover thickness"] = 
       AbsoluteThickness[1.5], $CellContext`draw2["node size"] = 
       1.5, $CellContext`draw2["normal constraint style"] = {
         GrayLevel[0], 
         AbsoluteThickness[0.5], 
         EdgeForm[{
           GrayLevel[0], 
           AbsoluteThickness[0.5]}], 
         FaceForm[
          GrayLevel[1]]}, $CellContext`draw2["normal elt style"] = {
         AbsoluteThickness[1], 
         GrayLevel[0]}, $CellContext`draw2["normal thickness"] = 
       AbsoluteThickness[0.5], $CellContext`draw2["p max"] = 
       0, $CellContext`draw2["q max"] = 
       0, $CellContext`draw2["reaction force draw components"] = 
       True, $CellContext`draw2["reaction force offset"] = 
       7, $CellContext`draw2["reaction force style"] = {
         AbsoluteThickness[0.75], 
         RGBColor[1, 0, 1]}, $CellContext`draw2["ref offset"] = 
       2.5, $CellContext`draw2["ref style"] = {
         AbsoluteThickness[0.75], 
         RGBColor[0, 0, 1], 
         AbsoluteDashing[{5, 2.5}]}, $CellContext`draw2[
        "result draw result items long"] = 
       True, $CellContext`draw2["result items"] = {
        "N", "V", "M", "N nl"}, $CellContext`draw2[
        "result items long"] = $CellContext`LocalizedString[
        "result items"], $CellContext`draw2["results curve points"] = 
       20, $CellContext`draw2["results draw label"] = 
       False, $CellContext`draw2["results style"] = {
         EdgeForm[{
           GrayLevel[0], 
           AbsoluteThickness[0.5]}], 
         FaceForm[
          Opacity[0.6]]}, $CellContext`draw2["rotational spring"] = Return[{{
           AbsoluteThickness[0.5], {
            Line[{
              Offset[{-34., -4.737333333333334}], 
              Offset[{-31.166666666666664`, -1.904}]}], 
            Line[{
              Offset[{-31.166666666666664`, -4.737333333333334}], 
              Offset[{-28.333333333333336`, -1.904}]}], 
            Line[{
              Offset[{-28.333333333333336`, -4.737333333333334}], 
              Offset[{-25.5, -1.904}]}], 
            Line[{
              Offset[{-25.5, -4.737333333333334}], 
              Offset[{-22.666666666666668`, -1.904}]}], 
            Line[{
              Offset[{-22.666666666666668`, -4.737333333333334}], 
              Offset[{-19.833333333333332`, -1.904}]}], 
            Line[{
              Offset[{-19.833333333333332`, -4.737333333333334}], 
              Offset[{-17., -1.904}]}]}}, 
          Circle[
           Offset[{-12.75, 0}], 
           Offset[12.75], {0, Pi}], {
           AbsoluteThickness[1], 
           Line[{
             Offset[{-34., -1.904}], 
             Offset[{-17., -1.904}]}]}}], $CellContext`draw2["scale"] = 
       1., $CellContext`draw2["selected component"] = 
       "S", $CellContext`draw2["selected object"] = 
       Null, $CellContext`draw2["short reference line"] = 
       True, $CellContext`draw2["show element function values"] = 
       True, $CellContext`draw2["size"] = 
       4.5600000000000005`, $CellContext`draw2["spring"] = Return[{{
           AbsoluteThickness[0.5], {
            Line[{
              Offset[{(-17)/2, -30.237333333333336`}], 
              Offset[{(-17)/3, -27.404}]}], 
            Line[{
              Offset[{(-17)/3, -30.237333333333336`}], 
              Offset[{(-17)/6, -27.404}]}], 
            Line[{
              Offset[{(-17)/6, -30.237333333333336`}], 
              Offset[{0, -27.404}]}], 
            Line[{
              Offset[{0, -30.237333333333336`}], 
              Offset[{17/6, -27.404}]}], 
            Line[{
              Offset[{17/6, -30.237333333333336`}], 
              Offset[{17/3, -27.404}]}], 
            Line[{
              Offset[{17/3, -30.237333333333336`}], 
              Offset[{17/2, -27.404}]}]}}, {
           AbsoluteThickness[1], 
           Line[{
             Offset[{0, -1.904}], 
             Offset[{0, -3.725428571428571}], 
             Offset[{-5.1, -5.546857142857142}]}], 
           Line[{
             Offset[{-5.1, -5.546857142857142}], 
             Offset[{5.1, -9.189714285714285}], 
             Offset[{-5.1, -12.832571428571427`}], 
             Offset[{5.1, -16.475428571428573`}], 
             Offset[{-5.1, -20.118285714285715`}], 
             Offset[{5.1, -23.761142857142854`}]}], 
           Line[{
             Offset[{0, -27.404}], 
             Offset[{0, -25.582571428571427`}], 
             Offset[{5.1, -23.761142857142858`}]}]}, {
           AbsoluteThickness[1], 
           Line[{
             Offset[{(-17)/2, -27.404}], 
             Offset[{17/2, -27.404}]}]}}], $CellContext`draw2[
        "system draw automatic labels"] = 
       False, $CellContext`draw2["system draw constraints"] = 
       True, $CellContext`draw2["system draw deformation"] = 
       False, $CellContext`draw2["system draw dimensions"] = 
       False, $CellContext`draw2["system draw element force label"] = 
       True, $CellContext`draw2["system draw elements reference line"] = 
       True, $CellContext`draw2["system draw global load"] = 
       True, $CellContext`draw2["system draw grid"] = 
       False, $CellContext`draw2["system draw labels"] = 
       False, $CellContext`draw2["system draw reaction forces"] = 
       False, $CellContext`draw2["system draw text"] = 
       True, $CellContext`draw2["system draw unbalanced forces"] = 
       True, $CellContext`draw2[
        "system graphics items"] = {}, $CellContext`draw2[
        "system input info"] = {}, $CellContext`draw2[
        "system rescale forces"] = 
       True, $CellContext`draw2["system show tooltip at constraints"] = 
       False, $CellContext`draw2["triangle"] = {{
          Polygon[{
            Offset[{0, -1.904}], 
            Offset[{-8.5, -16.62643186433546}], 
            Offset[{8.5, -16.62643186433546}]}], Null}}, $CellContext`draw2[
        "triangle offset"] = 1.4, $CellContext`draw2["truss node size"] = 
       2.72, $CellContext`draw2["unbalanced force style"] = {
         AbsoluteThickness[0.75], 
         RGBColor[1, 0, 1]}, $CellContext`draw2["undefined color"] = 
       RGBColor[2/3, 0, 0], $CellContext`draw2["undefined constraint style"] = {
         GrayLevel[0], 
         AbsoluteThickness[0.5], 
         EdgeForm[{
           GrayLevel[0], 
           AbsoluteThickness[0.5]}], 
         FaceForm[
          RGBColor[1, 5/9, 5/9]]}, $CellContext`draw2["undefined elt style"] = {
         RGBColor[2/3, 0, 0], 
         AbsoluteThickness[1.5]}, $CellContext`draw2["undefined fill color"] = 
       RGBColor[1, 5/9, 5/9], $CellContext`draw2["vertical hinge width"] = 
       0.15, $CellContext`draw2["constraint", {False, False}] = {
         Polygon[{
           Offset[{0, -1.904}], 
           Offset[{-8.5, -16.62643186433546}], 
           Offset[{8.5, -16.62643186433546}]}], Null, 
         AbsoluteThickness[0.5], 
         Line[{
           Offset[{(-17)/2, -19.45976519766879}], 
           Offset[{(-17)/3, -16.62643186433546}]}], 
         Line[{
           Offset[{(-17)/3, -19.45976519766879}], 
           Offset[{(-17)/6, -16.62643186433546}]}], 
         Line[{
           Offset[{(-17)/6, -19.45976519766879}], 
           Offset[{0, -16.62643186433546}]}], 
         Line[{
           Offset[{0, -19.45976519766879}], 
           Offset[{17/6, -16.62643186433546}]}], 
         Line[{
           Offset[{17/6, -19.45976519766879}], 
           Offset[{17/3, -16.62643186433546}]}], 
         Line[{
           Offset[{17/3, -19.45976519766879}], 
           Offset[{17/2, -16.62643186433546}]}]}, $CellContext`draw2[
        "constraint", {False, True}] = Rotate[{
          Polygon[{
            Offset[{0, -1.904}], 
            Offset[{-8.5, -16.62643186433546}], 
            Offset[{8.5, -16.62643186433546}]}], Null, 
          Line[{
            Offset[{(-17)/2, -19.176431864335456`}], 
            Offset[{17/2, -19.176431864335456`}]}]}, 90 Degree, {0, 
         0}], $CellContext`draw2["constraint", {True, False}] = {
         Polygon[{
           Offset[{0, -1.904}], 
           Offset[{-8.5, -16.62643186433546}], 
           Offset[{8.5, -16.62643186433546}]}], Null, 
         Line[{
           Offset[{(-17)/2, -19.176431864335456`}], 
           Offset[{17/2, -19.176431864335456`}]}]}, $CellContext`draw2[
        "constraint", {True, True}] = {}, $CellContext`draw2[
        "constraint", {False, False, False}] = {{
          AbsoluteThickness[1], 
          Line[{
            Offset[{(-17)/2, -1.904}], 
            Offset[{17/2, -1.904}]}]}, {
          AbsoluteThickness[0.5], {
           Line[{
             Offset[{(-17)/2, -4.737333333333334}], 
             Offset[{(-17)/3, -1.904}]}], 
           Line[{
             Offset[{(-17)/3, -4.737333333333334}], 
             Offset[{(-17)/6, -1.904}]}], 
           Line[{
             Offset[{(-17)/6, -4.737333333333334}], 
             Offset[{0, -1.904}]}], 
           Line[{
             Offset[{0, -4.737333333333334}], 
             Offset[{17/6, -1.904}]}], 
           Line[{
             Offset[{17/6, -4.737333333333334}], 
             Offset[{17/3, -1.904}]}], 
           Line[{
             Offset[{17/3, -4.737333333333334}], 
             Offset[{17/2, -1.904}]}]}}}, $CellContext`draw2[
        "constraint", {False, False, True}] = {
         Polygon[{
           Offset[{0, -1.904}], 
           Offset[{-8.5, -16.62643186433546}], 
           Offset[{8.5, -16.62643186433546}]}], Null, 
         AbsoluteThickness[0.5], 
         Line[{
           Offset[{(-17)/2, -19.45976519766879}], 
           Offset[{(-17)/3, -16.62643186433546}]}], 
         Line[{
           Offset[{(-17)/3, -19.45976519766879}], 
           Offset[{(-17)/6, -16.62643186433546}]}], 
         Line[{
           Offset[{(-17)/6, -19.45976519766879}], 
           Offset[{0, -16.62643186433546}]}], 
         Line[{
           Offset[{0, -19.45976519766879}], 
           Offset[{17/6, -16.62643186433546}]}], 
         Line[{
           Offset[{17/6, -19.45976519766879}], 
           Offset[{17/3, -16.62643186433546}]}], 
         Line[{
           Offset[{17/3, -19.45976519766879}], 
           Offset[{17/2, -16.62643186433546}]}]}, $CellContext`draw2[
        "constraint", {False, True, False}] = Rotate[{
          Line[{
            Offset[{(-17)/3, -1.904}], 
            Offset[{17/3, -1.904}]}], 
          Line[{
            Offset[{(-17)/2, -4.454}], 
            Offset[{17/2, -4.454}]}], {
           AbsoluteThickness[0.5], {
            Line[{
              Offset[{(-17)/2, -7.287333333333333}], 
              Offset[{(-17)/3, -4.454}]}], 
            Line[{
              Offset[{(-17)/3, -7.287333333333333}], 
              Offset[{(-17)/6, -4.454}]}], 
            Line[{
              Offset[{(-17)/6, -7.287333333333333}], 
              Offset[{0, -4.454}]}], 
            Line[{
              Offset[{0, -7.287333333333333}], 
              Offset[{17/6, -4.454}]}], 
            Line[{
              Offset[{17/6, -7.287333333333333}], 
              Offset[{17/3, -4.454}]}], 
            Line[{
              Offset[{17/3, -7.287333333333333}], 
              Offset[{17/2, -4.454}]}]}}}, 90 Degree, {0, 
         0}], $CellContext`draw2["constraint", {False, True, True}] = 
       Rotate[{
          Polygon[{
            Offset[{0, -1.904}], 
            Offset[{-8.5, -16.62643186433546}], 
            Offset[{8.5, -16.62643186433546}]}], Null, 
          Line[{
            Offset[{(-17)/2, -19.176431864335456`}], 
            Offset[{17/2, -19.176431864335456`}]}]}, 90 Degree, {0, 
         0}], $CellContext`draw2["constraint", {True, False, False}] = {
         Line[{
           Offset[{(-17)/3, -1.904}], 
           Offset[{17/3, -1.904}]}], 
         Line[{
           Offset[{(-17)/2, -4.454}], 
           Offset[{17/2, -4.454}]}], {
          AbsoluteThickness[0.5], {
           Line[{
             Offset[{(-17)/2, -7.287333333333333}], 
             Offset[{(-17)/3, -4.454}]}], 
           Line[{
             Offset[{(-17)/3, -7.287333333333333}], 
             Offset[{(-17)/6, -4.454}]}], 
           Line[{
             Offset[{(-17)/6, -7.287333333333333}], 
             Offset[{0, -4.454}]}], 
           Line[{
             Offset[{0, -7.287333333333333}], 
             Offset[{17/6, -4.454}]}], 
           Line[{
             Offset[{17/6, -7.287333333333333}], 
             Offset[{17/3, -4.454}]}], 
           Line[{
             Offset[{17/3, -7.287333333333333}], 
             Offset[{17/2, -4.454}]}]}}}, $CellContext`draw2[
        "constraint", {True, False, True}] = {
         Polygon[{
           Offset[{0, -1.904}], 
           Offset[{-8.5, -16.62643186433546}], 
           Offset[{8.5, -16.62643186433546}]}], Null, 
         Line[{
           Offset[{(-17)/2, -19.176431864335456`}], 
           Offset[{17/2, -19.176431864335456`}]}]}, $CellContext`draw2[
        "constraint", {True, True, False}] = {}, $CellContext`draw2[
        "constraint", {True, True, True}] = {}, $CellContext`draw2["triangle", 
         Pattern[$CellContext`wOffset, 
          Blank[]]] = {{
          Polygon[{
            Offset[{0, 
              
              If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
            
            Offset[{-8.5, -14.722431864335457` + 
              If[$CellContext`wOffset, -(($CellContext`draw2[
                   "triangle offset"] $CellContext`draw2["truss node size"])/
                 2), 0]}], 
            
            Offset[{8.5, -14.722431864335457` + 
              If[$CellContext`wOffset, -(($CellContext`draw2[
                   "triangle offset"] $CellContext`draw2["truss node size"])/
                 2), 0]}]}], Null}}, $CellContext`draw2[
        "constraint", {True, True, True}, 
         Pattern[$CellContext`wOffset, 
          Blank[]]] := {}, $CellContext`draw2[
        "constraint", {True, False, True}, 
         Pattern[$CellContext`wOffset, 
          Blank[]]] := Flatten[{
          $CellContext`draw2["triangle", $CellContext`wOffset], 
          Line[
           $CellContext`tc[{{(-1)/2, -(Sqrt[3]/2) - 0.15}, {
             1/2, -(Sqrt[3]/2) - 
              0.15}}, $CellContext`wOffset]]}], $CellContext`draw2[
        "constraint", {False, True, True}, 
         Pattern[$CellContext`wOffset, 
          Blank[]]] := Rotate[
         $CellContext`draw2[
         "constraint", {True, False, True}, $CellContext`wOffset], 90 
         Degree, {0, 0}], $CellContext`draw2[
        "constraint", {False, False, True}, 
         Pattern[$CellContext`wOffset, 
          Blank[]]] = {
         Polygon[{
           Offset[{0, 
             
             If[$CellContext`wOffset, -(($CellContext`draw2[
                 "triangle offset"] $CellContext`draw2["truss node size"])/2),
               0]}], 
           
           Offset[{-8.5, -14.722431864335457` + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
           
           Offset[{8.5, -14.722431864335457` + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}]}], Null, 
         AbsoluteThickness[0.5], 
         Line[{
           
           Offset[{(-17)/2, 17 ((-1)/6 - Sqrt[3]/2) + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
           
           Offset[{(-17)/3, ((-17) Sqrt[3])/2 + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}]}], 
         Line[{
           
           Offset[{(-17)/3, 17 ((-1)/6 - Sqrt[3]/2) + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
           
           Offset[{(-17)/6, ((-17) Sqrt[3])/2 + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}]}], 
         Line[{
           
           Offset[{(-17)/6, 17 ((-1)/6 - Sqrt[3]/2) + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
           
           Offset[{0, ((-17) Sqrt[3])/2 + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}]}], 
         Line[{
           
           Offset[{0, 17 ((-1)/6 - Sqrt[3]/2) + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
           
           Offset[{17/6, ((-17) Sqrt[3])/2 + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}]}], 
         Line[{
           
           Offset[{17/6, 17 ((-1)/6 - Sqrt[3]/2) + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
           
           Offset[{17/3, ((-17) Sqrt[3])/2 + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}]}], 
         Line[{
           
           Offset[{17/3, 17 ((-1)/6 - Sqrt[3]/2) + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}], 
           
           Offset[{17/2, ((-17) Sqrt[3])/2 + 
             If[$CellContext`wOffset, -(($CellContext`draw2[
                  "triangle offset"] $CellContext`draw2["truss node size"])/
                2), 0]}]}]}, $CellContext`drawWithStyle[
         Pattern[$CellContext`style, 
          Blank[]], 
         Pattern[$CellContext`items, 
          Blank[]]] := {
         Flatten[{$CellContext`style, $CellContext`items}]}, $CellContext`tran[
         Pattern[$CellContext`p, 
          Blank[]]] := {
         Part[$CellContext`p, 1], -Part[$CellContext`p, 2]}, 
       Attributes[$CellContext`d$] = {Temporary}, 
       Attributes[$CellContext`tr$] = {Temporary}, 
       Attributes[$CellContext`tv$1227732] = {
        Temporary}, $CellContext`tv$1227732[
         Pattern[$CellContext`ww, 
          Blank[]], 
         Pattern[$CellContext`hh, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]]] := 
       If[Part[$CellContext`d, 2] == 0, {$CellContext`hh Sign[
            Part[$CellContext`d, 1]], 
          0}, {(Part[$CellContext`d, 1] $CellContext`ww Sign[
             Part[$CellContext`d, 2]])/
          Part[$CellContext`d, 2], $CellContext`ww Sign[
            Part[$CellContext`d, 2]]}], 
       Attributes[$CellContext`w$1227732] = {
        Temporary}, $CellContext`w$1227732 = 0.15, 
       Attributes[$CellContext`h$1227732] = {
        Temporary}, $CellContext`h$1227732 = 
       0.44999999999999996`, $CellContext`thp[
         Pattern[$CellContext`pt, 
          Blank[]]] := 
       Offset[$CellContext`draw2[
          "hinge size"] $CellContext`pt], $CellContext`PT = 1, $CellContext`th[
         Pattern[$CellContext`pts, 
          Blank[]]] := Table[
         Offset[$CellContext`draw2["hinge size"] 
          Part[$CellContext`pts, $CellContext`i]], {$CellContext`i, 
          Length[$CellContext`pts]}], 
       Attributes[$CellContext`tns$1227732] = {
        Temporary}, $CellContext`tns$1227732 = 2.72, $CellContext`tc[
         Pattern[$CellContext`pts, 
          Blank[]]] := $CellContext`tc[$CellContext`pts, 
         True], $CellContext`tc[
         Pattern[$CellContext`pts, 
          Blank[]], 
         Pattern[$CellContext`wOffset, 
          Blank[]]] := Table[
         Offset[$CellContext`draw2["constraint size"] 
           Part[$CellContext`pts, $CellContext`i] + {0, 
            
            If[$CellContext`wOffset, -(($CellContext`draw2[
                "triangle offset"] $CellContext`draw2["truss node size"])/2), 
             0]}], {$CellContext`i, 
          Length[$CellContext`pts]}], $CellContext`maxReactionForce[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`n, $CellContext`fm = 0, $CellContext`vf}, 
         Do[$CellContext`vf = If[
              Or[$CellContext`n["reactionForce"] === Null, 
               Length[$CellContext`n["elements"] == 0]], {0, 0, 0}, 
              $CellContext`n["reactionForce"]]; $CellContext`fm = 
            Max[$CellContext`fm, 
              Norm[
               Take[$CellContext`vf, 2], 2]]; Null, {$CellContext`n, 
            $CellContext`m["nodes"]}]; Return[$CellContext`fm]; 
         Null], $CellContext`maxMoment[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`mm = 0}, 
         Do[$CellContext`mm = Max[$CellContext`mm, 
              Abs[
               Part[
                $CellContext`f["value"], 3]]]; Null, {$CellContext`f, 
            $CellContext`m["forces"]}]; Return[$CellContext`mm]; 
         Null], $CellContext`maxReactionMoment[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`n, $CellContext`mm = 0, $CellContext`vf}, 
         Do[$CellContext`vf = 
            If[$CellContext`n["reactionForce"] === Null, {0, 0, 0}, 
              $CellContext`n["reactionForce"]]; $CellContext`mm = 
            Max[$CellContext`mm, 
              Abs[$CellContext`vf]]; Null, {$CellContext`n, 
            $CellContext`m["nodes"]}]; Return[$CellContext`mm]; 
         Null], $CellContext`maxLoad[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`i, $CellContext`p, $CellContext`pm}, \
$CellContext`pm = {0, 0}; For[$CellContext`i = 1, $CellContext`i <= Length[
             $CellContext`m["loads"]], 
           Increment[$CellContext`i], $CellContext`p = Part[
              $CellContext`m["loads"], $CellContext`i]; 
           Part[$CellContext`pm, 1] = Max[
              Part[$CellContext`pm, 1], 
              Abs[
               $CellContext`p["p", 1]], 
              Abs[
               $CellContext`p["p", 2]]]; Part[$CellContext`pm, 2] = Max[
              Part[$CellContext`pm, 2], 
              Abs[
               $CellContext`p["q", 1]], 
              Abs[
               $CellContext`p["q", 2]], 
              Abs[
               $CellContext`p["qzBar", 1]], 
              Abs[
               $CellContext`p["qzBar", 2]], 
              Abs[
               $CellContext`p["pzBar", 1]], 
              Abs[
               $CellContext`p["pzBar", 2]]]; Null]; Return[$CellContext`pm]; 
         Null], $CellContext`contentManipulate[
         Pattern[$CellContext`mm, 
          Blank[]]] := Manipulate[
         Module[{$CellContext`i, $CellContext`j, $CellContext`n, \
$CellContext`p, $CellContext`u, $CellContext`res, $CellContext`tol = 
           0.15, $CellContext`progress, $CellContext`tu = 
           Image[CompressedData["
1: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
FSpU3L9xaXbwqf4TQaX2+O2kL/soxZFjZLgomDiBz5UDzsVhHjkLONechr1T
1n+gOSjkn6Y81e0w1ut0rie+R+d+iIvYk2XaE9TdUawDnJsBTTHq67imGPJX
1JwEAeckUEdspzFcFDk405T30+tL86pep0KFik3jTF/tl/pz/Hs7EneRgRyK
c/mgmeN8rjySTCCfS+Ca4DSuizNyOJeMa+LzolYnanHa16yGrwlu5+Y5LOhV
IH+dgR4scDqKsVOAdRWxyC9HS8LJcAHkr4dIZ8pe0hb5nqc740jv4mDjc9eX
3E97+3yqUKHi/ovZ5vzf6c3ymelI2kn6AefyAlDLMXoyDHsAWn2uic0+gBbY
bc/SeJqOWXLuKvVWed5q+LyD6+vkfi1+P9cYgwa5ORV7H1P1iYzTVfNaHeWY
Tvq7gYa5D3ndLhp7KNYddix0Vf3t3WuXnvT2OVWhQsX9FZO1mf+1O9NnCfhc
v9XXA/gxjDgXjjg3wXFOzHi5OMa5eQ7qcki9BRvXyNnNfI1xPZcBB6VcVnzM
tcYuPjMBuTLkr3D8qep4mDsjY6CtK4tkujrKPbszDpAOinUtEe9QLMyovnJm
7M9uraq5CRUqVLC4ON3/iLMs8SfdGQevdSTuxF7mQI4vztSDRteJupIYnMsS
eSvW0oQ+2GGsvbm1+ptei3PLmKblsLLGTu5N8NkK1BBnYt9D6Oqmof9azebD
xsqjCcz/wzzsYO4x0mc5TNopH+1I2uNpT9mfd7qn7nc9P7ur5mFVqFDx0PJ0
/5POsqRd3ekH1toTdpDeLIZzQ4VBFEPCUCc8UcnmIaBeNstxTqupGXJOPQfV
a3Yc/2xyzqpr7Vxy7itzOjubj3XBrARgHeiHUWvC+69VscjpAOuG8gPIQO5R
1Jo44j8iLZHv3p6qzzl6bcn9RW+fXxUqVHg/Ls0OPUJzvec6Uw5cssV9SHoz
DxLwCgHsGC6CXkSkNvc105is1edYH8LI01wyfkkaOZeB8+l45jZxOpf0GrfA
OdAQ02PO8LmwqVqOdXwOFvJq0JoMFQSSXusRyud2kdaodwnNwyfHK9O/v3bx
rMpfVahQ8dCcrfgPu9MOLdhitpFuyolgHmLwhD8ZoTjnPBmBOSLg3KyZz0k6
OOMMmJSjyvo6h/49LhOvM3BDoR/G/mum7ukE+uH6RNaDhfy1Mpblr6Xh+LvC
DGx32n7K6baT9oSdpCvDp/Sya+S3vH1+VahQ4f0429fwle7MIyOt0e+BTsMD
nG7ghJ/eiyiPQv6EOmGYbZV1JZJ2zq31FDbmrYZ5Cak3K/oULmlmDLARexZC
UyfV6lA/DN4mNcy3bqIyDrUmgHVDBf4EdM6gq2uLeo80hr29sjjU8tqNS2eV
1kSFii0eF6f7nurJ9K1ujXib5n27SU/6fvRCAo3aaGkYzlxB7R8wBrQe0CvA
epupB6HlnQ4dvwyz+4Y5CFO9TtYZi3lY0XsVmrpmmAlL1nycJmvimWddOdMP
Q00RdDHQf7VDnS7iHeIsT65yd1b+0fqtG6onoULFFo5r510P92X7BzaHveXp
SNxBc7+9WKMbzD9GRmk+CD6/gCcwYw8zWXp9zszXTHP90qOY3Tdr6jZo8Azz
E9yzU3h0cm9OnPWv5fsmuBcx+prQ3xXy7T7LEc7p3ie2uO03eyz+/reuXlKe
dSpUbPEYKIj4Tmvk+6tQ2wJO15uFc65kuDiEOCnOTVbGoi8T+P9iHmnAI4ZT
YkZf1N7cpnxUzIkJPDNgm9xvlbge6Fdc3JsT9XQ4J8H3TGDvVfchxty1MJD0
o6fJAdKRsJ00UY5qP75r5LJr5PduXVlSnE6Fii0cIyXH/4M9fke/Pf5Dgjq6
TOhF+Gk4N8FxDmp0zBddn1N1Cb2wwbNEn39wS/xN1o+4ZG4n+J7EEd2iH2HX
+xHMzySV4lwKmaxLwN4rzN+Ow/4w0NMVBePcGqvT7SFNYW+RtugP7i4ONX+w
enbq894+zypUqPBezNpOfmGwMDLVHr/dA7Wt7oz9pA91dIHIk6AGBvX/acql
zH4lbu3RpPnluOVyGHHN+DqGi7Ju2KXxQv49gHWtmXy3TjrzWsfZV7ZHR3g3
4exraRjO+aNPHcXqtphtpCX6fdKfE1Q/3Zz/bW+fZxUqVHgvzvQ1PD5elf46
zVvXbbEfsBpdtg/q0gA70FMYvZmSdf85c85prq9J/Qfd08RU13NYiHvD98j+
65wzCv9h7EcIjQnrvaJuuJLNSIBnHuj+YEYXZiSAn7bFvE/ak/aujJYlH7h7
6/rj3j7XKlSo8F6c6av9VnvCrpttsdtIV8oe1ouAmf6SENTjgmYN9GvIq9p0
DZ1LwizZQ9Mt7YYQ8/paH9WAdxZD3c5l6NXynyt5mcyhHyeb8Yf9imwXrNiN
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
GuqikLcCt+5I2olzFeANAx4BMDvriKVBn7cn7FrvSNxDOfjexV6L3+BgYUTF
SGlc2ujJ+LSh4ujM4eLoguHiqIrhksiWkeKIruGi8KGhguCRobygocG84MGh
/OAhGuOD+UHTg3lB0/Tz0/0nKGfM9Z8byOWPJwLgOX/0n+vPOTbTn32MPvrN
9+UcW6Afz/fn0Nfl+C/05/qdpx8v9ll95/py/J0DecH9Q4VhLcMlUQXjFcnh
U3WWd+cdpX91tr/ht5bGOz+/enr88Vsr5xX+qfjY4tLc0NcH8sND7cd3XgOu
0In1uMOEvlf53tVgzLvGtT02oJFLQE4DOwA1HYch37PqvQFTLqp5ZjqMeGLW
zhn3Psj1NWlnziZ56y/z+LrnsY53bC4sQ5uBdXF+Ny3zOqjXVbIdYdB/1bxN
Crm3CcxJAL5l+6B+GHhzN8U30F/3MG0dq82lMKwDXztj7Gb4R3GvU2Df8e3E
TqMjZe/dnsyjq33Z/ov9OQFLfdajq72Wo2t92b63+7N97/bl+q735RzFvBj6
53B88B6gQe9thz2wo60v67CHvgc8kDMDnwT8hRyaBvu65RByffZ1+nvT6ME4
BN9ztyf94N3ujAN3ab693pN5gH7u0Dr9Pejx/VYHC0LPj5REjU9UpzbMNuce
p3j3wdn++r9bmuj6/StnJr+4dmHhsVsrSwrzVPzSgt5Pf60782go5QPXgBeA
Xh9zVeBxhYHoDz4GXnIVgsfFY68RZtvZbH6WNKcg19R03qX3N41Ypc1a2fU6
mT7zpf+czfw3tbxTmvv/2I4PfVd7lr5DQuhNkONlMrwTvVjB6WritT2IwxTb
BsFfHfZIQG8heY+GS1AfsFP+3E4DMAt6PoBj6AEDGEKxBbV2FJeA88HfBXNb
6F3kS4Efs/4tPZYHeDjmvzm+HsqrPODvDvss6D3LgzlzSSg8ekbhsTTc4ywJ
Y89poNYPXgc5dXEQYLOHfRyMXgXDxfAaeC3vqfDXjojXFAZ74L1D+Sr7GfT7
R4roz6Afoy9pQZAH50To7zmQ43eXcr6bfRafa70WH8oBAxyDBeEhs23F/+Pc
SNtX7964ovosKv5Ncbqn5tedZcej2hN3X4O6T1fKHtTq0/ceakewR3iS7SOc
4B5L6CXXlMp8lsy+wFrtS/bxNfcVJA2cIW+0bPhY1gRvOoNvNx73Yzu+jb8W
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
NIG3G/L0B/j824XmmvnBzPGZkikxUyL2R4JWBnJYyon7so/gPGJn6r71sfKU
1IXumt/29vWlwvsx7yj9zYHcgGx4b0DdCDRKkHNhnorXWQzjETV8b43YQajN
csnXhX6P168FK5Hn4DWvc4eUE8nXkrjPa3Uw68brR8qxvHZ8bRcO66sC9wI8
s8W8T+wU41CDA/4tvEc6xP3lhvExmM/phzLdGu+dQn8Hd0ic4nW4Cs7jwM8J
9RmsNzrNPe70fDWLeRtL/49P3PmXODP0c6e4vx/0ZsdxV24kmwemWId9iZTd
9G/xwfJAfvieG5cWP+Pt6+xBjOXp3kcvONs/e3aw8ZnFweZnF4ebnz0/3Pr5
86P2z14Y63x6eaL76YvTMLvc/zTMOK8ujD959dz0E9fOzz6+tjR/3+gZz/Q3
fH24KDK813JkvTv9gIfNcfnzvVzcc4TPquJ1Rd9feF+V9HHGer9F37sg12hs
VtPrTFxB5EVSrce8S1X305T2DjrMP/ceHR9ew2tIcN0hj6P5KdQ12xN2ojaO
zcMFcf9MrgPhut2R0nBtZt9ZGs79SsC3hGtoQfPGdbkTlXwOFmtylE+DBqSO
6z+aeY9U6nN/Ys8/nvNM3eevntXtsCcL56csGmcPoW8DOuqejIMe9H7N8nG6
2yv+8uri7CPevt4elLjsGnxycbDh98YqEj4YLgot67Mcney3+p7pzz12ZuBE
wMxgfnD/SHFkk7M0umy8MilnqjYtabY5J3S+vfjQ6Z7ybYsDdc+fH23+86Ux
+3+4ONnxpZX5oc+tnnY+ff3CzJNry/NP3Lh0+rHbV84/euf6pYfv3rz68Pqt
ax/bDN+l6Z6vTtZmHOpI3LEM3tyQq2K/oZhr40SuVMM0CtjPg+vKsLfGNA/F
wzArZZff4+K5rGMz5i1yfiM/6vtTrYbP3fvjW1gfEX1JMhB3gIuB5rcl/G1W
28z1JcMlYbqvHPdHd/IdOM7SCPSdY5gmZgTEDAHXwsEMAp8XFjg3KXQ8Wu0g
neGcVjv4JJ9/i2n3ENPqTdfweh09P5DDwjkHTgc10s6k3Z6O5H2eHqt/0uKw
7Svexo/7Pa6fcz16bqj112dbTrw+UZNSNVwQfH4g59har8XnJsWHmxTvbvZl
H705kOO31p/rf20gL3BlqCDk0lBR2NJoScTi6KnYufGK45PjVYlD9Pttk7Xp
xVP1mQkzTTlBsy25h1xthbvm7cUfzDtK3p/vPPXWQlfFS2e6q354urf6788O
NPz1uaGWP7wwavv15YnOL1yc6fvsytzg01fclCeemXjy6tnJJ66fdz1+fcn1
+I2LC4+tXTz96Nqls/8sPp4fa//qZE3GnqGC8HmYJ+rP8fVAXZzN/kTiNabt
5WpIYnqFZtZz0P3FLcSotbVoeYnuiaTPUOHXND5kuueL7+ff6xLvd4fwtLTq
82PiY28cX+JyYl4Vck3YSQjaOEf8h6glgZob5p+IYeKR+2qeitQwTfQY2ByV
PrMwxuer0H+Y1+UgP2Ozw1xHAjjXksH0aq2sZv/JP/9ipo71YhmvS8JcHmct
QGNHzzv6IJw4hj7+wK07UvafWeiq/J93bq7eN7nU/Ra3rlx46kxf3V8M5gVZ
ejIPL3Wn7/f0Uk4MWmz0cUDfBjaj05eFPg6oj0JfBvo69D+E+USo8afu88Du
5m70vd7L/K9TQadGPw+vSWcB9QUW4Jl4xNNP8XOoIPjMaGlUP8XL+qna1KLZ
Fmuqy1YQ5G4v2XO2v/rtxcH6F88NN//DhdG2v7zgtP0/SxOd/47mzs+szI8+
tXp64nHwELt+fv7xFffof5xqsAa1J2w/A8cEjQPOWEOuCn298hi9p8drQKLO
re9ZNdZo5BqL23AflkPKV0y9NrdD5gnSoynPMdTY7/Xx7boWDDgU1IggZwLu
5gBP5USar6bs03c4Cj6Gj/x5WQximTaHpeGZmCEV38O/j8ckn53C+hz8XcAn
gR4fPehbM3SP5k/y+XfonA5mhuf4jnDhZYqaE6zVxeDfAHrXMF8H82H22G3r
0405oZSvfMnbeHI/BuVOT043WL7nLIuzDeb5ewZy/Tyo5cTHY2xG4ATztO5H
3YAvxiA85h5DTQ/qpFAvdRQ9dvqtRz30Yw94U8IjfK7Pyh77URPvw2Z+wA+H
zS17+oTeKtt3nXLG24O5x27TPPnmYF7gtaH8oFXKHVcHC0NWh4vDVoaLw8+P
lEZOj5REd9P8uW30ZHTTSGl07XBxVNVgYXjTQG7wSK/V7zbkV2KOS+hPMU/l
Pues38B17/DeEu8zhz5zMG/X7+3a7Kh2Dcj7aSyG2ouBBzgs0nvbmLuIOrVL
fp978/iiJtcgZrnC8L7UEvE26aK8GDCP+YxG4fymVlurZL0c7JtW8I/Rj4lp
wRAHzbiInnSx+HqcEa3RcW6G6+bmOMee53rbT/z5Fz8L+DTXEuMMRR3fIwm7
1Sqi0bcfcA6uJeALMHtCr4cul+PkX60uTKo6nSnO9Nf8CeVRbehnc+KYZzg/
wAP+CUM4a8i1AXy2Gh/z2Bwi1qDz2es0TxyhA6W4CPUDxEfwmoDP5QqtKH+k
GAka734JJ9ELDD3ADkHNW/h+eZD3ZSL3Yzp78AQDHzDglTD/x/fioccPza3s
sR+iLh8wFue4Stn+aNSf1nK+ANcQ9PJs0oyDbXP/I/29KXIPaW5Kes8b7vFa
PVv2DZHv9WZOYNF+tteOb+PXV2s68inIQ2FPDcymNke8hXwe5hfQowNrm3xm
XZtdZ/q3Cb7jEL3T+aPgbWOVgsOxefZxPvcwwWfkzTNd6NEOvW/UX3zCz79d
wr/WLO5Nn8Z6z3BOcD6W5a4498/5HFwn7Yk76HUUsDJWkRyyPNX3rLdx5X6K
2abs/2usPLZopAA8sUJA/wkeWagDFfs2Qa8uvG3gNdyXC/UDI+bA1zCtFGqm
CpkfDtt5EsSD7z7RPg7Ca2dI24nC96JwXMWvCR0WeGvzj9nPwNcgdwRPREf8
dg/6jlDeAfxwuIDtHRzDfVy8pyr38VozpFkdU/4hemHa/dvK37fWjdeD+Fj6
Xj3/0b9Hf53F9DlzDuSF48PnbVmIK8DlgPPCPQtmHNrBu5LmrcDtodcg8kzE
N45xkyasY72FOM71YvkeMNmvQ+d0iIlV8ZpHiMA60FXgfCj4w4hZrU/q+Zfx
TnBqPh8r9uVOil25FUxPB9ch5ESoMUGvZehJ7O0401//e97GlvslVtyjvzZe
eTxhpCQc/f8oTnlGSplH10gp8/VCD3/4uJhHieT3JQfXEDBdQSjuUACcZK8P
ZZoD8XO0/Sfsc8PF+s8f5t8zDK8VeCswtCRUe47HED+P/q2hLt5HeR3O5NO/
d5/FBznmCNeOoKcSr/lAzQl0ElB/wveTuCfze6+maRLaAaneLF7n1u7HG1+z
2a6tjfd5PY/ReYGXj49zmmxuFfoygEFwr7DHf4g5EehJgN9DDVznX3Ec7+IZ
zlXzjyuZvnW8SvA6xtvGy2OlGh3DPMxb+c+bqInTPJPQXwRmUppSWA9cmi3+
RJ5/PD6fKxReV+hFn6rN/YueK5zTUc7nIP8BnIO5FDvejz5ac3dW/Xdv48v9
EIuD9V+Zt+X5jp4Mv+Y8Ge7Bvhnfs4kadeyXiT3DXBvA/QLF18TrRK/NyXc6
jYmvi+D9N/F5fL32Ov5Yph9v7KT+vWJPlHgd+169j4f+YieZFxDktLibK20/
zk7i/mjgCjV8hquR7+PiHhVuPm9tnM2R78tSvVl7f1sM71WmK9DzFnEPl3tt
LofxuVkz5fXjC37B9fhQF4P8Ec4f9JKaQl6n189H2G+FOQbmxcc5WhXzFhKc
bpzj1bjgdZUM68Yr9B0RAuME9gm+J/JfxDkxD4H7cPlsK96XMog81/qJOP+m
44vaAc7hYN7K9MKI+9WcH1M+x/oQQXh/FzUb8IlpCX/HM9NS+OM71y9vac/1
G8sLT8y15r4+UZs0R7EDMW4c/FVPcX0T+PhzHYDAEnhvO8vEnvWoDY+s1yZ/
LHzCog2fH9Nq0NGadkrrx5XrNWv0ShR+iaKuU6735th8UCzXEoWR3oxDfIb8
IHp2QY0W9b81x3VdHPe40PaRSu8/Nw+tFizdv8W8t6yp0usp+m4G/Z6t5zzm
1+sev9b75vhMQ2LBfTZwnkDXAecfuFt74i7SEPwaXkN92b6oi0Pv+EqRn7JH
wEXRj2DcTH8uclVNS8JxTq/Tsfod2w/G898azukg6jkHl/oRMvY86OffcHw+
4z8n9qk1Ms+7KdFrrY7nO9Si2FwE98ICfzqYT2mNfJc0hb7hmWrIfuPGpbNb
uhdxabbnmzSvaKP5vWe8LNLD8EfoNnlfrDxW74vJUcnfs1zzxLRPos8Wq30d
/xbiXl0h7tcMm8CLAa8BMesjrouqGOn6iOM1m1ipti2urXjk7+jPDfc1mr+C
/zZci/04lx/EOAffqwo6SzHDZfAe0t6r/H3Jwy19zW23GvppsmelnqvIOYlV
ek/rOYx4f5t9Le+H47v4fgfwbYN8FTRsMF8E9wtH/HbSGPwq7nGAPhJqSbB3
YOo7VEn4VqHX5PCRe+ey/ms0znlp97YK/p6r0N9HzH/yuFanY75YjI+7uGeM
S9O5Pfjn33B8O9eTNGewuV7075T2p1Wx8wm5DtZ56L0I+nPgzQz7HaEn3hT0
umeiOnPb1XNzW3anxNK441fcHSUhFDNuA8+iuYOH3U/1GjHLJ0RtJZZrB+J4
rgL32xjj/Zz7Ruv5ihTVsci1WY06nkW1Xm9mfzvjx1PwOb4DlO3GY/VXzR+2
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
bHd3KHrLaZ5MgFeoM4/AWaTRU9wPXWAa16CPnpS8hPExTPs8vuaUjocsl43B
/oQ2K4H+MseZxqQhRavBzku8/747/6JXImoo4vzzHFXUnZkfSQLXjxzXNNfj
PFdlew6DcNcG+Cj0ZR7G3WqgpWoJfwf/VvUU3xoDX6PP31x12cv+zNvYcy/j
0kzvF+dask7MNmesIldrETwtQ99dyfdQuoQnkdCZ2TZ/Hxi+ZpM/b6zBug3+
+OI9p3M2XVtu1eu/PD8wzhQan8N7BjgIcHq490FdD/4Pbq3f8DEfX855pOvi
nv3/f5Hj2/Tv1/etMA4O9zm4vjBn5XPhoMvBGaLEnTwP+imp9n2R5kXvoh4V
Z+mKxG6HcB3POMaNcP9g4SGMfLuUeXCKrwnPYSf3URf4B1g3wrFR+HKO8Z4H
aiklPd0M+j6naH6BgB/utnv899/w/pfu95CLCJ937oPMdi5mavVm7Lc18jo2
79+Bngq0WPD/HRO5Ks5ABmF/FTHOcgT5Nszi2SiXa4L7UeCrpOboS6Q1drun
Lzuw6tywbUvti1gab/02PYdzFAvuUizzzPP3ub7bUr8G3FoOadXvX9J7wfho
0d4X2vvHoV9z5r0h4mcadeN6X8v4/vn5x8c8oDUL74Hwvpjh890u+705vrf/
/7/w8cV112bRdhKKGirMPggtCerri4LRewu0iMATIA+qPfYSqfJ5gTRHvIOa
e9x1A7tWYf5ZcDGsHzAcw3lomEEuDUXfdA3btFlofU56RPJWH+GYp+031HYc
RmoaFeb7HM/nXrlvIOQicN/mGKL1Lu334PwLXLPz/az2LO08C+7mEjutNV6R
ofXhcGaV4xtqG2qOa75Wes+BzXiDzgfqpr3ZPqQb5hspl2uL2Ub/LixfrfX/
Cak4/CPSmeazMN2Y8/7l+ZEtsyvi2tmxp88NVe+jPO4mfV+vU1zzyHt4DY82
4Xkj7m3inmf+e2/G8Uw5gpyXanVe3ddrg25J/jni+3/e8e36HOasyFsMe+M/
5uN7+///ixxfDo4DzAc9TdOgAh8G/GCauSC8lrpS9qBOAfoPUNOG6wc4A3A8
mJEQnI7tt+H4VSxhWLHwuwnVvBxG+G4c8fXhYsnLodjo68B8IUJZT0PkxkzT
znceCt8ZPvsKngzNGUbvGc2TU3+PG3WDUki1GS1f4fcHbUe1xtP0XdeiDq2H
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
15ykt0DR/OAfuj30yIVeuXnsdfMaa5sTWSixP4/POWozRWOTL95+nMGB2jNn
Dk1TXJvCGg5nSjosx9xpcGlw2ybOCx/uc3LwI0FObv/CwW+2lWcv6Dm6788/
/fijWyYnF6/3roPPVWVdObbjio+RbL82hz3Y3ZK8n64ZS/Ymxbwkyrf7/Z2f
wArvwTpw/N/u+IapfhZ77EMb/H/MQ4N+TAfUC6MOM9rXq7/F2lBzVb2DzRCQ
Wt8qr6nHXMM4531WeyLadO4XPeOKo72+da7X3aPeCZ857DX0P+xf8BTjU9Qj
yic9mNruMG772J8I3jlut8vFs6jJCt49yji3et4TrFUwXz7/KdYGiYHuZ966
x2p1IQ6DDgy3+x1XgRYZPJJe4A4HDy4dTOwD5iEX2LR6DPs70RcguCdc70XN
5xE/8qYy1yhalmler3KCOKPaPWBjvqyT+abtU3xSrR80hadUx8yVr6/xuj/o
PuQ9cWsamaNWc9Y6M+vJOZNZW5Z6y0T+3YctT5k1TvANsbzDdfyvB9i7Opj9
DjiXNfAA3DDt0sntGZNfvXDs3797reeW6Nf/TXzuquNzLx/dcb23Oc0zPRFr
hT0cPG6T+69Xl8/FR/zF+s1jTVnIZxWkuiPMGDj+33N8P/MpxK3Bgzb4k/jZ
Ad5/FvM8rR/C+sPX+tme7VVZXrdlei2fo4t1WYjRFOdaLf/tY1do7qXP9SR6
xallmMrYtQWxq8MVYE6NwybEqIhVkZ8Dxm0beXdq2+i7U0XufonDOmhP9ji8
Y9//jIf5+qqZMl+i2vFBcMKq2Y/xFgu1DMS8XHPc4w5LoXkFZ6mZK7jIXLuL
1QT/BpEDwk8A8bHFuszrMacHvjdO6yATfE0XtRBgC2u+xBlZx3ImU+dM/DGd
i+GR3d8U9DC4f8wey5Hfx3kCvrJGnPOCrzdLXXliVFt+nn8H6y9rxVPpEHKR
mc8Rt8GdEec3aB4OPBr/M84Dzg+8sfbOevxkW8XGIS8dr/vX/+0W5XEB5zpd
3Lpn7cvHdlzvaVFdSZRTjzWstr/TfR0TeXRdvdFzvc0FiXpi7BkZYrU4Jhs4
/g3Hbwo8T947L5GXC76OuTJvuUF9ahvUR+igejayF32Demyu83XXS9bLX6la
MPNO3x3XIpYFHzrErLsWeZ/ykBu3nPhc5ugQ94H3YN8DM5qoLxnsuNYvGZei
n7/shQdSOx2n2zbmx6lto+5ObR19V6pozD2O493jMPB+1Z88SG0xcFHWz7VP
Vnplwf3AD/c4POQ8Mfe+ldMf4X4GPkKPLLGw4aHgn+Ce8r4lEgOD94B3Nmic
C+zjcn87Yj/45jVljmK9Azl95LzgGQqssYUeEC6rgawbF2ohvD9eFriXPi6v
GcvrAbgY6y7ALtZfpAZD3slaizt+xmjJU0IDp3E5aj3A7INLhxDb0IOy3/Fa
YDx48f5Fz/Y1ZIy9fjR/4c7zVXn3v3rh+B/3NwZ9OTjX/q2rpyodzu280qO6
ku54Dzbbvo3jsmRMFrzVYm6T5hnk31P3blxbTHCcgePfcPxm1f+SuxUkPbrT
+Fy3emrSD61R/R3J5TZ7r7MO+mWIN2NHFLuyt1L1rb6fn/WI5epZskw9zKK5
WvShW6R+5Qu1BjjP+5YwRwdfjE1TyT+wVw8sxZyVZ6y/KFUx+SHH3x5IFTts
2zbqrlTBiB+l8ofL2joKmHd3aofDvJ3jkcOT+iz4HuoYpQ4jyyb+zN3/GXN9
xEMXC1dMAi7+PFU+5efSZzZZemorHD5WTMWcbPBEwUPyRMW/GscB0RMAvikx
MLQWgoOynmEcXBflBg8sAaYMIbbgfyNO4r7mBRuIQSM4F5X5sRWokwzzP1v8
zNsIr2QNkYX3WjaE+UYuh2FY9ZqXhEcCdDm1Ll6vZdz+FP3+qhXfqmY5Djfr
iXcb1kw8eHzbyud7j9X8xw/fvPaN/safL5HPffNaa1XmlWO7WG81ftHbHNUP
m8IeDXsxyjHFuaobYrL8lOnBEns7LTZLxGwDx5fj2zy7RvsbohnKTZEWWH3R
exvDfZuhEsesXeqb5mdDxDq66khfYhp+63W1ekTc/+XrjIt8PaJN/cx9XVDn
4lCjmqu9RusmSJ+R27PgUcA68C/ohndNuJccDthWAJwb+sNUzpAfpHIG3Z7K
GXx7atOzt6c2P/uD1Gb32Gb3XN4wwcItI90acWdq68i7HBd0fHAU4t8fMwYG
Rywa8xPGwsVjwRF/yrVj3L2OQ7o1XhZ4o2DnA6nSSQ8wZi53uEmsnPRz1kwq
yCGVTxp/BG/E3O0ILxFXI68InQxjasTW4JCIox2HrFYsrcb9uY8nH8ctY+/H
JDZ3t1UzHyP3lfd+lMfhMf3tw/I34W91mI7adYnD/d3gs3Oe7mtY88LHLxYs
bLzcVDbK8bf/871XX/rWr3/11i3Rz/Xb49zlb15vq1l85WjJuV6badgcvLrD
/o48MeJ64A1cJez39BmW3hu32XL5yTgt1ocNHN+4WuBxN53P3hjNHjCMM/9g
rbN2H4i8bNUvErO+6OeouhLpR18beTSuTtYj3DpbHmoRrL1qD1irzQ/cKRoT
P9eVei7xLTnme8cnMvaTGaHPMG7EXt495ReMX1F3BUblD78jlTf0B6mNg76f
2vDMban1v3TL3Wb/8vt8bKPDvk2Df0Dcyx3iMG/oHfI7w+5IbXH4R5wcfqfj
hnemtrjbLSPuShU6/CwEFo68292/W2Jkxsm4DzzU9dw9xMXtWMDFcfcQF1Ej
2THuPtX83S/reawHyCeBjyUOJ8sdp0RPW6lbZQ53KoxXTn2IC/F2hcNJYGWF
3Z+qP6MnDksxC7d4j7JJeqvvjVvgGbU57vi7qEX8aarY/e3FDte3ub+9YtbT
fbXLRn3q+NvO8zVb73ir59wf//rdN79S+Gbrg9e7vvnqubppV46XnQaf8znu
5gJfB4xnyftZU7E+IuYu6fFW/Lzt0YjDdMf7OtaatRie3OLH1/kR3ZE+JMz/
LAhzVzy2hV6Hbj/XMz/MgGgMM6P8fM9onorNbaV/muboQj3CfOg0R1cZZlbT
p6l8RZjlWrYsMRPacM5mDHovum1zQ//45qmsD0LDRqxbKn2VyI2jR6J88s+I
J+BhFrsWDBf82jJCOFvhSIdZ0Sp0+IX6Bbic8Lq7+DhxzmFe/tAfEQOBh8DF
HIeR2cBOh5tYa5/+XmrtU3+dynrye6k1T303lfnEd939v0qtefK7bn0vleV+
XvPEX7nHvsvH1rrXZLnXr336r1Pr3Fr/tGAv3nPj4O+Td+bgWOCeir9c+rfk
A4P9/3Zn8nbEHYnnwVfxu8DxXPf7ubjveOxmW0Pkf8La+AyuB3/N60HWU+5/
cn9TS/7STzoayhs/fPP6f/7ko/dv2Vrqb7M+fKPnG69dODD6lRPlL/Y2FXya
nM+WfwN3CZwlP/GYx4GmJP+JMSLWYyQxI47dYsy4xY8fzT8OGpGAZwndb1qM
6udNNWrdwR7TOZ/mlS4z8XK8roRxK3COfG5dFLuuFR+heI6r9zXL8HPcz6m+
5Fyp8jnErCUau0L3aj2vntOpjg76/PzprC9y5soaeNIN1d7KJxgDIr9GnBsl
uAX+VfTcj1mLLWa86XgVOAtux2nsibjz+fu4dky4j49td48Vj703VYQY2HGb
rY6jFTq+tmWU4Geew5BchyHAik0OQ3IcJoEfZjusWI/lsGu94hjXU4KFa93t
OuLi9/Q5ed16hy8bBt1GnpnzDLDu+xJrP6uYhzgbWOWOl+84at5Q5Z/DfihY
PAwxuN0XfC4YFvBRbuXxvOF3KHfF/3EnnwcGCu4Bz3/o8NYdd8idqaZN8z45
X7Ot6sO3r/+P/Y0z/b0+fLP3669fbHrqlRMVTX5GVLT3ujVe6k7gQLSX48ei
HFPMccKcv8B/iAGx5qzJPDpu5Etf+PGb+uH4PscX5nLd/PznJ2eBKnezGe3d
+LnB8E3qrD52bYjm49Vv8vOruurFU7hdZ6uw9spaRPDjTs7FyfA95uewStVH
nbMixN+sTeej+pnR2xXroJe1OYdbRNd6VGciN64exRx77dynGK/tmCBYBlxD
rQG5MtPRIQ+FnNfeWY8zV1U9+1HywJr5T1PTv3/BM6wTQDOCnDzquagjUFcy
V7QmzJNpfoteAtMeFo+oSQ8xDixB3In4j3gpeIr4dRtzfncRfwsddwRnBF5a
bEyeRtxSXIrwKk8xiz8bJx0h8XSB8VNwUNwffZfoajSnuH2s1JyhLwSel0yQ
GJX158k/Y1xbpjEuz5PFxHpbOfvJVN2KMS9dPd34i3evXP5Wf2NNf66P3r7y
tTc7j9x+7XRlle6zPtFlxbN48zTPFM3rbYn3+82W5q5aIi1/nHdquTn2+NdF
ea24JyCe4/ePOn4CRyLuZlo0fz/iUr/x/9fn/G2exy0fhyaOH/rsPWY1hfPc
Hel8/ex2e01zNBe0MTcV5h1HNYd4BlU8eyqanddpcSv4XG2Yj9dhM6Poq4aZ
KuYxlKl+QeYxvFK8MnSuCnvL0+a6Wv0VubpTOnPFPM2Ps/Y6ib1IzRkydwV5
+zLVC+9CDxi0c1N/ztw+aoXAqdoFT1FfDByDjp91TvbADtF65TBZqgVBbyzW
AdNaaK0SfbP4vXrWLN3P0M5CP4fZzLjvHq9zj+9DT9TiZ1P7Fg1265lULfpA
4c/m8LRmgdxWO4zdi/zivKdTVe62ivfdcrhdNfdpfVxuuRz2YlUveNqtXzqM
xnu5W/e+tQsHpWpwDHe8/Tgm+hXwt6A2jb/L/p/l7n9DbRa9DdD/ZoyQW/TF
Ya20mu5wvrYhc6z7jLL2djeVfe/Dt67/fn/jTX+ut7uO//m11r25bl996mKn
vu5o7/U2Rj1FzWH/2z4O2v6CkH/X+CzZ05m8H+qLSVzqjbHQ4sAY21pC7Ohj
z9/m+B6zCzRGLAgYFsWLfubw3/v/5yV/P8q/GU/rjR5LxqGYbZyX4GVhxnFe
QvMrPar5iTqDzW43Dmf11R6dqSxakhzfvx/qrdbfavMLjM+t9z1gHZ7XqQ9k
ZWbI02EG6O4VUo+Als76z0uWaI/EEvq4tXpfddGZsFdqq/ieS55OPOLg8Vi/
dLDqSu4ndwFX2T3tIdYpwcWg/dpPXBtEfKJmA1iGHldo2TJHa6++as7Qw4n7
0K1lPef7+HF7SLW/0KkdWT/erQmcQw8dLz3bfb+D9jhg5eL+DHd/msTdedIP
IX1W0p/Ahd9Vr8+jfB95P/HNU89P9YTy750nvqEn0nsntphnPHpWcX3QHlbO
NJsjuQDONJPzKrN/pEdN8gPy9x7bJD5z0P6d2LJgy5tdZ/63j9/7atYhiHMv
nf6T62eqF7u9+1HgEXEcdSMW+H0f8SAf2xmeJPL7BREHS/K07hi/Iu1F+twY
e8/eNE7XHb0mcfwERwv1ym7P5SyfH25v+v/HMSP//7i+GfQd3Tqb3ea2B16W
nOPeHXM5r3kLGOZnHvvYNDfMSI5mhRLjDtrjgc91eWzb5PNz3Tpr77LWWm+c
dyxzSy/ZXCl634Z5K+abJvGr+Qapns7mRqi3h58FZnq6IunXJKfDzAjUXbNf
IP9CjIkaJXAOHk3gcdbXijk5hmvWk0q8Alap9wj7nNRz7rDvE5CeBXoyrQ+9
DIfh35mt/VzoUQA+Ab90/s5JxQw/DzbuYysKvao2U1Zyj3N07uycMJuMXgA2
r2yu90Hh/Nki8xkRXTX7SHakLZsttHOBnx15RjU77PWPfvavVc1iq9Z9mCdg
39hU/u8nCua82XFg2+S3e87dMt6Z/9D1qyvn/ujVtn2THXd4z+29Ps8/TGPf
HHhIiPvyIp4S30ZY5GuU6Xj3m+LMKEaN9WWRRs3PjEnXraW9T9wz0Gv8K01/
FvOoOK/fk/5cU4gTQ99B+nvkJp7vbYq4mtUOIg7XHfE1610QPcjmKBa1uNTm
2Ije1+YkS0+X/AyuJvHppmjme47Pz3HmaDS7tcP4nM2kqrG11sevwddbPXXV
R010JtLzaj5DZ0uCN4f3p9up+1DrEeQe6qUOHILGde/sx1M7xv7UxaoPUKOG
vgX0pUpMOpScryVrjPopTZReKvKnKfSRo8cwedNk38eOWsexqM/qGHutJvO1
4rk+XX3UzWtT8Ac1FOqe6bW5lLUW8V7SW+/HtDx4MJUs8XMzztr8a/NfsteC
/+K6ULE81KxjTzt63K2U5T2C9Vqis2z8dUXfz47Pv1HnT7epT9YZnRtuc2zd
taXvWD4xr+3K8doHPv34w6+MPjheH7x++RuvnT8wyu2rd13cxLhVeEW+5x7B
jyMZp3Heu+dycd5cnov9g0Ksd3OcM02Ff63xwaaCv+P4tgqi381Xbpbr+VW3
9bRHcaHFf9YbBQ7Ennf1Ge9usH6CCJeinJjl/Ls9vuUmtB3dxKw8H092p8eZ
jRGO8fib5fimezuYq/k1/D25Ied2QHu5jLdFM+D93GTjcX4uhM59Z09EttRc
NX7tjHpdqaHT2TgyHwc5ujWcCXpRPdUvmE8kesFMO1y6zNcm2tSzm55p5k9n
8/S2zBKfJhdbspd/2i9Su56/l/oyxKqIU9GvRC8lx9mkl36qxGL0DpmpHh6S
78N8G5mTg1hvBrnZcZ1/A/+1k+iTz5fHT5jXHL01ZZ42MIE+U+ojfF7nLMhc
Gas1R3NoqjL8rC2vo1aP4YuVMmvL+wa71yHu5wwx9buyGTsX/fshDxoeu2Qz
OipX+3kdF/dIj4od/4LPl+psL9TCdfaNeQQC78zHHlh+opAzvvouVueUvnJq
/1++d737lu5nvdniDNeLDU+4/feu25d9XqNgt8ZnvAY/xK1J3ao83xvlqUIs
KK/vJWYFrOrWmm4C86I8VjJu/gcc3+LQdFxpyPPxH3UXByPtxcGc6P5m5UWb
BQdNj9ZgMeRmj3Wee0XP90TH8PUB6j3yiH/d0e916wxpj1eGY5pfs54G69+y
eDRg3qaItyV/x+tJPJ/L0VnwgdNxhug+m823Nsx5r14T6ekyw6ypNA9Oi1+p
NYlmH1qfhHkNnyoCt5gtNYjMMfSgQ60QGlfUPxGrorcetQTEpZgTQU8Q9f09
5WdVz/Mzqm02q3lLYmYffdiQCywMcw+Jj5z1JfOqEUcC487sWCwcDPO4zReY
mJUZzfyK5uDszYpm2IimOjHLpmqNn4Ub5uLYz2tY45Hcp8yYtlmG1l9sv2O3
7ekzc/YGXxk/H8xmF7FnZaXwa8erWy0/an0p7jpwtmTVa+378ua92Xn6X/Y3
7nzZ62/ff/P33mw/dIfbW287XPu0O8I69hP5PvE4DotiMKv9NQVe43NaVq9o
SuNziklxzj89n285rd44j9/0dxw/rkcmcGSz52uCCzlBO3tgo/a2Z9NnV+ak
Z7M3ynwpbe4pceJghDv6XgET7Xl5//Q48rL93BBea/Fmt/qax7XR7gPheXlu
o3/OMAv4dTl6nce0+uRrutRLmDrhOumF6PCzlKP78czk6miWaFUUv0aeTecr
QhwlfM68OBer/63pTBbI7FAXK0I/B0/MCvWfQ7yKvifEsciZo78dsSn5l8Ov
Vnq5zY88L4OPm/dq36Y5MuKe5vA5y3quz5tJrmy+zO5Bn5p6j9vsVvKtKpnb
RW6rc1njmdM2g9o8EGRe6/ro/rpQ2+E5xvdpvc6SjH+25+0943xpfA1aFx1/
bTKPyhyDYmKVzS/KkM9EfWXI62xOBHvwZvW589r68ouVt/36vTf/WX9jz5e9
3rx85Dtuv1532PGxw4e+wIHUqzGaN9BLHLM8e26oB8beQLFO4oYcXsTvErNb
8nyev7s5/J7P9TfLcXqjGmV3U8C27gRXS+/vDL7hXcCwOtn7opvN5gysdj9n
fR1/BtbRlxLYoJjXRdzbGOYtEAM3eV2a5cAuR6/vUp7FeLE+R49reGWv2ajY
6t4fr7PHtYfhcn3Q+Sa4mb63cbzLiccjfNPZEJ1YPl4NqyPic5x1aLMjIk7i
fdV1rgv4D+qvMvM9+DadjfN0O0K+XHBupsw5XD5M+qAmP8heevS6Qjch874m
0uMXMabFl606u4H4tFPum28lc/pRbYBY5+sCcxTfNE+/XXhcmNu6TGY8IN5E
3Oj+T85hBf4Aj6in3iDeB/g+4BpYL9dCPlcX3Y9v68Lr5b5eX/CYu+X71Mln
bp8LtT51mlOos2uu1oxUCyRYu044ODEvqhtpbIzrDz4LXm8M5xC/btW+lE2T
P+06WLzw3Svt/6q/cefLXm93n/jXDhvOufWBi636enz8tTkV56Ms1xT/3Jvo
QRKdl69hRPyrV3uUQh3RcCqdJ8a4GWnFNGcf6o7hb+xqCLypJ641KsfpVL4m
3xnjLzbHNMq/m5e45eU99kXXWtOf6R64vH9D2BP77Wf9nhtW4nuNa/k+wVSp
eWb77/HlaJ9c3me34bvuV53uD+VmhpeXExxuY8B0z+MsJ6dzcPz/L7m5TuUh
7VqTYL9rdZh52O5j16AdZvzq58SEWQmhV2KxxybiEXAuf2aqac0YatkqpvyC
GhLofRuWDSX+wW8NHsSc1+DwCnwNv9tmOLcreJXbfIqEdwAwsWjuTeqkOutm
u2r8yOUkvw9uytwYc5JryaPwWdg1yji65DRCXNCVyBFE/N3nR6N1wHLANn9t
s+QgDob3SdzndVQ/O/tMNe4IfM99bvrdDb734gWN+NW8AnnulfOe3DK7D7Nv
z5ZmHL/csPP2j9557SulM3n35bPffulwUZXjT+91K5/zeob0ODDK34WaYF6U
i496k9Jy/x4zyQ03h/e2nL7VEdGHrs91+RxXbqg16vLfO8aFm8h1OoEr9dkh
HlW+5vl/je3nteG22vImOm+YnEb3eu1aH7e0x5qzfevDz7iP99+/3vcZMA7e
tz4cf3+kW9sfYkfPq/aH9zIs7Kxd73HJ63vBB8AB6uV/vWycUedQG3e47DmH
cgrFY3v/zgjD+bfsV06n8Zr9//687M28IX49V2Hz9zQ3VG7eTerFabNyMOsA
vpv506l7Q60Bs3CgEUa8Cs0I/CRRM0U+jXysKOgwyMF2aG/ZLpnDALxr1Rmy
kosST2POyTas22a+5TJjVvjgInJO1iodTjMfh1ycclieE3JqxRzNz/prbJQP
8TkLu68Yhtueg6bXtppU9LtRD3LI54b3wrp8MOLolpfg5x04YLt5a7nPSjj3
atZEULMFjoO3tkb6HuYt86bDC/WDc+WZS95/7aWvVN/re1fbv3nlePny3ubC
13saN/f5PiKLBxsDDtlzvcr10rlVUsMqP/davTHCNpufHPBqc6h/JrAsV2ug
QQsmOfoczXtF1746690U/tOuHuHk+jXrEl5r7ZrjYF3R1xOjvLPPx2uvQO3a
4GFEDLAcybrAAWvDz4J96/T4IafTvi/8TR37onyO4o7HOq/nVQ5aF+lBFDcv
K7/rqjN+l+25q+Ci5YSENwqeWa01HEeOvz6KhwTrhCso1lVnBp1Jlc6Jj+dI
AOe0JhHm7clcF+TUThbOoQ4X+n3UG/bO/Bv2Y0ndYTw1tYhrT1k9FLNoigNG
Wexq82PCrGzJ/3FejPE3nbdgcxvOqGbtjM1pdTjJnKL7m1G7tLwcPjeeV+QP
EBvwOxjriKIaXfTdNX1PD7+7v+H77/uRY31RtMdMXxT1J0uPsl7LGzaFnKvm
X/x103qT92r+lHxuWepMyWL1BnTnn3xOdMQ811tmnXax67f7G3u+zPXBa11/
cK21dmhvy9Yr7vPrs+tUz8HwWfakcanumIOpHkM+63C960n8Xm7ifWI9hK9t
+py95dYDV+uutzg08lEjd1HOZpzF5vbtC9qw4A8ufU2yX7U2ZlrY3aKZsB52
XuN9rU1+r125np/vHMW74X7AvMAf14Z++Rrjhje+rsO/bl3EIwV/Oj13jPDJ
+BpzOiE/1BHH0harR1qSELuvT8M6+dsu1QSdCa8NwPSqND3dnkhXURH1hDE3
FOoRErfOY23gqNtf6MuCJ1PVLOlRhccwtayOZ0BfJzUD4WRhhth8+j2dibCO
GMelcXHxfP9amyMrcax4HNs8aubmdE4hcO6i8jnzpuI5A454nJMYpbchysVE
tXK/B3yeJ2Baouc4UT/T+w0xdkb1NNs/kSag28fEOf7773XepgXSHCo/jzLJ
lZpem/lR1J+Bc+jNyJ/5wRsdp/7nr1KPxIdvvfy11y40f7/30LYLDmeAc31W
owy1RDvfco3xn6+vK25WbUaUwzgor++2303kK3LkuQORpkNz85fjvFP0WFwb
lX2ruSW/XzVHG/Eu8ZDUGQjVogW4uEfy6XZ7oVI0SJKvWeFzNnKtN8xb4zHv
otX+q632b8fL8vwn6DPW+tg4MWOLf2OYF23eSB4rrd5Xa/i3XrW86xP/7w3/
/77A42Ju26G59Q5/HVCul8DOdeEcqgdnh3k2mZcJ/elsBmKG6Mh2R16cpcu9
Zhh84oxqhU9yVsRk1hvQe89Zre4W8wahqSOXc3GV7x9A7lzzaoJbglN+HrP5
3un8Pz9TsUh7MICXxdrDoLwQNQxywRLhc+eJc6vk89Xvi/C5nKAJimpyvv7l
1+ZEDEP+ZrzN977cRCvuV35SqxDxu8AHQ69yl17vLf8q/lqhN5l8jnPGV4h+
2MXmyEmC64r+RvSE7HPLm9537Uzjf3nvetdXKnZ956Uz/8tLR7Y3umvFp+58
Cs6xlrgpWR+MtBKCeTkhnjwQayqS63L8M/Orkjv3daxEDkl5yb4NUZ4ryi/t
CzGi5z5xL3qiTqjz+rw+M9K6Vqg3uPu+8zuBeIba9mXKUVap5mCV/H6VakT3
auym+x61yEteO5WZijVWSR1V0F9drI5+rjLczNK/X/UD1dH/VRvhIHEv4o77
DA8F90LdJOrtSvy8TmPqKBa23HZtwNlL1fHcQ5t9mCn/f6VqaP0cCeVzpWEG
osWtwJ/jDsdQZxAv4afopQufkeas5+g1bPOiW61/qli0cn5mqcWvOiPwjJ8T
uICPywx605gozsU1Cf6+8kFwzTLJz51XTYnxc+A+rqcWM/reukhb7uNW358S
ci0h5xN7aOUmMC/4aSX7mYXjhVgJOZvgyaDazvqIz9VuUL6v/gs6r401V9UM
t6of4En1dkYdAv0h6MN96UjlT9+8fPqb/Y09X+Z671r7t19+cVeh4+wf29wU
02xd9lwr1JS64/5wxaxuXx+KNBA31P6C5kKwLcRXpjOy2rlxjXarIfgYK8SB
EjMG7++L1cY9Mj2Pv6Bz5i96j9wwx0r6b1YK/9CcD/JL0PlDi3Rht+2FVUHH
7nleps5UWO21pQHzNNeXuDVtaaQ1jXDR8KSjxm7XCJeK9bvG+0zXa7hn+cH0
fJ/WUr0/SW0Uv0YarpCjk/e5pBoTzy+j68cl/X+t7/UcfThXeX1JW4n1gi3y
9T7UUaERhieIeabDSwl99ujRsjnRp7ZJzVTi1rl+1kQruV2Y2yxx6Hztt9D4
dlvQy6HucbrI+kulptHqtcFLpG9K662mKeH/6s4FtUf8jhuvS+vPa0jmXnwO
BnjXGPhdIm6NsSz2pknjed3aI9MV4afpx4MvtORl7Rp1Sfk2vn+sQ7jPwjwW
WnXmpPc7zRWcQ46uu7lk6KsXjvz3/Y09X+b6+L3Xfv/Ki6ULHOa853CoL+iw
VCdr15F61YOZlsF0E/uDjuKyr/dli06izmKn9dF+S+41rpoQM/k8VULzEXSs
QVdu2nHLu2WGfUit+Grpx9Ee9POm9yoR3mFaCOaRiubrXpvL+p7sh6XaV7gi
cEDVyl6wuHdPho9zL1BHr8dXLYbwv5DbMo3GRdXQB3zMDF4hN1vGAQ3rqhWL
LCY2rWpNVlRXjnKVtiJc66hNP//BdzM+94HPCTe9YHPBlD+c17ifvZvU0cnM
HMkPzWNf6eH141lfRe9Dzewn6LHUkjWOXk2Ia7EXTxfFfGyezoaeq7WFuTI3
sXi+1hhUK7xNe9i3yYz601vN32Nu1ANh2pIFqi1Zyu8BPk9ew9z5x3fIatty
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
XFPQU+xwru+VU/Xfe/96z1eqHyJeLx0p+a+d9bkHHcZ94q4/fTEHD/FMyPl0
RJ+J1/fH3wOv1YU3dMg3Wd3R6qMW98T94cLbViS99Y0P6Ww98xVs25n062GM
qV4NxDjktzl3SvtfdD6TaIpe8PX2w+smUM+K/iT0YGK2HDxw8Tz3IWenzNKZ
J1G/ebHo9M9of9KZnRHmwp975xKtZSwJS/+HttKovqGzAM5qvyhmMcj8gJXe
15u5c+V5vn67O9Qx7FoSuF1mqNVWrfGczLw0233eNPae09ioJittT2tdyPKm
e1YHTaFybVyXeP0BzqG31Z3jQ1njUg3LhxDnMJOVswvnPkHu3Og4BnAQOVE/
d8u42RbjZDPVAz3wb+IZMW6qn8F1HNeszYJ3J3QmBPOs+TN9LtZ6Xs/Qi26x
8mmtk1eGeg+/yzfo0OWctqv2UXKk4by27w28ucM4mM+Fron6/rIiPXbwlWhP
xEFZ0jtjep69og+1GMg076w9OLxmDpp9XsrlMA9ns3A5zERrctdsxCmNGaM+
un625Tsfvf3qV6a/NX29drH5z64cr1juYtYPHIb1JWpvltvBZ268fa/UEtr3
mo406rPaE13vjbtZ/KV5eNNnnIvy9p6z+XzbcqmV2zy9XTZ7RTnTjnh26Hzt
bZwbzWWarT7aM2WfGI/LmSxzoDZM9LOieN1z3wfMZIGnN3ox4bGBnnP4pEHX
Crw7rhyB8ZV6ptmMJx7flvUoad+RrOAxZJzirM5gEcxbGnQsHveWad5ccX93
jH2r/PK6GqvBVcY6lYhbV5kXd6bXWQdNcmZ0vQp6ZtG+ZAYs8H7qxsGNh6tW
dbt4lQDnkIfDHkMfv8yMfphYh94IzFPF7FHM9MLsLlx3yLFt3mDudGKa/9nh
2NFcyTNwPk6OrBdx6z6fF5Wbcy6Oe52vc1gNQ3vL7HpkM2vkurEq9PhZ7JHu
kV4Z4naeEz/fIeozjHLPvl7kPdijHMBezal6vMz01xLxhslIxD0XdT6E8bg2
9cIy/2DguOVjcE7Qh4LzCq+YgzrTtilz7Lm3e879WX9jTX+ud3rO/MH1trqH
2ms3vO74+qfu+tN3qSZwuUtRzBN861X3vzea8+Hz56sibIu4ms9ZW0yq+Fa6
XPf7sqhfcmnkV7vYz4H3+jf6kM3X+R+mu5rt66nEI83bHGfvi8Sq1JFkywy8
Qy42RQ5Jrnsj2WcuPmmPknc06AyqQ5j/mT1R49ipwhe2KOZp7tx7djO2tb4l
1eNvD73okt9b5ONuxrXEvKV+ftTZUsvnLffatHNl8TUhnEPTMFuuzDQriXqt
zmW9mOAjaxK871JV2JfMqfrnVicxINJkX0DMukc5uHo9suaH/Bz53Fiew7pF
g1lvrZrxSGrP1IdSe2c/xhmH8N+Ua8k4mUm4UWcQcmaXzUmdorO8FNegB8Nn
CD6eMzHBy/HZcj6rzlOlJ4rWJSTvMJ8+AOz103wp8qK+p9k0PlprMR53IYpP
Ltr1xLSQVfZ4qJFfqkourwuy3p29q6M63Oow98FrQq3/RmOf3fp583thXnzw
G9U5HPBfwnUBmmBev8fze8sZ3suedVzuuU+O5s5e/aurXV/J3FwC615q+187
9m24cKlmzcfG6S5F9YTE9SiqkXo+vcf6rQLXwPXnLOPQZZJ/Ug/as+rlY7Ph
jKeJt0R6PBriUps9cFprqKdUE3naz++VWXrHXbyCaxtqCUfJDSZJ78vGieRv
2FPIDyE2bcwYTU0XcnLgHdWzH01VTns4VT75QcaweAxzz5tWj3bx7TiZt7dx
MvO85A0aI5m2gRi7VeNm6vfnU5NsMa7neDsE78wvN/7/z+4K+b02rWfEs/Ms
vj0X1XDP4XrvOXOIac+naVRsLkLQKmcmeMjFasVB25+Vq9NWZrT/gi8CPmvw
UvEqmUP+hWsI9tqBpYOonwOf44yIab/gtYSzcBYP4mtcXEVefWj9OJnBmv08
577i+oLF855tM1ttXuvz1E1wBjVet3Gi/3w83tH/SbVCinWtO4Kezve92jVj
z8qozm+9Nqv9/3whjte1Ns77lVHOeXfUI8fzvSqZl/Yezfo5xe+3O+IDZSvU
n35Z0I7stBkQc339GZiO7zd4MWqrqDnwvC97luf3eMGcts4D23/4VY5ZbX3w
avcfdh7I29levf5dx9v6Qh466tdUDnehMuSEvKf27sDZkJM23exZm31ZGviZ
fWbx/E/vlb095Nps/onEgzYHRWoLp3UuQDyf/KTmnyUnLfmbo9rfh31wmLrw
cdxP0OUDuxodhjW670TDsiGsQdTMeZI4Vzrxfs7h4/y9xc/Qd6MxY0SqOWuM
zKdy36mjORorKc87wRqt5M+DDmxOwkND/HIXel5Bv1vsOfzvJYtDfOvzenrf
zp/OEzxXGtVt/exP9fqtWOG5ncS1MQeLNDuJGGy11sXDXIiEdlG1zFYXv+i5
etTrCn1D8QLprXTnH3lPxKaYz4pcAHJ0ZS88kCqf9CCvI6hLAOvqFw2inhg5
u6ZVo+ndBI0P8nfQ4LVwyX1oVRAPH8bP+lni+iNrvPBCh4fgdsdy5LMBr5Oa
7izNr0azcYzXlWmPX7nqn329O+gfxcNLvte+D8brIlcEr2WrGVkcY/gV1ZPs
taaztOMjT+F1Utgrim2tOxb5Hn1+5wskH8Pvt/tu8zy584Zr8sEVQ12sOoS9
xfsXPt13tmLD8re62r5yM79utn79zvWvdTdtG+Zi1y6HaX1Yvs+yak3g1nui
a5V9lvSot7mSK3Uu73JfW2yL56UoX4s9/8NscvXcKdZ827YwB8A8KZD7oaaU
9YVZOt9Oa6mqNziq+WnJ4UzidZ69L25PcM+Ay/G6N9J9H4Yzfqp3WIY+c2ha
90z/m9TOCfc6rHuA+7HW8TrEtOhhwnUSPFD23HjiHeOoTcIf/J5SPQT1TN5T
Y56f0+756Q7xAzeNnuXyrH7LGNeuCdqf0ZbQsMT6leU+L8CcmdUy4vzBHo1t
K60mtDoR58aavaBhVH8EfQ/jH+eiecs2iwV1IPMSBs5h1he0JMjJVbq4tXTS
A6mS5+936z7OcbUcAbybgHUH3fUEWkbklpoy5FoErQ+XuzY1Zz7Hz69lzRj5
HHCfOljBQ+AfeJ7wP8U6xLD504kN5m9Cbk3tsORH4znT59K1jsavyqUuLo8L
p7bXWL38fNkK7wHhubbdlsk16Dz9BOI9Ej5Py2e0RvW1M8VhFjVyz+RwqKki
RtnwPL+L5HArh/P84bqCcw5/mH3zn2rtaNj1/f/vk4+/cjNcf9N69Wz9d7oa
C8vdd77Pfef7LkX565CfiD3IVvlruf+M/Ryo5BxjiUUXBu9r1fCe2T5fdSCS
ZzsV9W/zc9VZTqLxFQ2k1eEYnxZIHZ0LcSQ4HGPUSZrL0XoD9JKqC2/KHM04
1fIXwK/9wLj5TzFWRY4OGLdr/L0O7+5jbaJqlmgi6hc/K/Ur9/vYZy3rhFcI
h5ik8axoHKS3YqbX+3sPIeqP53te4esUdm7ML9zXbgPeMaaNMO9sadCuIM/p
92qZ7T3bZ7rHKiw+Ul7m6xervcY+9KMFzZ7X8lWEfOu5CquNa00c+5Nx6yx3
HqaK/ho45/ALffzkc47L7XIYt2PcPcS7iinC6/ai/9WdX1xnUI/FtQf6E5xr
6CKQT8fn1bRyJM89F/INq0cxxwf9BLBQuOBYyfmtk7wqvgvHN0md1nzvzOOO
30leY5YELWRpqAmFelB0XfHnfNlNnjMutizCLvdcyTLPyeUYmp/1c3708/dz
zcJ+YD+v6uJYa4A2DvHJOul1aMoYwVoDNNkHHIdDrArtwKENU15r3bV6yvVz
R/5Ff2PLP6X13rWL33zl2O5R7vv8sVt9wDtf74n6t33fZrlp2+LvguSVzpQE
3a5od3VPb5fe6jPmG+t7s5PrpPYxUi9vWnfqp6ZxUYeguinGp5ulHx91N+R1
DuP7vWECc7LkcFly/W/OHMX4qJEYN5QxU5277tUS455gHgl8rmzSz1LFY3+S
2jr67lSp24+YsQysq5n3BHWv9e6aiXl9Te79wDGYW1o3gbh61DhEnvAImy1v
85c5c69ofuSvZtoUxX/VOduMwLYI66gXLFHflZ2azyMnWRLqtmVxTm+51+qZ
Ns+0KoZX5sXi60e+F3dV1Ecc99qJJ2nMa8S3dBH9y7Enod85smE88wLQ7NTO
fZw11wrH4Xa5a8f2536S2j72p6md4+5NVTjs2z1VcgTQEpM/z3uKfAT7tX7R
M9y7xD93XUIO4eCyYeytOLhiCD8H1hUdpjasklwqrmXgfIxrN0yUuTvUJU8j
XpxO9IXNC9cc710s5/aMn/Gjs7j9Em067yv/bvWvsTllod4u3sZ4Tj5X07Kb
v573nFLvAun/mMkYxerN/rrtziuwvDkD12vhcHXu3EC/w3O2EOdrsPvc1659
9cKL//sHb1wd4HJp6/q5hr9w+6BV8zt9Ur/T2NS072XB76hNuVuoiwLTpB50
xvclaG6qSOerb50T6gZ2rdI+nuOq57VrFzma5tpe9LGoemrp546+8CNaP2Xe
JsviU4lRca0HtjW470SD4Zvj9fW47jnMAoeodRi31+0xYJzNVC5+7p7UtlF3
p7aNvov3S91+3DPtYe7XWvWNPMA4azjrW8BRHP/Ievf3qE7iuNYqjpvmf4vW
Z4vmeO+gG9c8X7NotVzejkU+lqGmJsH1Qh2HnqG7BPfOav2WOgTLk1pe2/oy
LC7z/OxG3QpzUvZceeCI4ptgnsJLyI1OFxnOiYYLdWxcE9Dbunf2o8QzcOUd
E37qcO6eVNFzP05tH+fwznHnsskPcs5rJXsnBPNw3amZ+zh5do3DPngBQP+D
XjLGZe7zQ62Iy+3tA46bAwOBe8DYZsf5mnB9y9I8Q7bUdAXvpkf9sObrNMf3
T3AVaX4Y3139DrcWRfmU4uTPrX5uWfj5lJ/RIxh2Sr/3p6JrOXUhpvHUGvOL
qoECrqEPH7G55ZTJcfE9dv9v3cJB5ML0+ZvzuPvfR3/atjs79/q5F//TJx++
95XVBf9d643Oo9+6WL1u5sXKzLfdd/xT8LrgrRj5ufk8aZhT3GqzinV/emwr
Ev9D8aKQz/eE9ihIDDo94Fq+xKAncqdqz4LqDOgVKPU0xIiHydUmSA8+8m64
vmWN9XkbxDCoozZljAwxquP2B9x3A/kLXP+wN/a7PVMz/0nGVVUzHmXtAXmj
son3p4rH/MTh3F2pLSPuTG11t7uev5c5dKlPPEKsA9fA+yH/izgKuIrvJLGX
OmPdUzr3xXJ2p6Kc3aniMCNBZpiC75r394Ko3rwgyutFvRjai3bG4iCv1Vsc
tMkW43p93rKgW6kIvgP8jL3/8kqvVzbuZnkq+sKULU34plPr4D2BJG4F3wAH
Az+rnv0Ya63lFrsC53AdGXO3u478JFUy4X7Hox/gayqxkC9wmEee5363es5j
3Mdc7tzj/GNvC/a5tVByrMi/I1ZG7Cu9ACP4XcB3A38TtBfQ3B3T69Axzd1x
Fc6MMGi25+Cnts5OLOvJPV0YXus9P9VHwPfnWs7FvFVi/XMck/B7LroZ5pPX
S92M321qA0ZIXUdzLbhO1zm+WzvvacG4+Yj5h149vHFGZs+Rmv/07tXu3+9v
PPmnvF670PSd7ubiUvdd/tR9p/t8v7zHN+0p1Zmatu+875F5IZr/YXTNst5E
yWFN5XX/mGmkNiLmnKRYNlGxbLzo3LTeRj2I1hFwbWvIsHyNcDV8D/DdRixz
QHOyyG/zO6G1BvIAxwfoi+b2DPYQ9tOeKdiDP2etFXWIYsc1ELfmDv1hKm/o
HcQ6cA9qIxznq0ReaQ78hp7wOSXgKvLlh7Ke499O3Z3VZPOnac5O9CendW+Y
X1rr1uAn6TXHCS/d+d5D3PLorTqznnPrIw2O9eGGnF7QrJz1/bjLvGaRq0Tq
Gd5zr2y5z0/5nruElnuZ6oMkphZdvuTJoeXCXsVnA94BDsZahOPLu3EdeUHy
n0VjfszzunXkXanCEW6NFMwDDiJ3gDgXuLfH8cA9039Brgcd3l537jFDrIoY
qDjouF+1YuC+eU/yM8ZnbfVcXOfAhfAZtbCGMVa0kRukbnE0W3V4WkfnXIXN
k/V6K99TWVP156m+5gWdn73G9Mqm+0Mt5Ki9r+aNg1ZdtZyMQ8aSs4kWYJTH
NZ97W6K5N3x/50mepcpxXpyL2vkutlg5tqXrUNXgVy+d/HeffPT+P+tvHPmn
vn515eLXXz66+2H3fb5yXr7jfdJnIt9rq5W2aa1bPPvne25+emvwBrEeRcZu
qmkDxoGbI5f2otd+TqT+J/C08Nm3KLY1gaOtFr0b+dNKzb8uFw5PXHPXOn4n
UHNaJN8L8Hp+N5CHQ4wK/uawqVpjVWKc20OMV93eQn58h8Mz7EHwudwhPyTW
5Q/7keMebg+iFutet4c6MJlLin0sWrBh/PtYC0Qu3P0/3DubhNcdt3yd76tQ
rlA0J8xy8X66yfmkYb6L1G7ObLfZCYFDW4zre9DS6rZnIp53hnn3ZYHr+dy5
4l2scbBZrXF90OuDIm2+ah7w+ULjhnwBcW7h04xdUV/dPVXOM64l25+7RzBu
1J2pguF3pvJH/Ij8edvoHzN3h7os4ly8HjUMxLU476wNTf8b5XyPyMJ1h7gn
eIc8H/KujHMXSr2cuT33nQF+UCdk9VvUz9fKNZX6FORaNzwfVrbmRzZM9Ndh
3qY9R90f8CtbNX6q95PeG+Noqk/X3Aq+K02mc1o9KhF/HMT3eLHmWMDd5kuO
BXF87Vz3vy169pMDK5/rOrJ53uZTu7LueL2z9Y/ff/3qV14n99uu1863/OnZ
spWZ7rv/qWm4zHfc9G2ciV5k/aRzvF/YCdOyWb+1Xv+kH0FroY63ic/peGqf
qP9hPdTiTtF9cK0cEfE0ya+Roy0J3wGfo0G+baHkb/aRz0veAt8N4W5uzUJO
/DHuC+wTxqqTHyTHwL7aOf6n5BSFLqYqdHswb5jg3KbBt6cKHNaBf6BeWOpe
jz1bhV6x2ZI/J3eA1g65Ifc/UOuFWAl+T5tkHglmxKD3UvSr5q0W+37P8fMO
rP4s80ltxqlhoMa6mg+S/gvFQOa6F90Q555R3mf13JjvnTXOZ/kIz/ui2DfC
tlj/yHmDRTJ/hb322mNJnGNPhGh2cP7B6SomP0TejOtJMTidO8/5w+5w15Qf
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
l0Wudrx8j3v8sdggz9b8WJvuo7k/vXKq+tu3zrd949GtK5Ofjgx/ZY+FrvL0
HxZsXRmS67Vo6DBys+birkaO+3vYp5R7shTrFpOWJ2tISs1wzPGkptAemg2i
Zi7HPMqhNiptZeBuSy2/Ro5Lhs6aG2qtYd8fc0J36r0fkBqnUlvGTf0szTpd
iDPC3kL1UpfBNL+UWs51XHejZ/Un5OUKr0/6GoLWFvhsoFYf5HPxrF+VQnUr
afQFGfka72GM+zrDtMPBe2movwLa8VCfst8FxR2IcxC7YkRsE7GskuLahaOx
AnAbxxCxTsa9yoP4XIh9fTLmyfhnioN/BMgVSzkGSl8p6UUNuR/UyHm72ReK
9PvIz4t25xqiN2HfoiHSffh6+7GfPbjWq7VJvkJ4cntgyt1LZ77fV5e3+GRy
SJolwPZ2luucsTRZm/JOYiLXpjBLSCDNo7Fs78WjBUErb9dE+taeSNu9t8MS
v7qnJnf61daan97u7/zevWv9L316//bkkUf3J33+6aOvbEz7tzB47tR3WrKj
HAsCV57J8V40Blxm5IeKawDwyYBLkw96G5jffYC7bUpDHPdmKccDzg5qv4cS
xwy1gHaTNrzUVgZvGPLG2kC6aayRRv5Yzmpe2MB6k5LzDTGywRy/xmmt8a2K
ZRvYe3UDabaZdAMhhyOdNZopQk6K+um+i5CjBnGuBvg04vmoccCe02oHDjXN
WadP+kT+ga55m9KhD1JxrpP9wFFDj71RZZzrxXwumvO5GIxlFzCHi7NerKYY
d7E6lvM6Efsg1kH8q6J8r6+KYl4v/myMinN95UbMk7EQ8z7l+b6f4yzlduR9
SJ7tnewzIONca7I/9kalx0ZDtPvopeNHpg/1tHxjoo9fjT/G7d625/uqs3/U
eCh4ceU+94MlIQ4thUGrBvP8l4zm+i55IjCcv2X5gCVobXvxjvWlpbtcE4/F
BwWfTNuz8kxx8q/66wp+cO107atDvW0vPLxxcfJnD+/+1cW1P4ULTWWvNKaE
TasK90w4EmA3mOVmg/NlmMdAXQ+8O9TS5fksaWOQthRwdKQmCnCvcDdY+Tyt
Rv4i6p6F2SsdSeTo7lln0pDk/M+sGcl6MuRhtlHx0OqkdmS4E+eMG6gmRY9v
1mZA3hnpoUqfFtQQDFuHGvbHcIa4Fvkj0JMr8KM4B69B6pLSjo3IMWPdlXY5
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
Dp7MDHc+kb7H41TmPs/Ww/sFwn1aM/fuazoUWFIT7tpfvn3NSGngMtrBBV6x
2j1bTHML1mCBuIIe91jTSn1lQzMK9qmAm1IbZtYDXcd6y47ETcbHZGwkrVCI
lbW716r8TGlTgU4LaFmhHssK3umVsY382SFGg3YM1OP57HkH+Rvso+R5LRo7
4m/7pGzH+o7aaL/Qc6Wp/3qr5/SLE/15amhofDl49tnIpEc3+v/uWmvNL06l
7XKvjXAvtfh+OHTEa/4z0mL5gP3RSIOlhPl3paw5JXUFoBeGmirjdJZ5dgv5
F+jrocYe8TuqOC+D+FXNelMYx7azXtU2mokQ/2Mp/j34uyXsWQz5p8X3A45r
Nuj3QVzpOThbziBOzdjhTe/fP7bf43hLZtiWm2cbf3H/Wu+rvxeveaLfdw0N
jS8fw7euTbop8sMrJyq+31WcOP10bqTnyaSQtOPRPm3VYU63K0LXPi0RuR7G
GH+T3qjI94qQo/ExAntiJs1l6aOmtPjGYSnWxKizAjEMdFo2f6RiWTF7dRTh
fJRqUYxrXuxR7D6PPO420Q5xnucH1uKg5c+qwjYO1sdsrm0Gf6fCQx9fOVn1
T4Pnml/59O5NveugoaGBGLk3OOnBtd4XrzRX/pezJYnvnkjesaV2v2dBWfCa
HhFvRkWeNwZaAQTSnsKcD3I/M/wWqlwQYmOBP+3jokYV9ANBm4D1+gpMe7qw
y4uzA9Q0sEEdAtwBBs913hOGXRDajaPdNhHrnhX4Lb5/LNKjvDMv0vtyveU3
d/pbXxt9dHvqRL+fGhoaX23c7mt/7npHA8S81/rrCv75bEnS+x1HDjq0Ze31
bU7ZGdYQuyX/WJR3e+1e14HqPU73q3Y6jpSHrH5aGrTiWVHAkjHI91B/ymeh
0l+Behi0CYDHB700BOhXsXZfPmu3oH4VxEnQZNmydKwsZM3Tyt3rR2rC3W4f
P+BzpiE+sEDU2ntbsiPczxQm2J6vynj7yqnKH946f+qlB1d7dO6moaHxH8Lo
wzuTngxdm3y77/QLN840vtJfZ/lRd2nKb9vzohxbM/cENieH7m846J9xPMqr
smrn+jZR714uDVx+u2jLsuGiANtRgWcFm5c8tfh9PFLg+9GIxe+jp0f8P3oG
t+Kx0QL/JSOFAUvgeaMl21YOl4esGazes7Ebemwnk4IOd+SEh3WXJLhdOJYz
baCt6r/evdD+8qPrfc8//VTv32toaPxl8XhoYNLjW1efezR4ZfLD6xcmP7je
P+Xe1d4p9650T717+dzUO5fE7SW4PStuu6bCzPj2xa4pty90TblzgW8v0uN3
8fbcFNgpET8vfk/flAcDfVMe3bg0+fHta5N1n01DQ0NDQ0NDQ0NDQ0NDQ0ND
Q0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0ND
Q0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0ND
Q0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0ND
Q0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NjPP4f3WFn
KQ==
             "], "Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
Nps+W0vbibZzbOttf7Oj2LHsRHbr7Drs3to72Kfaf2ffZP/UwdiB61DqUO9w
x1HbMdhxhmOt41UnohPLKc9pk9MlZ9TZ21nkXON80QV18XERu2xy6RpDGOM3
RjKmdswNV5or27XYtd71vhvDLcatzK3J7flY27HpY1eO7Rj72d3bPd99u/vt
cQbjJowrG9cy7qWHswffo8bjqqe2Z4TnfM9mzxdeLl5Cr81eN73p3hO9v/Nu
8/7k4+sj82nw6fG19c303eh7g2XIimctZZ3xI/iF+s33O+L33t/Hv8j/gP+f
Aa4BeQG7A56OdxgvHL99/MNA60Be4NZAZRAzKDPohyBlsFUwL7g2+EGITYgg
ZEfIE7YTO5e9h/081D1UFnoo9C3HnzOX0xqGhUWGVYR1hhuEJ4dvCL8XYR2R
E1Ef0RfpHTk7sjWKEBUdtTLqBtecy+fWcfsm+E6YO6E9mhadGL0h+kGMc4ws
pmUiOnHCxNUT78TaxUpim+JAHDduddzdeIf4GfG/TCJOip9UM+lxwriEOQkd
ifTE6Ym7E98khSYtT7qd7JisSG5L0U3JSKlLeZsalroqVTl57OS5k8+nmaaJ
05rTSekp6TvS+6eET1k7pTvDO6M84/pUh6klU89OM52WP+3odN3pvOkHMwmZ
qZm7Mz/y4ni1vP4sbtbGrD4+h7+O/0wQIlgj6BEGClcJn2QHZq/KfpoTmLM6
p0cULKoS9Yo54g3iF7lRuVty3+bF5e3MG8xPzd9XQC7ILDgsMZDkSdoLLQpL
CrukLtJyqXKG/4y1M/pk0bIdckQ+Vd5cZAgP7xcUjopvFfeLg4prit/NTJl5
sES/RFJyYZbzrCWznpRGlP44G5/Nn902x2rOwjn357Lnbp2HzMua1zbfZv6i
+d0LIhfsWkhdmLfw1zL3slVlr79J/aZlkfmiBYsefhv5bX25Trms/MZ3Ad9t
WYwvFi/uXOK5ZP2SzxWCinOV7pVVlR+X8pee+37c99XfDy7LXta53Gf55hXE
FZIV11cGr9y1Sn9V6aqHqyeublzDXFOx5vXa6WvPVnlVbVlHXadYp6yOqW5e
b7t+xfqPG0QbrtWE1uzbaLZxyca3mwSbLm8O2dywxXxL5ZYPP4h/uLk1cmtj
rX1t1TbituJtj7enbO/4kfVj3Q7THZU7Pu2U7FTuStjVXudbV7fbbPfyerRe
Ud+zJ2PPpb1he5sbXBu27mPsq9wP9iv2//5T5k/XD0QfaDvIOtjws93PGw/R
D1U0Io2zGvuaRE3K5rTmrsMTDre1BLQc+sXtl51HrI7UHDU6uvwY9diiY4PH
S4/3t0pbe0/knHjYNr3t9snJJ6+2T2rvPBV96szpiNMnO9gdx88Enjly1v/s
4XOsc03nfc43XvC+cOhX718Pdfp0Nl70vdh8ye9SS9f4rmOXgy+fuBJ25fRV
7tXz12KvdV1Pvn7zRsYN5U3Bzae38m+9+K34t4HbC+4Q7lTc1btbdc/sXu2/
nP61T+mjPHo/7P6FB4kPbj/kP3z2SP7oY/eix9qPq55YPql76vH0SE9Ez6Xf
p/ze/Uz6bKC3/A/9PzY+d3z+858hf17om9zX/UL2YvDl0lcmr3a+9nrd1h/f
f+9NwZuBtxXvTN7tes963/Eh9cOTgZkfSR+rPzl9avkc/fnOYMHgoJQn4w0d
BTDY0OxsAF7uhOeENADol+D5YYr6zjckiPqeOoTA/8Lqe+GQ+ADQAAfVcZ3T
CsB+2OwXwCM6HFVH9aQQgHp6jjSNyLM9PdRcNHjjIbwbHHxlDgCpBYBPssHB
gU2Dg5/gHRW7BUDrDPVdUyVEeDf4IUSFrhkLFoCvRH0P/SLHr0egisALfD3+
G+0glsU=
               "]], Interleaving -> True, MetaInformation -> 
             Association[
              "XMP" -> Association[
                "DublinCoreSchema" -> Association["Format" -> "image/png"], 
                 "PhotoshopSchema" -> 
                 Association["ColorMode" -> 3, "ICCProfile" -> "Display"], 
                 "BasicSchema" -> 
                 Association[
                  "CreateDate" -> 
                   DateObject[{2020, 10, 17, 10, 37, 36.}, "Instant", 
                    "Gregorian", 2.], "CreatorTool" -> 
                   "Adobe Photoshop 21.1 (Macintosh)", "MetadataDate" -> 
                   DateObject[{2020, 10, 17, 10, 37, 50.}, "Instant", 
                    "Gregorian", 2.], "ModifyDate" -> 
                   DateObject[{2020, 10, 17, 10, 37, 50.}, "Instant", 
                    "Gregorian", 2.]], "MediaManagementSchema" -> 
                 Association[
                  "DerivedFrom" -> 
                   Association[
                    "DerivedFrom" -> 
                    Association[
                    "InstanceID" -> 
                    "xmp.iid:c731477d-dedb-4614-acfb-0da40319999b", 
                    "DocumentID" -> 
                    "xmp.did:d65337b1-4850-4d8a-bf95-8f2288215609", 
                    "OriginalDOcumentID" -> 
                    "xmp.did:d65337b1-4850-4d8a-bf95-8f2288215609"]], 
                   "DocumentID" -> 
                   "adobe:docid:photoshop:b62ee76d-5ee1-144d-8308-\
4489453cb3f9", "History" -> 
                   Association[
                    "History[1]" -> 
                    Association[
                    "Action" -> "created", "InstanceID" -> 
                    "xmp.iid:d65337b1-4850-4d8a-bf95-8f2288215609", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 36}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)"], "History[2]" -> 
                    Association[
                    "Action" -> "saved", "InstanceID" -> 
                    "xmp.iid:c731477d-dedb-4614-acfb-0da40319999b", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 50}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)", "Changed" -> "/"], 
                    "History[3]" -> 
                    Association[
                    "Action" -> "converted", "Parameters" -> 
                    "from application/vnd.adobe.photoshop to image/png"], 
                    "History[4]" -> 
                    Association[
                    "Action" -> "derived", "Parameters" -> 
                    "converted from application/vnd.adobe.photoshop to \
image/png"], "History[5]" -> 
                    Association[
                    "Action" -> "saved", "InstanceID" -> 
                    "xmp.iid:b83063eb-4655-407c-9956-a2c3d62a2273", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 50}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)", "Changed" -> "/"]], 
                   "InstanceID" -> 
                   "xmp.iid:b83063eb-4655-407c-9956-a2c3d62a2273", 
                   "OriginalDocumentID" -> 
                   "xmp.did:d65337b1-4850-4d8a-bf95-8f2288215609"], 
                 "RightsManagementSchema" -> 
                 Association[
                  "DerivedFrom" -> 
                   Association[
                    "DerivedFrom" -> 
                    Association[
                    "InstanceID" -> 
                    "xmp.iid:c731477d-dedb-4614-acfb-0da40319999b", 
                    "DocumentID" -> 
                    "xmp.did:d65337b1-4850-4d8a-bf95-8f2288215609", 
                    "OriginalDOcumentID" -> 
                    "xmp.did:d65337b1-4850-4d8a-bf95-8f2288215609"]], 
                   "History" -> 
                   Association[
                    "History[1]" -> 
                    Association[
                    "Action" -> "created", "InstanceID" -> 
                    "xmp.iid:d65337b1-4850-4d8a-bf95-8f2288215609", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 36}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)"], "History[2]" -> 
                    Association[
                    "Action" -> "saved", "InstanceID" -> 
                    "xmp.iid:c731477d-dedb-4614-acfb-0da40319999b", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 50}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)", "Changed" -> "/"], 
                    "History[3]" -> 
                    Association[
                    "Action" -> "converted", "Parameters" -> 
                    "from application/vnd.adobe.photoshop to image/png"], 
                    "History[4]" -> 
                    Association[
                    "Action" -> "derived", "Parameters" -> 
                    "converted from application/vnd.adobe.photoshop to \
image/png"], "History[5]" -> 
                    Association[
                    "Action" -> "saved", "InstanceID" -> 
                    "xmp.iid:b83063eb-4655-407c-9956-a2c3d62a2273", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 50}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)", "Changed" -> "/"]]], 
                 "PagedTextSchema" -> 
                 Association[
                  "DerivedFrom" -> 
                   Association[
                    "DerivedFrom" -> 
                    Association[
                    "InstanceID" -> 
                    "xmp.iid:c731477d-dedb-4614-acfb-0da40319999b", 
                    "DocumentID" -> 
                    "xmp.did:d65337b1-4850-4d8a-bf95-8f2288215609", 
                    "OriginalDOcumentID" -> 
                    "xmp.did:d65337b1-4850-4d8a-bf95-8f2288215609"]], 
                   "History" -> 
                   Association[
                    "History[1]" -> 
                    Association[
                    "Action" -> "created", "InstanceID" -> 
                    "xmp.iid:d65337b1-4850-4d8a-bf95-8f2288215609", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 36}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)"], "History[2]" -> 
                    Association[
                    "Action" -> "saved", "InstanceID" -> 
                    "xmp.iid:c731477d-dedb-4614-acfb-0da40319999b", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 50}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)", "Changed" -> "/"], 
                    "History[3]" -> 
                    Association[
                    "Action" -> "converted", "Parameters" -> 
                    "from application/vnd.adobe.photoshop to image/png"], 
                    "History[4]" -> 
                    Association[
                    "Action" -> "derived", "Parameters" -> 
                    "converted from application/vnd.adobe.photoshop to \
image/png"], "History[5]" -> 
                    Association[
                    "Action" -> "saved", "InstanceID" -> 
                    "xmp.iid:b83063eb-4655-407c-9956-a2c3d62a2273", "When" -> 
                    DateObject[{2020, 10, 17, 10, 37, 50}, "Instant", 
                    "Gregorian", 2.], "SoftwareAgent" -> 
                    "Adobe Photoshop 21.1 (Macintosh)", "Changed" -> 
                    "/"]]]]]]}, 
          For[$CellContext`i = 1, $CellContext`i <= Length[
              $CellContext`mm["nodes"]], 
            Increment[$CellContext`i], 
            For[$CellContext`j = 1, $CellContext`j <= 2, 
             Increment[$CellContext`j], $CellContext`n = Part[
                $CellContext`mm[
                "nodes"], $CellContext`i]; $CellContext`p = \
$CellContext`tran[
                $CellContext`n["p"]]; If[
               Not[
                Part[
                 $CellContext`n["c"], $CellContext`j]], 
               Part[$CellContext`l, $CellContext`i, $CellContext`j] = 
               Part[$CellContext`p, $CellContext`j]]; 
             Null]]; $CellContext`u = \
$CellContext`locatorsToU[$CellContext`mm, $CellContext`l]; $CellContext`mm[
           "setUBar", $CellContext`u]; $CellContext`aInvokeOnList[
            $CellContext`mm["nodes"], 
            "updateReactionForce"]; $CellContext`progress = 
           Max[1 - Norm[$CellContext`u - $CellContext`mm["u"], Infinity]/
             Norm[
              $CellContext`mm["u"], Infinity], 0]; 
          If[1 - $CellContext`progress < $CellContext`tol, \
$CellContext`progress = 1; $CellContext`mm["setUBar", 
              $CellContext`mm["u"]]; $CellContext`u = $CellContext`mm[
              "u"]; $CellContext`aInvokeOnList[
              $CellContext`mm["nodes"], 
              "updateReactionForce"]; $CellContext`draw2[
              "deformed system color"] = Orange; 
            Null, $CellContext`draw2["deformed system color"] = Red; Null]; 
          Column[{
             Overlay[{
               Panel[
                $CellContext`drawDeformation[$CellContext`mm]], 
               StringJoin[" u = ", 
                ToString[
                 AccountingForm[
                  NumberForm[$CellContext`u/10, 3]]]]}], 
             Row[{
               Panel[
                $CellContext`drawSystem[$CellContext`mm]], 
               Spacer[7], 
               Panel[
                $CellContext`drawOneResult[$CellContext`mm, 
                 $CellContext`mm["ui scale N"], 
                 $CellContext`mm["ui", "bounds"]]]}], 
             ProgressIndicator[$CellContext`progress, ImageSize -> Part[
                 $CellContext`draw2["image size deformation"], 1] + 
               16]}]], {{$CellContext`l, 
           $CellContext`locators[$CellContext`mm]}, Locator, Appearance -> 
          None}, Paneled -> False, AppearanceElements -> 
         None], $CellContext`locatorsToU[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]]] := 
       Module[{$CellContext`i, $CellContext`j, $CellContext`u = {}, \
$CellContext`n, $CellContext`nu}, 
         For[$CellContext`i = 1, $CellContext`i <= Length[
             $CellContext`m["nodes"]], 
           Increment[$CellContext`i], $CellContext`n = Part[
              $CellContext`m[
              "nodes"], $CellContext`i]; $CellContext`nu = $CellContext`tran[
               Part[$CellContext`l, $CellContext`i, 
                Span[1, All]]] - $CellContext`n["p"]; 
           For[$CellContext`j = 1, $CellContext`j <= 2, 
             Increment[$CellContext`j], 
             If[
              Part[
               $CellContext`n["c"], $CellContext`j], 
              AppendTo[$CellContext`u, 
               Part[$CellContext`nu, $CellContext`j]]]]; Null]; 
         Return[$CellContext`u]; Null], $CellContext`drawDeformation[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`su, 
          Blank[]], 
         Pattern[$CellContext`pr, 
          Blank[]]] := Module[{}, Return[
           Graphics[{
             CapForm["Round"], 
             If[
              $CellContext`draw2["deformation draw connections"], {
              LightGray, 
               $CellContext`drawDeformedElementsConnection[$CellContext`m, \
$CellContext`su]}], {Gray, 
              $CellContext`drawElements[$CellContext`m]}, {
              AbsoluteThickness[2], 
              $CellContext`draw2["deformed system color"], 
              $CellContext`drawDeformedElements[$CellContext`m, \
$CellContext`su]}, 
             If[
              $CellContext`draw2["system draw constraints"], {
               $CellContext`drawConstraints[$CellContext`m, \
$CellContext`su]}], 
             If[
              $CellContext`draw2["deformation draw label"], {Black, 
               Text[
                Style[
                 StringJoin["Verformung (x ", 
                  ToString[$CellContext`su], ")"], 
                 FontSize -> $CellContext`draw2["font size"], FontFamily -> 
                 "Arial"], 
                Scaled[{0.5, 0}], {0, -1}]}], {
              $CellContext`draw2["deformation graphics items"]}}, 
            PlotRange -> $CellContext`pr, 
            ImageSize -> $CellContext`draw2["image size deformation"], 
            ImagePadding -> $CellContext`draw2["image padding"], 
            ImageMargins -> $CellContext`draw2["image margins"]]]; 
         Null], $CellContext`drawDeformation[
         Pattern[$CellContext`m, 
          Blank[]]] := $CellContext`drawDeformation[$CellContext`m, 
         $CellContext`m["ui", "scale u"], 
         $CellContext`m[
         "ui", "bounds"]], $CellContext`drawDeformedElementsConnection[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Module[{$CellContext`i, $CellContext`j, $CellContext`e, \
$CellContext`dx, $CellContext`n}, $CellContext`n = 10; Return[
           Table[$CellContext`e = Part[
               $CellContext`m[
               "line elements"], $CellContext`i]; $CellContext`dx = \
$CellContext`e["l"]/($CellContext`n - 1); Table[
              Line[{
                $CellContext`tran[
                 $CellContext`e[
                 "x", $CellContext`s][$CellContext`j $CellContext`dx]], 
                $CellContext`tran[
                 $CellContext`e[
                 "X"][$CellContext`j $CellContext`dx]]}], {$CellContext`j, \
$CellContext`n - 1}], {$CellContext`i, 
             Length[
              $CellContext`m["line elements"]]}]]; 
         Null], $CellContext`drawElements[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`item, 
          Blank[]]] := 
       Module[{$CellContext`g1, $CellContext`g2, $CellContext`style1, \
$CellContext`style2}, Return[
           Table[
            With[{$CellContext`element = $CellContext`element}, If[
               
               And[$CellContext`draw2[
                 "selected object"] === $CellContext`element, \
$CellContext`draw2[
                 "selected item"] == $CellContext`item], $CellContext`style1 = \
$CellContext`draw2[
                 "highlight elt style"]; $CellContext`style2 = \
$CellContext`draw2["highlight elt style"]; 
               Null, $CellContext`style1 = \
$CellContext`normalStyleForElement[$CellContext`element, $CellContext`item]; \
$CellContext`style2 = $CellContext`draw2["mouseover elt style"]; 
               Null]; $CellContext`g1 = \
$CellContext`drawWithStyle[$CellContext`style1, 
                $CellContext`drawCurve[
                 $CellContext`element["X"], 
                 $CellContext`element["l"], 
                 2]]; $CellContext`g2 = \
$CellContext`drawWithStyle[$CellContext`style2, 
                $CellContext`drawCurve[
                 $CellContext`element["X"], 
                 $CellContext`element["l"], 
                 2]]; $CellContext`drawWithEventHandler[
               If[
                
                Or[$CellContext`eltEventHandler === 
                 Null, $CellContext`element[
                  "ui", "verified", $CellContext`item] === 
                 True], $CellContext`g1, 
                
                Mouseover[$CellContext`g1, $CellContext`g2]], \
$CellContext`element, 
               If[
                
                And[$CellContext`eltEventHandler =!= 
                 Null, $CellContext`element[
                  "ui", "verified", $CellContext`item] =!= 
                 True], ($CellContext`draw2[
                  "selected item"] = $CellContext`item; \
$CellContext`eltEventHandler[$CellContext`item, #]; 
                Null)& ]]], {$CellContext`element, 
             $CellContext`m["line elements"]}]]; 
         Null], $CellContext`drawElements[
         Pattern[$CellContext`m, 
          Blank[]]] := $CellContext`drawElements[$CellContext`m, Null, 
         "S"], $CellContext`normalStyleForElement[
         Pattern[$CellContext`element, 
          Blank[]], 
         Pattern[$CellContext`item, 
          Blank[]]] := 
       If[$CellContext`element["ui", "verified", $CellContext`item] === 
         True, 
         $CellContext`draw2["correct elt style"], 
         If[$CellContext`element[$CellContext`item] =!= Null, 
          $CellContext`draw2["normal elt style"], 
          $CellContext`draw2["undefined elt style"]]], $CellContext`drawCurve[
        
         Pattern[$CellContext`c, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`np, 
          Blank[]]] := Line[
         $CellContext`curvePoints[$CellContext`c, $CellContext`l, \
$CellContext`np]], $CellContext`curvePoints[
         Pattern[$CellContext`c, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`np, 
          Blank[]]] := Table[
         $CellContext`tran[
          $CellContext`c[$CellContext`x]], {$CellContext`x, 
          0, $CellContext`l, $CellContext`l/($CellContext`np - 
          1)}], $CellContext`curvePoints[
         Pattern[$CellContext`c, 
          Blank[]], 
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]], 
         Pattern[$CellContext`np, 
          Blank[]]] := Table[
         $CellContext`tran[
          $CellContext`c[$CellContext`x]], {$CellContext`x, $CellContext`x1, \
$CellContext`x2, ($CellContext`x2 - $CellContext`x1)/($CellContext`np - 
          1)}], $CellContext`drawWithEventHandler[
         Pattern[$CellContext`graphic, 
          Blank[]], 
         Pattern[$CellContext`object, 
          Blank[]], 
         Pattern[$CellContext`eventHandler, 
          Blank[]]] := Module[{}, 
         If[$CellContext`eventHandler === Null, $CellContext`graphic, 
          
          EventHandler[$CellContext`graphic, {
           "MouseClicked" :> ($CellContext`draw2[
               "selected object"] = $CellContext`object; \
$CellContext`eventHandler[$CellContext`object]; Null)}, PassEventsUp -> False,
            PassEventsDown -> False]]], $CellContext`drawDeformedElements[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]]] := Table[
         $CellContext`drawCurve[
          Part[
           $CellContext`m["line elements"], $CellContext`i][
          "x", $CellContext`s], 
          Part[
           $CellContext`m["line elements"], $CellContext`i]["l"], 
          $CellContext`draw2["results curve points"]], {$CellContext`i, 
          Length[
           $CellContext`m["line elements"]]}], $CellContext`drawConstraints[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`constraintEventHandler, 
          Blank[]], 
         Pattern[$CellContext`correctNodes, 
          Blank[]]] := 
       Module[{$CellContext`g, $CellContext`style1, $CellContext`style2}, 
         Return[
           Table[
            
            With[{$CellContext`node = $CellContext`node}, 
             If[$CellContext`draw2[
                "selected object"] === $CellContext`node, $CellContext`style1 = \
$CellContext`draw2[
                 "highlight constraint style"]; $CellContext`style2 = \
$CellContext`draw2["highlight constraint style"]; 
               Null, $CellContext`style1 = \
$CellContext`normalStyleForConstraint[$CellContext`node]; $CellContext`style2 = \
$CellContext`draw2["mouseover constraint style"]; 
               Null]; $CellContext`g = $CellContext`drawWithEventHandler[
                If[$CellContext`constraintEventHandler === Null, 
                 $CellContext`drawWithStyle[$CellContext`style1, 
                  $CellContext`drawConstraint[$CellContext`node, \
$CellContext`s]], 
                 Mouseover[
                  $CellContext`drawWithStyle[$CellContext`style1, 
                   $CellContext`drawConstraint[$CellContext`node, \
$CellContext`s]], 
                  $CellContext`drawWithStyle[$CellContext`style2, 
                   $CellContext`drawConstraint[$CellContext`node, \
$CellContext`s]]]], $CellContext`node, $CellContext`constraintEventHandler]; 
             If[
               $CellContext`draw2["system show tooltip at constraints"], 
               Tooltip[$CellContext`g, 
                $CellContext`constraintTooltip[$CellContext`node]], \
$CellContext`g]], {$CellContext`node, 
             $CellContext`m["nodes"]}]]; Null], $CellContext`drawConstraints[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`s, 
          
          Blank[]]] := $CellContext`drawConstraints[$CellContext`m, \
$CellContext`s, Null, {}], $CellContext`normalStyleForConstraint[
         Pattern[$CellContext`node, 
          Blank[]]] := If[
         MemberQ[
          $CellContext`node["reactionForce"], Null], 
         $CellContext`draw2["undefined constraint style"], 
         If[
          $CellContext`node["ui", "verified", "constraint"], 
          $CellContext`draw2["correct constraint style"], 
          $CellContext`draw2[
          "normal constraint style"]]], $CellContext`drawConstraint[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Module[{$CellContext`b, $CellContext`p, $CellContext`angle}, \
$CellContext`b = $CellContext`hingeRotateAtNode[$CellContext`n]; \
$CellContext`p = $CellContext`tran[$CellContext`n["p"] + $CellContext`s 
             If[Length[
                 $CellContext`n["u"]] >= 2, 
               Take[
                $CellContext`n["uBar"], 2], {0, 0}]]; $CellContext`angle = 
          If[Element[
              $CellContext`n["c", "ui", "rotate"], Reals] === 
            True, $CellContext`n["c", "ui", "rotate"] Degree, 
            $CellContext`constraintAngle[$CellContext`n]]; 
         If[$CellContext`b, 
           $CellContext`drawConstraintAt[$CellContext`p, $CellContext`angle, 
            $CellContext`n["c"], False], 
           $CellContext`drawConstraintAt[$CellContext`p, $CellContext`angle, 
            $CellContext`n["c"]]]], $CellContext`hingeRotateAtNode[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`h, $CellContext`hinges, $CellContext`b}, \
$CellContext`hinges = $CellContext`n["getHinges"]; 
         If[Length[$CellContext`hinges] == 0, 
           Return[False], $CellContext`b = True; 
           Do[If[Part[$CellContext`h, 3] === False, $CellContext`b = False]; 
             Null, {$CellContext`h, $CellContext`hinges}]; 
           Return[$CellContext`b]; Null]; Null], $CellContext`constraintAngle[
        
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`d, $CellContext`ae}, $CellContext`d = \
$CellContext`directionFrom[$CellContext`n]; $CellContext`ae = Apply[ArcTan, 
            $CellContext`tran[$CellContext`d]]; Return[
           Switch[
            $CellContext`n["c"], {
            False, False, False}, $CellContext`ae + (3 Pi)/2, {
            False, True, True}, 
            If[Part[$CellContext`d, 1] < 0, 
             $CellContext`n["alpha"], $CellContext`n["alpha"] + Pi], {
            True, False, False}, 
            If[Part[$CellContext`d, 2] < 0, 
             $CellContext`n["alpha"], $CellContext`n["alpha"] + Pi], {
            False, True, False}, 
            If[Part[$CellContext`d, 1] < 0, 
             $CellContext`n["alpha"], $CellContext`n["alpha"] + Pi], {
            False, False, True}, 
            If[
             
             And[-Pi + Pi/10 < $CellContext`ae, $CellContext`ae < -(Pi/
                10)], $CellContext`n["alpha"] + Pi/2, 
             $CellContext`n["alpha"]], 
            Blank[], 
            $CellContext`n["alpha"]]]; Null], $CellContext`directionFrom[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = \
$CellContext`directionsFrom[$CellContext`n]; Return[
           If[Length[$CellContext`ds] > 0, 
            First[$CellContext`ds], {-1, 0}]]; 
         Null], $CellContext`directionsFrom[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`i, $CellContext`e, $CellContext`n2}, Return[
           DeleteCases[
            Table[$CellContext`e = Part[
                $CellContext`n["elements"], $CellContext`i]; If[
               $CellContext`e[
               "isLineElement"], $CellContext`n2 = 
                If[$CellContext`e["n", 1] === $CellContext`n, 
                  $CellContext`e["n", 2], 
                  $CellContext`e["n", 1]]; $CellContext`n2[
                 "p"] - $CellContext`n["p"]], {$CellContext`i, 
              Length[
               $CellContext`n["elements"]]}], Null]]; 
         Null], $CellContext`drawConstraintAt[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`angle, 
          Blank[]], 
         Pattern[$CellContext`c, 
          
          Blank[]]] := $CellContext`drawConstraintAt[$CellContext`p, \
$CellContext`angle, $CellContext`c, True], $CellContext`drawConstraintAt[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`angle, 
          Blank[]], 
         Pattern[$CellContext`c, 
          Blank[]], 
         Pattern[$CellContext`wOffset, 
          Blank[]]] := Translate[
         Rotate[
          If[
           And[
            Not[$CellContext`wOffset], 
            Or[
            Length[$CellContext`c] < 3, Part[$CellContext`c, 3] == True]], 
           $CellContext`draw2["constraint", $CellContext`c, False], 
           $CellContext`draw2[
           "constraint", $CellContext`c]], $CellContext`angle, {0, 
          0}], $CellContext`p], $CellContext`constraintTooltip[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`rf, $CellContext`ro}, $CellContext`rf = \
$CellContext`n["reactionForce"]; $CellContext`ro = $CellContext`n[
           "ui", "directions"]; If[
           Or[
            MemberQ[$CellContext`rf, Null], $CellContext`rf === 0], 
           $CellContext`LocalizedString["reaction force not defined yet"], 
           StringJoin[
            If[
            Part[$CellContext`ro, 1] == 1, " \[RightArrow]", " \[LeftArrow]"],
             " H = ", 
            ToString[
             $CellContext`fNumber[
             Part[$CellContext`ro, 1] Part[$CellContext`rf, 1]]], " kN\n", 
            If[
            Part[$CellContext`ro, 2] == -1, " \[UpArrow]", " \[DownArrow]"], 
            "  V = ", 
            ToString[
             $CellContext`fNumber[
             Part[$CellContext`ro, 2] Part[$CellContext`rf, 2]]], " kN\n", 
            If[
            Part[$CellContext`ro, 3] == 1, "\[LeftTeeVector]", 
             "\[RightTeeVector]"], " M = ", 
            ToString[
             $CellContext`fNumber[
             Part[$CellContext`ro, 3] Part[$CellContext`rf, 3]]], 
            " kNm"]]], $CellContext`fNumber[
         Pattern[$CellContext`num, 
          Blank[]]] := If[Round[$CellContext`num] == $CellContext`num, 
         Round[$CellContext`num], 
         $CellContext`mRound[$CellContext`num, 
          $CellContext`draw2["fRound"]]], $CellContext`mRound[
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`a, 
          Blank[]]] := 
       N[Sign[$CellContext`x] Rationalize[$CellContext`a] 
         Floor[Abs[$CellContext`x]/$CellContext`a + 
           1/2]], $CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]]] := $CellContext`drawSystem[$CellContext`m, 
         $CellContext`m["ui", "bounds"], True, Null, 
         Null], $CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`pr, 
           Blank[]], 
          VectorQ]] := $CellContext`drawSystem[$CellContext`m, \
$CellContext`pr, True, Null, Null, Null], $CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`updateSize, 
          Blank[]]] := $CellContext`drawSystem[$CellContext`m, 
         $CellContext`m["ui", "bounds"], $CellContext`updateSize, Null, Null, 
         Null], $CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`constraintEventHandler, 
          Blank[]]] := $CellContext`drawSystem[$CellContext`m, 
         $CellContext`m["ui", "bounds"], 
         True, $CellContext`eltEventHandler, \
$CellContext`constraintEventHandler, Null], $CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`pr, 
           Blank[]], VectorQ], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`constraintEventHandler, 
          
          Blank[]]] := $CellContext`drawSystem[$CellContext`m, \
$CellContext`pr, 
         True, $CellContext`eltEventHandler, \
$CellContext`constraintEventHandler, Null], $CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`constraintEventHandler, 
          Blank[]], 
         Pattern[$CellContext`nodeIssues, 
          Blank[]]] := $CellContext`drawSystem[$CellContext`m, 
         $CellContext`m["ui", "bounds"], 
         True, $CellContext`eltEventHandler, \
$CellContext`constraintEventHandler, $CellContext`nodeIssues], \
$CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`pr, 
          Blank[]], 
         Pattern[$CellContext`updateSize, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`constraintEventHandler, 
          
          Blank[]]] := $CellContext`drawSystem[$CellContext`m, \
$CellContext`pr, $CellContext`updateSize, $CellContext`eltEventHandler, \
$CellContext`constraintEventHandler, Null], $CellContext`drawSystem[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`pr, 
          Blank[]], 
         Pattern[$CellContext`updateSize, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`constraintEventHandler, 
          Blank[]], 
         Pattern[$CellContext`nodeInfo, 
          Blank[]]] := 
       Module[{$CellContext`nodeMarkers}, $CellContext`nodeMarkers = \
$CellContext`createNodeMarkers[$CellContext`nodeInfo]; 
         If[$CellContext`updateSize, 
           $CellContext`setSize[$CellContext`m]]; Return[
           Graphics[{
             CapForm["Round"], 
             JoinForm["Round"], 
             If[
              $CellContext`draw2["system draw grid"], 
              $CellContext`drawGrid[$CellContext`m], {}], 
             $CellContext`draw2["system graphics items"], 
             $CellContext`drawCoordinateSystem[$CellContext`m], {
              $CellContext`drawRigidLinks[$CellContext`m]}, 
             If[
              $CellContext`draw2["system draw text"], 
              $CellContext`drawSystemText[$CellContext`m]], 
             If[
              $CellContext`draw2["system draw elements reference line"], 
              $CellContext`drawWithStyle[
               $CellContext`draw2["ref style"], 
               $CellContext`drawElementsRef[$CellContext`m]]], {
              $CellContext`drawElements[$CellContext`m]}, 
             $CellContext`drawSprings[$CellContext`m], 
             If[
              $CellContext`draw2["draw nodes"], 
              $CellContext`drawNodes[$CellContext`m]], 
             $CellContext`drawHinges[$CellContext`m], 
             If[
              $CellContext`draw2["system draw dimensions"], 
              $CellContext`drawDimensions[$CellContext`m]], 
             $CellContext`drawWithStyle[
              $CellContext`draw2["force style"], 
              $CellContext`drawForces[$CellContext`m, 
               $CellContext`draw2["system draw automatic labels"]]], 
             $CellContext`drawWithStyle[
              $CellContext`draw2["load style"], 
              $CellContext`drawLoads[$CellContext`m, 
               $CellContext`draw2["system draw automatic labels"]]], 
             If[
              $CellContext`draw2["system draw global load"], 
              $CellContext`drawWithStyle[
               $CellContext`draw2["load style"], 
               $CellContext`drawGlobalLoads[$CellContext`m]]], 
             If[
              $CellContext`draw2["system draw constraints"], {
               $CellContext`drawConstraints[$CellContext`m, 
                0, $CellContext`constraintEventHandler, 
                If[$CellContext`nodeInfo === Null, {}, 
                 $CellContext`nodeInfo["correct"]]]}], 
             If[
              $CellContext`draw2["draw truss nodes"], 
              $CellContext`drawTrussNodes[$CellContext`m]], 
             If[
              $CellContext`draw2["system draw reaction forces"], 
              $CellContext`drawWithStyle[
               $CellContext`draw2["reaction force style"], 
               $CellContext`drawReactionForces[$CellContext`m]]], 
             If[
              $CellContext`draw2["system draw unbalanced forces"], 
              $CellContext`drawWithStyle[
               $CellContext`draw2["unbalanced force style"], 
               $CellContext`drawUnbalancedForces[$CellContext`m]]], 
             If[
              $CellContext`draw2["system draw labels"], 
              $CellContext`drawSystemLabels[$CellContext`m]], 
             $CellContext`drawHinges[$CellContext`m], \
{$CellContext`nodeMarkers}, 
             If[
              $CellContext`draw2["system draw deformation"], {Orange, 
               $CellContext`drawDeformedElements[$CellContext`m, 
                $CellContext`m["ui", "scale u"]]}]}, 
            PlotRange -> $CellContext`pr, 
            ImageSize -> $CellContext`draw2["image size system"], 
            ImagePadding -> $CellContext`draw2["image padding"], 
            ImageMargins -> $CellContext`draw2["image margins"]]]; 
         Null], $CellContext`createNodeMarkers[
         Pattern[$CellContext`nodeInfo, 
          Blank[]]] := Module[{$CellContext`nodeMarkers}, If[
           
           Or[$CellContext`nodeInfo === Null, $CellContext`nodeInfo["show"] === 
            False], $CellContext`nodeMarkers = {}; 
           
           Null, $CellContext`nodeMarkers = \
$CellContext`drawNodeMarkers[$CellContext`nodeInfo]; 
           If[$CellContext`nodeInfo[
              "issues"] == {}, $CellContext`draw2[
               "system show tooltip at constraints"] = True; 
             Null, $CellContext`draw2["system show tooltip at constraints"] = 
              False; Null]; 
           Null]; $CellContext`nodeMarkers], $CellContext`drawNodeMarkers[
         Pattern[$CellContext`info, 
          Blank[]]] := If[$CellContext`info =!= Null, 
         Table[
          
          Apply[$CellContext`nodeMarkerFor, $CellContext`issueInfo], \
{$CellContext`issueInfo, 
           $CellContext`info["issues"]}]], $CellContext`nodeMarkerFor[
         Pattern[$CellContext`node, 
          Blank[]], 
         Pattern[$CellContext`isClose, 
          Blank[]], 
         Pattern[$CellContext`issues, 
          Blank[]]] := $CellContext`markerFor[
         $CellContext`node[
         "p"], $CellContext`isClose, $CellContext`issues], \
$CellContext`markerFor[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`isClose, 
          Blank[]], 
         Pattern[$CellContext`issues, 
          Blank[]]] := If[Length[$CellContext`issues] > 0, 
         Switch[
          First[$CellContext`issues], "correct", 
          $CellContext`draw2["correct marker symbol"][$CellContext`p], 
          "undefined", 
          $CellContext`draw2["undefined marker symbol"][$CellContext`p], 
          Blank[], 
          $CellContext`draw2[
          "incorrect marker symbol"][$CellContext`p, $CellContext`isClose, 
           StringJoin[$CellContext`issues]]]], $CellContext`drawGrid[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`mbX1, $CellContext`mbX2, $CellContext`mbZ1, \
$CellContext`mbZ2}, {{$CellContext`mbX1, $CellContext`mbX2}, \
{$CellContext`mbZ1, $CellContext`mbZ2}} = 
          If[$CellContext`m["ui", "bounds"] === Automatic, 
            $CellContext`bounds[$CellContext`m], 
            $CellContext`m[
            "ui", "bounds"]]; {$CellContext`mbZ1, $CellContext`mbZ2} = {
            Min[$CellContext`mbZ1, $CellContext`mbZ2], 
            Max[$CellContext`mbZ1, $CellContext`mbZ2]}; $CellContext`mbX1 = 
          Floor[$CellContext`mbX1]; $CellContext`mbZ1 = 
          Floor[$CellContext`mbZ1]; $CellContext`mbX2 = 
          Ceiling[$CellContext`mbX2]; $CellContext`mbZ2 = 
          Ceiling[$CellContext`mbZ2]; Return[{
            Lighter[
             Lighter[
              Lighter[
               Lighter[
                Lighter[
                 Lighter[Blue]]]]]], 
            Table[
             
             Line[{{$CellContext`x, $CellContext`mbZ1}, {$CellContext`x, \
$CellContext`mbZ2}}], {$CellContext`x, $CellContext`mbX1 - 
              1, $CellContext`mbX2 + 1, 0.1}], 
            Table[
             
             Line[{{$CellContext`mbX1, $CellContext`z}, {$CellContext`mbX2, \
$CellContext`z}}], {$CellContext`z, $CellContext`mbZ1 - 1, $CellContext`mbZ2 + 
              1, 0.1}], White, 
            Table[
             
             Line[{{$CellContext`x, $CellContext`mbZ1}, {$CellContext`x, \
$CellContext`mbZ2}}], {$CellContext`x, $CellContext`mbX1 - 
              1, $CellContext`mbX2 + 1}], 
            Table[
             
             Line[{{$CellContext`mbX1, $CellContext`z}, {$CellContext`mbX2, \
$CellContext`z}}], {$CellContext`z, $CellContext`mbZ1 - 1, $CellContext`mbZ2 + 
              1}], 
            Lighter[Orange], 
            Arrow[{{$CellContext`mbX1, 0}, {$CellContext`mbX2, 0}}], 
            
            Arrow[{{0, $CellContext`mbZ2}, {
              0, $CellContext`mbZ1}}]}]], $CellContext`drawCoordinateSystem[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`o, $CellContext`l}, $CellContext`o = \
$CellContext`m["ui", "csys"]; $CellContext`l = 25; 
         If[$CellContext`o =!= Null, {
            Arrowheads[Small], 
            AbsoluteThickness[0.5], 
            Arrow[{
              $CellContext`tran[$CellContext`o], 
              Offset[{$CellContext`l, 0}, 
               $CellContext`tran[$CellContext`o]]}], 
            Text["X", 
             Offset[{$CellContext`l, 0}, 
              $CellContext`tran[$CellContext`o]], {-1.5, 0}], 
            Arrow[{
              $CellContext`tran[$CellContext`o], 
              Offset[{0, -$CellContext`l}, 
               $CellContext`tran[$CellContext`o]]}], 
            Text["Z", 
             Offset[{0, -$CellContext`l}, 
              $CellContext`tran[$CellContext`o]], {-2.5, 
              0}]}]], $CellContext`drawRigidLinks[
         Pattern[$CellContext`m, 
          Blank[]]] := Module[{$CellContext`p1, $CellContext`p2}, Return[{
            AbsoluteThickness[2], 
            
            Table[$CellContext`p1 = $CellContext`rl["n1"][
               "p"]; $CellContext`p2 = $CellContext`rl["n2"]["p"]; Line[{
                $CellContext`tran[$CellContext`p1], 
                $CellContext`tran[$CellContext`p2]}], {$CellContext`rl, 
              $CellContext`m["rigidLinks"]}]}]; 
         Null], $CellContext`drawSystemText[
         Pattern[$CellContext`m, 
          Blank[]]] := Table[
         Text[
          Part[$CellContext`t, 1], {
           Part[$CellContext`t, 2], -Part[$CellContext`t, 3]}, {-1, 
          0}], {$CellContext`t, 
          $CellContext`m["ui", "text"]}], $CellContext`drawElementsRef[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`e, $CellContext`l, $CellContext`ll, \
$CellContext`a, $CellContext`g}, Return[
           Table[$CellContext`e = Part[
               $CellContext`m[
               "line elements"], $CellContext`i]; $CellContext`l = \
$CellContext`e["l"]; $CellContext`ll = If[
               $CellContext`draw2["short reference line"], 
               Min[
               0.35 $CellContext`l, 
                0.125 $CellContext`draw2[
                 "size"]], $CellContext`l]; $CellContext`a = $CellContext`e[
              "alpha"]; $CellContext`g = Line[{
                
                Offset[{
                 0, -$CellContext`draw2["ref offset"]}, {-($CellContext`ll/2),
                   0}], 
                
                Offset[{0, -$CellContext`draw2["ref offset"]}, {
                 Plus[$CellContext`ll]/2, 0}]}]; Translate[
              Rotate[$CellContext`g, $CellContext`a, {0, 0}], 
              $CellContext`tran[($CellContext`e["n", 1]["p"] + $CellContext`e[
                 "n", 2]["p"])/2]], {$CellContext`i, 
             Length[
              $CellContext`m["line elements"]]}]]; 
         Null], $CellContext`drawSprings[
         Pattern[$CellContext`m, 
          Blank[]]] := Table[
         Switch[
          $CellContext`element["type"], "point element.spring", 
          $CellContext`drawSpringElement[$CellContext`element], 
          "point element.coupling spring", 
          $CellContext`drawCouplingSpringElement[$CellContext`element], 
          Blank[], Null], {$CellContext`element, 
          $CellContext`m["point elements"]}], $CellContext`drawSpringElement[
         Pattern[$CellContext`e, 
          Blank[]]] := 
       Module[{$CellContext`n, $CellContext`d, $CellContext`ae, \
$CellContext`ae1, $CellContext`ae2}, $CellContext`n = $CellContext`e[
           "n", 1]; $CellContext`d = \
$CellContext`directionFrom[$CellContext`n]; $CellContext`ae = Apply[ArcTan, 
            $CellContext`tran[$CellContext`d]]; $CellContext`ae1 = If[
            And[$CellContext`ae > Pi/2, $CellContext`ae < (3 Pi)/2], Pi, 
            0]; $CellContext`ae2 = If[$CellContext`ae > Pi, Pi, 0]; Return[{
            If[Part[
               $CellContext`e["spring"], 1] != 0, 
             $CellContext`drawOneSpring[$CellContext`n, $CellContext`ae1 - 90 
              Degree + $CellContext`e["ui", "rotate"] Degree, "spring"]], 
            If[Part[
               $CellContext`e["spring"], 2] != 0, 
             $CellContext`drawOneSpring[$CellContext`n, $CellContext`ae2 
               Degree + $CellContext`e["ui", "rotate"] Degree, "spring"]], 
            If[Part[
               $CellContext`e["spring"], 3] != 0, 
             $CellContext`drawOneSpring[$CellContext`n, $CellContext`ae2 
               Degree + $CellContext`e["ui", "rotate"] Degree, 
              "rotational spring"]]}]; Null], $CellContext`drawOneSpring[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`angle, 
          Blank[]], 
         Pattern[$CellContext`type, 
          Blank[]]] := Translate[
         Rotate[
          $CellContext`draw2[$CellContext`type], $CellContext`angle, {0, 
          0}], 
         $CellContext`tran[
          $CellContext`n["p"]]], $CellContext`drawCouplingSpringElement[
         Pattern[$CellContext`e, 
          Blank[]]] := 
       Module[{$CellContext`n, $CellContext`d, $CellContext`a1, \
$CellContext`a2}, $CellContext`n = $CellContext`e[
           "n", 1]; $CellContext`d = \
$CellContext`directionsFrom[$CellContext`n]; $CellContext`a1 = Apply[ArcTan, 
            $CellContext`tran[
             Part[$CellContext`d, 1]]]; $CellContext`a2 = Apply[ArcTan, 
            $CellContext`tran[
             Part[$CellContext`d, 2]]]; If[$CellContext`a1 < 0, 
           AddTo[$CellContext`a1, 2 Pi]]; If[$CellContext`a2 < 0, 
           AddTo[$CellContext`a2, 2 Pi]]; Return[
           Circle[
            $CellContext`tran[
             $CellContext`e["n", 1]["p"]], $CellContext`draw2["size"]/
            20, {$CellContext`a1, $CellContext`a2}]]; 
         Null], $CellContext`drawNodes[
         Pattern[$CellContext`m, 
          Blank[]]] := Module[{$CellContext`i, $CellContext`n}, Return[{
            EdgeForm[{Black, 
              AbsoluteThickness[0.5 $CellContext`PT]}], Black, 
            Table[$CellContext`n = Part[
                $CellContext`m["nodes"], $CellContext`i]; Disk[
               $CellContext`tran[
                $CellContext`n["p"]], 
               Offset[
                $CellContext`draw2["node size"]]], {$CellContext`i, 
              Length[
               $CellContext`m["nodes"]]}]}]; Null], $CellContext`drawHinges[
         Pattern[$CellContext`m, 
          Blank[]]] := Table[
         $CellContext`drawHinge[$CellContext`n], {$CellContext`n, 
          $CellContext`m["nodes"]}], $CellContext`drawHinge[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`angle, 
          Blank[]], 
         Pattern[$CellContext`type, 
          Blank[]]] := 
       Module[{$CellContext`symbol, $CellContext`symbols}, \
$CellContext`symbols = $CellContext`draw2[
           "hinge types"][$CellContext`d]; $CellContext`symbol = 
          Part[$CellContext`symbols, $CellContext`type]; Translate[
           
           Rotate[$CellContext`symbol, $CellContext`angle, {0, 
            0}], $CellContext`p]], $CellContext`drawHinge[
         Pattern[$CellContext`n, 
          Blank[]]] := Module[{}, 
         If[
          $CellContext`n["isHinge"], 
          Return[
           $CellContext`drawHinge[
            $CellContext`tran[
             $CellContext`n["p"]], 
            $CellContext`hingeOffsetDirection[$CellContext`n], 
            $CellContext`n["alpha"], 
            $CellContext`n["getHingeType"]]], 
          Return[{}]]], $CellContext`hingeOffsetDirection[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`ne, $CellContext`he, $CellContext`e, \
$CellContext`d}, $CellContext`ne = 
          0; $CellContext`he = $CellContext`n["getHingedElements"]; Do[
           If[
            $CellContext`e["isLineElement"], 
            Increment[$CellContext`ne]], {$CellContext`e, 
            $CellContext`n["elements"]}]; Return[
           If[$CellContext`ne <= 2, {0, 0}, 
            If[Length[$CellContext`he] == 1, $CellContext`e = Part[
                $CellContext`n["elements"], 
                First[$CellContext`he]]; $CellContext`d = $CellContext`e[
                "directionFrom", $CellContext`n]/Sin[
                $CellContext`e[
                
                "minAngleFrom", $CellContext`n]]; \
$CellContext`tran[$CellContext`d], 
             $CellContext`tran[
              $CellContext`n["ui", "hinge offset"]]]]]; 
         Null], $CellContext`drawDimensions[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`dir, $CellContext`ah = $CellContext`draw2[
           "dimension arrowhead"]}, {
          $CellContext`draw2["dimension style"], 
          
          Arrowheads[{{Medium, 0, $CellContext`ah}, {
            Medium, 1, $CellContext`ah}}], 
          
          Table[$CellContext`dir = Part[$CellContext`dim, 1]; 
           Switch[$CellContext`dir, "h", 
             $CellContext`drawDimensionH[
              Part[$CellContext`dim, 2], 
              Part[$CellContext`dim, 3]], "hn", 
             $CellContext`drawDimensionHN[
              Part[$CellContext`dim, 2], 
              Part[$CellContext`dim, 3], 
              Part[$CellContext`dim, 4]], "v", 
             $CellContext`drawDimensionV[
              Part[$CellContext`dim, 2], 
              Part[$CellContext`dim, 3]], "vn", 
             $CellContext`drawDimensionVN[
              Part[$CellContext`dim, 2], 
              Part[$CellContext`dim, 3], 
              Part[$CellContext`dim, 4]], "a", 
             $CellContext`drawDimensionA[
              Part[$CellContext`dim, 2], 
              Part[$CellContext`dim, 3], 
              Part[$CellContext`dim, 4]], 
             Blank[], 
             Message[
             "Wrong label for dimension, must be one of h|v|hn|vn"]], \
{$CellContext`dim, 
            $CellContext`m[
            "ui", "dimensions"]}]}], $CellContext`drawDimensionH[
         Pattern[$CellContext`y, 
          Blank[]], 
         Pattern[$CellContext`xl, 
          Blank[]]] := Module[{$CellContext`x1, $CellContext`x2}, 
         Table[$CellContext`x1 = 
           Part[$CellContext`xl, $CellContext`i]; $CellContext`x2 = 
           Part[$CellContext`xl, $CellContext`i + 1]; {
            
            Arrow[{{$CellContext`x1, -$CellContext`y}, {$CellContext`x2, \
-$CellContext`y}}], 
            Text[
             StringJoin[
              ToString[
               $CellContext`roundInt[
                Abs[$CellContext`x2 - $CellContext`x1]]], 
              "m"], {($CellContext`x1 + $CellContext`x2)/
              2, -$CellContext`y}, {0, -1}]}, {$CellContext`i, 
           Length[$CellContext`xl] - 1}]], $CellContext`roundInt[
         Pattern[$CellContext`num, 
          Blank[]]] := If[Round[$CellContext`num] == $CellContext`num, 
         Round[$CellContext`num], $CellContext`num], \
$CellContext`drawDimensionHN[
         Pattern[$CellContext`o, 
          Blank[]], 
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`nodes, 
          Blank[]]] := 
       Module[{$CellContext`y, $CellContext`x1, $CellContext`x2, \
$CellContext`os}, $CellContext`y = Part[
            $CellContext`n1["p"], 2]; $CellContext`os = {0, $CellContext`o}; 
         Table[$CellContext`x1 = Part[
              Part[$CellContext`nodes, $CellContext`i]["p"], 
              1]; $CellContext`x2 = Part[
              Part[$CellContext`nodes, $CellContext`i + 1]["p"], 1]; {
             
             Arrow[{$CellContext`os + {$CellContext`x1, -$CellContext`y}, \
$CellContext`os + {$CellContext`x2, -$CellContext`y}}], 
             Text[
              StringJoin[
               ToString[
                $CellContext`roundInt[
                 Abs[$CellContext`x2 - $CellContext`x1]]], 
               "m"], $CellContext`os + {($CellContext`x1 + $CellContext`x2)/
                2, -$CellContext`y}, {0, -1}]}, {$CellContext`i, 
            Length[$CellContext`nodes] - 1}]], $CellContext`drawDimensionV[
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`yl, 
          Blank[]]] := 
       Module[{$CellContext`y1, $CellContext`y2, $CellContext`p}, 
         Table[$CellContext`y1 = 
           Part[$CellContext`yl, $CellContext`i]; $CellContext`y2 = 
           Part[$CellContext`yl, $CellContext`i + 
             1]; $CellContext`p = {$CellContext`x, -(($CellContext`y2 + \
$CellContext`y1)/2)}; {
            
            Arrow[{{$CellContext`x, -$CellContext`y1}, {$CellContext`x, \
-$CellContext`y2}}], 
            Rotate[
             Text[
              StringJoin[
               ToString[
                $CellContext`roundInt[
                 Abs[$CellContext`y2 - $CellContext`y1]]], 
               "m"], $CellContext`p, {0, -1}], Pi/
             2, $CellContext`p]}, {$CellContext`i, Length[$CellContext`yl] - 
           1}]], $CellContext`drawDimensionVN[
         Pattern[$CellContext`o, 
          Blank[]], 
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`nodes, 
          Blank[]]] := 
       Module[{$CellContext`x, $CellContext`y1, $CellContext`y2, \
$CellContext`os, $CellContext`p}, $CellContext`x = Part[
            $CellContext`n1["p"], 1]; $CellContext`os = {$CellContext`o, 0}; 
         Table[$CellContext`y1 = Part[
              Part[$CellContext`nodes, $CellContext`i]["p"], 
              2]; $CellContext`y2 = Part[
              Part[$CellContext`nodes, $CellContext`i + 1]["p"], 
              2]; $CellContext`p = {$CellContext`x, -(($CellContext`y2 + \
$CellContext`y1)/2)}; {
             
             Arrow[{$CellContext`os + {$CellContext`x, -$CellContext`y1}, \
$CellContext`os + {$CellContext`x, -$CellContext`y2}}], 
             Text[
              StringJoin[
               ToString[
                $CellContext`roundInt[
                 Abs[$CellContext`y2 - $CellContext`y1]]], 
               "m"], $CellContext`os + $CellContext`p, {0, -1}, Automatic, {0,
               1}]}, {$CellContext`i, Length[$CellContext`nodes] - 
            1}]], $CellContext`drawDimensionA[
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`a1, 
          Blank[]], 
         Pattern[$CellContext`a2, 
          Blank[]]] := 
       Module[{$CellContext`r, $CellContext`d1, $CellContext`d2, \
$CellContext`am, $CellContext`dm}, $CellContext`d1 = {
            Cos[$CellContext`a1 Degree], 
            Sin[$CellContext`a1 Degree]}; $CellContext`d2 = {
            Cos[$CellContext`a2 Degree], 
            Sin[$CellContext`a2 Degree]}; $CellContext`am = 
          0.5 ($CellContext`a1 + $CellContext`a2); $CellContext`dm = {
            Cos[$CellContext`am Degree], 
            Sin[$CellContext`am Degree]}; $CellContext`r = $CellContext`draw2[
           "angular dimension radius"]; Return[{
            Circle[
             $CellContext`tran[$CellContext`x], 
             
             Offset[$CellContext`r], {$CellContext`a1 Degree, $CellContext`a2 
              Degree}], 
            $CellContext`drawTextForQuadrant[
             Offset[$CellContext`r $CellContext`dm, 
              $CellContext`tran[$CellContext`x]], $CellContext`dm, 
             StringJoin["  ", 
               ToString[
                $CellContext`fNumber[
                 Abs[$CellContext`a2 - $CellContext`a1]]]] Degree "  "], 
            Line[{
              Offset[0.25 $CellContext`r $CellContext`d1, 
               $CellContext`tran[$CellContext`x]], 
              Offset[1.2 $CellContext`r $CellContext`d1, 
               $CellContext`tran[$CellContext`x]]}], 
            Line[{
              Offset[0.25 $CellContext`r $CellContext`d2, 
               $CellContext`tran[$CellContext`x]], 
              Offset[1.2 $CellContext`r $CellContext`d2, 
               $CellContext`tran[$CellContext`x]]}]}]; 
         Null], $CellContext`drawTextForQuadrant[
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`text, 
          Blank[]]] := Module[{$CellContext`o}, $CellContext`o = Switch[
            $CellContext`quadrant[$CellContext`d], 1, {-1, -1}, 2, {1, -1}, 
            3, {1, 1}, 4, {-1, 1}]; Return[
           Text[$CellContext`text, $CellContext`x, $CellContext`o]]; 
         Null], $CellContext`quadrant[
         Pattern[$CellContext`d, 
          Blank[]]] := 
       Module[{$CellContext`q}, $CellContext`q = 
          Ceiling[Apply[ArcTan, $CellContext`d]/(Pi/2)]; Return[
           If[$CellContext`q > 0, $CellContext`q, $CellContext`q + 4]]; 
         Null], $CellContext`drawForces[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`includeLabel, 
          Blank[]]] := Table[
         $CellContext`drawForce[$CellContext`f, $CellContext`includeLabel], \
{$CellContext`f, 
          $CellContext`m["forces"]}], $CellContext`drawForce[
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`includeLabel, 
          Blank[]]] := 
       Module[{$CellContext`di, $CellContext`o, $CellContext`pp, \
$CellContext`o1, $CellContext`provided, $CellContext`lo, $CellContext`fv, \
$CellContext`sf, $CellContext`lt}, $CellContext`provided = VectorQ[
             $CellContext`f["ui", "offset"]] === True; $CellContext`di = 
          If[$CellContext`provided, 
            Normalize[
             $CellContext`f["ui", "offset"]], 
            If[$CellContext`f["e"] === Null, {0, 0}, 
             $CellContext`f["e"]["directionFrom", 
              $CellContext`f["n"]]]]; $CellContext`o = If[
            And[
             $CellContext`f["n"][
             "isHinge"], $CellContext`f["n"]["getHingeType"] =!= 
             3], $CellContext`pp = If[Dot[
                 Take[
                  $CellContext`f["value"], 2], $CellContext`di] >= 0, 
               1, -1]; $CellContext`draw2[
              "vertical hinge width"] $CellContext`draw2["hinge size"] 
             1.5, $CellContext`pp = \
$CellContext`forcePushOrPull[$CellContext`f]; 0]; 
         If[$CellContext`provided, $CellContext`o = Norm[
             $CellContext`f["ui", "offset"]]]; $CellContext`o1 = 
          If[$CellContext`provided, 0, 
            $CellContext`draw2["force offset"]]; Return[{
            $CellContext`drawForceArrowWithTwoOffset[
             $CellContext`f["n"]["p"], 
             $CellContext`f[
             "value"], $CellContext`di, $CellContext`pp, $CellContext`o1, \
$CellContext`o, Null], 
            If[Length[
               $CellContext`f["value"]] > 2, 
             $CellContext`drawMomentArrow[
              $CellContext`f["n"]["p"], $CellContext`di, 
              Part[
               $CellContext`f["value"], 3], Null]], 
            If[
             Or[$CellContext`includeLabel, 
              And[
               $CellContext`draw2[
               "system draw text"], $CellContext`f["ui", "draw label"] === 
               True]], $CellContext`lo = $CellContext`f["ui", "label offset"]; 
             If[VectorQ[$CellContext`lo] =!= 
               True, $CellContext`lo = {0, 0}]; $CellContext`fv = Take[
                $CellContext`f["value"], 2]; $CellContext`sf = 1./Max[0.001, 
                $CellContext`draw2["f max"]]; $CellContext`lt = If[
                Or[
                Part[$CellContext`fv, 1] == 0, Part[$CellContext`fv, 2] == 0], 
                StringJoin[
                 ToString[
                  $CellContext`fNumber[
                   Norm[$CellContext`fv]]], " kN"], 
                StringJoin["[", 
                 ToString[
                  $CellContext`fNumber[
                   Part[$CellContext`fv, 1]]], "kN, ", 
                 ToString[
                  $CellContext`fNumber[
                   Part[$CellContext`fv, 2]]], "kN]"]]; Text[
               Style[$CellContext`lt, Black], 
               
               Offset[$CellContext`tran[$CellContext`pp $CellContext`sf \
$CellContext`draw2["force size"] $CellContext`fv] + $CellContext`lo, 
                $CellContext`tran[
                 $CellContext`f["n"]["p"]]], $CellContext`draw2[
                "force label offset"] 
               If[Part[$CellContext`fv, 2] == 0, {0, -1}, {-1, 0}]], {}]}]; 
         Null], $CellContext`drawForce[
         Pattern[$CellContext`f, 
          Blank[]]] := $CellContext`drawForce[$CellContext`f, 
         True], $CellContext`forcePushOrPull[
         Pattern[$CellContext`f, 
          Blank[]]] := 
       Module[{$CellContext`i, $CellContext`ds, $CellContext`a1, \
$CellContext`a2, $CellContext`d}, Switch[
           If[$CellContext`f["ui", "mode"] == "auto", 
            $CellContext`draw2["force push or pull"], 
            $CellContext`f["ui", "mode"]], 
           "auto", $CellContext`d = 
            1; $CellContext`ds = $CellContext`directionsFrom[
              $CellContext`f["n"]]; $CellContext`a2 = Mod[
              Quiet[
               Apply[ArcTan, 
                Take[
                 $CellContext`f["value"], 2]]], 2 Pi]; For[$CellContext`i = 1, 
             
             And[$CellContext`i <= 
              Length[$CellContext`ds], $CellContext`d != -1], 
             Increment[$CellContext`i], $CellContext`a1 = Mod[
                Quiet[
                 Apply[ArcTan, 
                  Part[$CellContext`ds, $CellContext`i]]], 2 Pi]; If[
               N[
               Abs[$CellContext`a1 - $CellContext`a2] < 
                0.1], $CellContext`d = -1; Null, Null]; Null]; Null, 
           "push", $CellContext`d = -1; Null, "pull", $CellContext`d = 1; 
           Null, 
           
           Blank[], $CellContext`assertThat[
            False, "force push or pull: illegal value"]; Null]; 
         Return[$CellContext`d]; 
         Null], $CellContext`drawForceArrowWithTwoOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`dir, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o1, 
          Blank[]], 
         Pattern[$CellContext`o2, 
          Blank[]], 
         Pattern[$CellContext`l, 
          
          Blank[]]] := \
$CellContext`drawForceArrowWithTwoOffset[$CellContext`p, $CellContext`v, \
$CellContext`dir, $CellContext`d, $CellContext`o1, $CellContext`o2, \
$CellContext`l, True], $CellContext`drawForceArrowWithTwoOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`dir, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o1, 
          Blank[]], 
         Pattern[$CellContext`o2, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`doScale, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`scaledF, $CellContext`sf}, \
$CellContext`f = Take[$CellContext`v, 2]; $CellContext`sf = 
          If[$CellContext`doScale, 1./Max[0.001, 
             $CellContext`draw2["f max"]], 0.6]; $CellContext`scaledF = 
          If[$CellContext`doScale, $CellContext`draw2[
             "force size"] $CellContext`sf $CellContext`tran[$CellContext`f], 
            
            If[
            Norm[$CellContext`f] > 
             0.001, $CellContext`sf $CellContext`draw2[
              "force size"] $CellContext`tran[
               Normalize[$CellContext`f]], {0, 0}]]; {
           $CellContext`drawArrowWithTwoOffset[
            $CellContext`tran[$CellContext`p], $CellContext`scaledF, \
$CellContext`dir, $CellContext`d, $CellContext`o1, $CellContext`o2, {{
              $CellContext`draw2[
              "force arrowhead size"][$CellContext`sf Norm[$CellContext`f]], 
              1, 
              $CellContext`draw2[
              "force arrowhead"]}}, $CellContext`l]}], \
$CellContext`drawArrowWithTwoOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`ad, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o1, 
          Blank[]], 
         Pattern[$CellContext`o2, 
          Blank[]], 
         Pattern[$CellContext`ahs, 
          
          Blank[]]] := $CellContext`drawArrowWithTwoOffset[$CellContext`p, \
$CellContext`f, $CellContext`ad, $CellContext`d, $CellContext`o1, \
$CellContext`o2, $CellContext`ahs, Null], $CellContext`drawArrowWithTwoOffset[
        
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`ad, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o1, 
          Blank[]], 
         Pattern[$CellContext`o2, 
          Blank[]], 
         Pattern[$CellContext`ahs, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]]] := 
       Module[{$CellContext`ov, $CellContext`text = {}, $CellContext`arrow = \
{}}, $CellContext`ov = $CellContext`o1 Normalize[$CellContext`f] + 
           Sign[$CellContext`d] $CellContext`o2 Normalize[$CellContext`ad]; 
         If[Norm[$CellContext`f] >= 0.0001, 
           If[$CellContext`d > 0, $CellContext`arrow = {
               Arrowheads[$CellContext`ahs], 
               Arrow[{
                 Offset[$CellContext`ov, $CellContext`p], 
                 
                 Offset[$CellContext`ov + $CellContext`f, $CellContext`p]}]}; \
$CellContext`text = If[$CellContext`l =!= Null, 
               Style[
                Text[$CellContext`l, 
                 Offset[$CellContext`ov + $CellContext`f, $CellContext`p], {
                 0, -1.5}, 
                 Abs[
                  Normalize[$CellContext`f]]], Black]]; 
            Null, $CellContext`arrow = {
               Arrowheads[$CellContext`ahs], 
               Arrow[{
                 Offset[-$CellContext`ov - $CellContext`f, $CellContext`p], 
                 
                 Offset[-$CellContext`ov, $CellContext`p]}]}; \
$CellContext`text = If[$CellContext`l =!= Null, 
               Style[
                Text[$CellContext`l, 
                 Offset[-$CellContext`ov - $CellContext`f, $CellContext`p], {
                 0, -1.5}, 
                 Abs[
                  Normalize[$CellContext`f]]], Black]]; Null]]; 
         Return[{$CellContext`arrow, $CellContext`text}]; 
         Null], $CellContext`drawMomentArrow[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]]] := $CellContext`drawMomentArrow[$CellContext`p, {0, 
         0}, $CellContext`v, $CellContext`l], $CellContext`drawMomentArrow[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`l, 
          
          Blank[]]] := $CellContext`drawMomentArrow[$CellContext`p, \
$CellContext`d, $CellContext`v, $CellContext`l, 
         True], $CellContext`drawMomentArrow[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`doScale, 
          Blank[]]] := 
       Module[{$CellContext`sf}, $CellContext`sf = 
          If[$CellContext`doScale, 1./Max[0.001, 
             $CellContext`draw2["m max"]], 1]; Return[
           $CellContext`drawCircleArrowWithOffset[
            $CellContext`tran[$CellContext`p], 
            $CellContext`tran[$CellContext`d], 
            $CellContext`draw2[
            "moment offset"], $CellContext`v, $CellContext`draw2[
             "moment size"] $CellContext`sf $CellContext`v, 
            If[$CellContext`v > 0, {{
               $CellContext`draw2[
               "moment arrowhead size"][$CellContext`sf Abs[$CellContext`v]], 
               1, 
               $CellContext`draw2["moment arrowhead +"]}}, {{
               $CellContext`draw2[
               "moment arrowhead size"][$CellContext`sf Abs[$CellContext`v]], 
               1, 
               $CellContext`draw2["moment arrowhead -"]}}], $CellContext`l]]; 
         Null], $CellContext`drawCircleArrowWithOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o, 
          Blank[]], 
         Pattern[$CellContext`value, 
          Blank[]], 
         Pattern[$CellContext`size, 
          Blank[]], 
         Pattern[$CellContext`ahs, 
          
          Blank[]]] := $CellContext`drawCircleArrowWithOffset[$CellContext`p, \
$CellContext`d, $CellContext`o, $CellContext`value, $CellContext`size, \
$CellContext`ahs, Null], $CellContext`drawCircleArrowWithOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o, 
          Blank[]], 
         Pattern[$CellContext`value, 
          Blank[]], 
         Pattern[$CellContext`size, 
          Blank[]], 
         Pattern[$CellContext`ahs, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]]] := 
       Module[{$CellContext`alpha, $CellContext`start, $CellContext`end, \
$CellContext`aa, $CellContext`absSize, $CellContext`absValue}, \
$CellContext`absSize = Abs[$CellContext`size]; $CellContext`absValue = 
          Abs[$CellContext`value]; $CellContext`alpha = 
          If[Norm[$CellContext`d] == 0, 0, 
            Apply[ArcTan, $CellContext`d]]; If[
           
           And[$CellContext`value > 0, Norm[$CellContext`d] == 
            0], $CellContext`start = (-120) 
              Degree + $CellContext`alpha; $CellContext`end = 
            110 Degree + $CellContext`alpha; $CellContext`aa = \
$CellContext`end; Null, 
           
           If[$CellContext`value > 
            0, $CellContext`start = 
             310 Degree + $CellContext`alpha; $CellContext`end = 
             70 Degree + $CellContext`alpha; $CellContext`aa = \
$CellContext`start; 
            Null, $CellContext`start = 
             70 Degree + $CellContext`alpha; $CellContext`end = 
             310 Degree + $CellContext`alpha; $CellContext`aa = \
$CellContext`start; Null]]; Return[
           If[Abs[$CellContext`absValue] > 0.0001, {
             Circle[
              
              Offset[($CellContext`absSize + $CellContext`o) $CellContext`d, \
$CellContext`p], 
              
              Offset[$CellContext`absSize], {$CellContext`start, \
$CellContext`end}], {
              Arrowheads[$CellContext`ahs], 
              Arrow[{
                Offset[$CellContext`absSize {
                    Cos[$CellContext`aa], 
                    
                    Sin[$CellContext`aa]} + ($CellContext`absSize + \
$CellContext`o) $CellContext`d, $CellContext`p], 
                Offset[$CellContext`absSize {
                    Cos[$CellContext`aa], 
                    Sin[$CellContext`aa]} + 
                 0.001 Sign[$CellContext`value] $CellContext`absSize {-
                    Sin[$CellContext`aa], 
                    
                    Cos[$CellContext`aa]} + ($CellContext`absSize + \
$CellContext`o) $CellContext`d, $CellContext`p]}]}, 
             If[$CellContext`l =!= Null, 
              Style[
               Text[$CellContext`l, 
                
                Offset[($CellContext`absSize + $CellContext`o) $CellContext`d + 
                 Sign[
                    
                    Cos[($CellContext`start + $CellContext`end)/
                    2]] $CellContext`absSize {1, 0}, $CellContext`p], {
                0, -1.5}], Black]]}]]; Null], $CellContext`drawLoads[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`includeLabel, 
          Blank[]]] := Module[{$CellContext`p}, 
         Table[
          $CellContext`drawLoad[$CellContext`p, 
           Or[$CellContext`includeLabel, 
            
            And[$CellContext`draw2["system draw text"] === 
             True, $CellContext`p["ui", "draw label"] === 
             True]]], {$CellContext`p, 
           $CellContext`m["loads"]}]], $CellContext`drawLoad[
         Pattern[$CellContext`p, 
          Blank[]]] := $CellContext`drawLoad[$CellContext`p, 
         True], $CellContext`drawLoad[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`includeLabel, 
          Blank[]]] := 
       Module[{$CellContext`e, $CellContext`l, $CellContext`haveP, \
$CellContext`haveQ, $CellContext`g, $CellContext`lo, $CellContext`haveF, \
$CellContext`vNode, $CellContext`vForce, $CellContext`fInfo, \
$CellContext`pos}, $CellContext`haveP = 
          Or[$CellContext`p["p", 1] != 0, $CellContext`p["p", 2] != 
            0]; $CellContext`haveQ = 
          Or[$CellContext`p["q", 1] != 0, $CellContext`p["q", 2] != 
            0]; $CellContext`haveF = Length[
             $CellContext`p["f"]] > 0; $CellContext`e = $CellContext`p[
           "e"]; $CellContext`l = $CellContext`e[
           "l"]; $CellContext`lo = $CellContext`p["ui", "label offset"]; 
         If[VectorQ[$CellContext`lo] =!= True, $CellContext`lo = {0, 0}]; 
         If[$CellContext`includeLabel == False, $CellContext`lo = Null]; 
         Return[{
            
            If[$CellContext`haveP, $CellContext`g = \
$CellContext`drawP[$CellContext`l, 
                $CellContext`p["p", 1], 
                $CellContext`p["p", 2], $CellContext`lo]; Translate[
               Rotate[$CellContext`g, 
                $CellContext`e["alpha"], {0, 0}], 
               $CellContext`tran[
                $CellContext`e["n", 1]["p"]]]], 
            
            If[$CellContext`haveQ, $CellContext`g = \
$CellContext`drawQ[$CellContext`l, $CellContext`p[
                 "q", 1] + (# ($CellContext`p["q", 2] - $CellContext`p[
                   "q", 1]))/$CellContext`l& , $CellContext`lo]; Translate[
               Rotate[$CellContext`g, 
                $CellContext`e["alpha"], {0, 0}], 
               $CellContext`tran[
                $CellContext`e["n", 1]["p"]]]], 
            If[$CellContext`haveF, 
             Table[$CellContext`pos = $CellContext`e["n", 1]["p"] + Dot[
                  Transpose[
                   $CellContext`e["T0"]], {
                   Part[$CellContext`fInfo, 1], 
                   0}]; $CellContext`vNode = $CellContext`newNode[
                 Part[$CellContext`pos, 1], 
                 
                 Part[$CellContext`pos, 
                  2]]; $CellContext`vForce = \
$CellContext`newForce[$CellContext`vNode, 
                 Dot[
                  Transpose[
                   $CellContext`e["T0"]], 
                  Part[$CellContext`fInfo, 2]]]; $CellContext`vForce[
                "ui", "mode"] = 
               "push"; $CellContext`g = \
$CellContext`drawForce[$CellContext`vForce], {$CellContext`fInfo, 
               $CellContext`p["f"]}]]}]; Null], $CellContext`drawP[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`lo, 
          Blank[]]] := 
       Module[{$CellContext`n, $CellContext`i, $CellContext`dx, \
$CellContext`p1, $CellContext`p2}, $CellContext`n = 
          Max[2, Floor[$CellContext`l/($CellContext`draw2[
               "size"] $CellContext`draw2["load dp"])]/2]; $CellContext`dx = (
            0.95 $CellContext`l)/($CellContext`n - 1); Return[{
            Arrowheads[{{
               $CellContext`draw2["load arrowhead size"][1], 1, 
               $CellContext`draw2["force arrowhead"]}}], 
            Table[
            If[$CellContext`s1 > 
               0, $CellContext`p1 = {($CellContext`i - 1) $CellContext`dx, 
                  0}; $CellContext`p2 = {($CellContext`i - 
                   0.1) $CellContext`dx, 0}; 
               Null, $CellContext`p2 = {($CellContext`i - 1) $CellContext`dx, 
                  0}; $CellContext`p1 = {($CellContext`i - 
                   0.1) $CellContext`dx, 0}; Null]; Arrow[{
                Offset[{0, 
                  $CellContext`draw2["load offset"]}, $CellContext`p1], 
                Offset[{0, 
                  $CellContext`draw2[
                  "load offset"]}, $CellContext`p2]}], {$CellContext`i, \
$CellContext`n - 1}], 
            If[$CellContext`lo =!= Null, 
             If[$CellContext`s1 == $CellContext`s2, 
              Text[
               Style[
                StringJoin[
                 ToString[
                  Norm[
                   $CellContext`fNumber[$CellContext`s1]]], " kN/m"], Black], 
               
               Offset[{0, 
                  $CellContext`draw2[
                  "load offset"]} + $CellContext`lo, {$CellContext`l/2, 0}], {
                0, -1} $CellContext`draw2["force label offset"]], {
               Text[
                Style[
                 StringJoin[
                  ToString[
                   Norm[
                    $CellContext`fNumber[$CellContext`s1]]], " kN/m"], Black], 
                Offset[{0, 
                   $CellContext`draw2["load offset"]} + $CellContext`lo, {0, 
                 0}], {0, -1} $CellContext`draw2["force label offset"]], 
               Text[
                Style[
                 StringJoin[
                  ToString[
                   Norm[
                    $CellContext`fNumber[$CellContext`s2]]], " kN/m"], Black], 
                Offset[{0, 
                   $CellContext`draw2[
                   "load offset"]} + $CellContext`lo, {$CellContext`l, 0}], {
                 0, -1} $CellContext`draw2["force label offset"]]}]]}]; 
         Null], $CellContext`drawP[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          
          Blank[]]] := $CellContext`drawP[$CellContext`l, $CellContext`s1, \
$CellContext`s2, Null], $CellContext`drawQ[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`q, 
          Blank[]]] := $CellContext`drawQ[$CellContext`l, $CellContext`q, 
         Null], $CellContext`drawQ[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`lo, 
          Blank[]]] := 
       Module[{$CellContext`n, $CellContext`sf, $CellContext`x, \
$CellContext`dx, $CellContext`p, $CellContext`s1, $CellContext`s2, \
$CellContext`l0, $CellContext`sol, $CellContext`s0}, $CellContext`n = Max[2, 
            
            Floor[$CellContext`l/($CellContext`draw2[
              "size"] $CellContext`draw2[
              "load dq"])]]; $CellContext`dx = $CellContext`l/($CellContext`n - 
           1); $CellContext`sf = 1./Max[0.001, 
            $CellContext`draw2["q max"]]; $CellContext`s1 = $CellContext`q[
           
           0]; $CellContext`s2 = $CellContext`q[$CellContext`l]; \
$CellContext`sol = Flatten[
            Solve[
             
             And[$CellContext`q[$CellContext`x] == 0, $CellContext`x > 
              0, $CellContext`x < $CellContext`l], $CellContext`x, 
             Reals]]; $CellContext`l0 = 
          If[$CellContext`sol === {}, $CellContext`l, 
            
            ReplaceAll[$CellContext`x, $CellContext`sol]]; $CellContext`s0 = \
$CellContext`q[$CellContext`l0]; Return[{
            
            Table[$CellContext`p = {$CellContext`x, 
                0}; $CellContext`drawArrowWithOffset[
               $CellContext`tran[$CellContext`p], $CellContext`draw2[
                "load size"] $CellContext`sf $CellContext`tran[{0, 
                  $CellContext`q[$CellContext`x]}], -1, 
               $CellContext`draw2["load offset"], {{
                 $CellContext`draw2["load arrowhead size"][$CellContext`sf Abs[
                    $CellContext`q[$CellContext`x]]], 1, 
                 $CellContext`draw2["force arrowhead"]}}], {$CellContext`x, 
              0, $CellContext`l, $CellContext`dx}], 
            If[$CellContext`l0 > 0, {
              Line[{
                
                Offset[{
                 0, $CellContext`draw2[
                    "load size"] $CellContext`sf $CellContext`s1 + \
$CellContext`nzSign[$CellContext`s1] $CellContext`draw2["load offset"]}, {0, 
                 0}], 
                
                Offset[{
                 0, $CellContext`draw2[
                    "load size"] $CellContext`sf $CellContext`s0 + \
$CellContext`nzSign[$CellContext`s1] $CellContext`draw2[
                    "load offset"]}, {$CellContext`l0, 0}]}], 
              Line[{
                
                Offset[{
                 0, $CellContext`nzSign[$CellContext`s1] $CellContext`draw2[
                   "load offset"]}, {0, 0}], 
                
                Offset[{
                 0, $CellContext`nzSign[$CellContext`s1] $CellContext`draw2[
                   "load offset"]}, {$CellContext`l0, 0}]}]}], 
            If[$CellContext`l0 < $CellContext`l, {
              Line[{
                
                Offset[{
                 0, $CellContext`draw2[
                    "load size"] $CellContext`sf $CellContext`s0 + \
$CellContext`nzSign[$CellContext`s2] $CellContext`draw2[
                    "load offset"]}, {$CellContext`l0, 0}], 
                
                Offset[{
                 0, $CellContext`draw2[
                    "load size"] $CellContext`sf $CellContext`s2 + \
$CellContext`nzSign[$CellContext`s2] $CellContext`draw2[
                    "load offset"]}, {$CellContext`l, 0}]}], 
              Line[{
                
                Offset[{
                 0, $CellContext`nzSign[$CellContext`s2] $CellContext`draw2[
                   "load offset"]}, {$CellContext`l0, 0}], 
                
                Offset[{
                 0, $CellContext`nzSign[$CellContext`s2] $CellContext`draw2[
                   "load offset"]}, {$CellContext`l, 0}]}]}], 
            If[$CellContext`lo =!= Null, 
             If[$CellContext`s1 == $CellContext`s2, 
              If[Abs[$CellContext`s1] > 10^(-5), 
               Text[
                Style[
                 StringJoin[
                  ToString[
                   Norm[
                    $CellContext`fNumber[$CellContext`s1]]], " kN/m"], Black], 
                
                Offset[{
                  0, $CellContext`draw2[
                    "load size"] $CellContext`sf $CellContext`s1 + \
$CellContext`nzSign[$CellContext`s1] $CellContext`draw2[
                    "load offset"]} + $CellContext`lo, {$CellContext`l/2, 
                  0}], {0, -1} $CellContext`draw2["force label offset"]]], {
               If[Abs[$CellContext`s1] > 10^(-5), 
                Text[
                 Style[
                  StringJoin[
                   ToString[
                    Norm[
                    $CellContext`fNumber[$CellContext`s1]]], " kN/m"], Black], 
                 
                 Offset[{
                   0, $CellContext`draw2[
                    "load size"] $CellContext`sf $CellContext`s1 + \
$CellContext`nzSign[$CellContext`s1] $CellContext`draw2[
                    "load offset"]} + $CellContext`lo, {0, 0}], {
                  0, -1} $CellContext`draw2["force label offset"]]], 
               If[Abs[$CellContext`s2] > 10^(-5), 
                Text[
                 Style[
                  StringJoin[
                   ToString[
                    Norm[
                    $CellContext`fNumber[$CellContext`s2]]], " kN/m"], Black], 
                 
                 Offset[{
                   0, $CellContext`draw2[
                    "load size"] $CellContext`sf $CellContext`s2 + \
$CellContext`nzSign[$CellContext`s2] $CellContext`draw2[
                    "load offset"]} + $CellContext`lo, {$CellContext`l, 0}], {
                  0, -1} $CellContext`draw2["force label offset"]]]}]]}]; 
         Null], $CellContext`drawArrowWithOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o, 
          Blank[]], 
         Pattern[$CellContext`ahs, 
          
          Blank[]]] := $CellContext`drawArrowWithTwoOffset[$CellContext`p, \
$CellContext`f, {0, 0}, $CellContext`d, $CellContext`o, 
         0, $CellContext`ahs], $CellContext`nzSign[
         Pattern[$CellContext`x, 
          Blank[]]] := If[$CellContext`x == 0, 1, 
         Sign[$CellContext`x]], $CellContext`drawGlobalLoads[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`pp, $CellContext`h, $CellContext`v, \
$CellContext`vp, $CellContext`hp}, $CellContext`h = Min[
            Table[
             Part[
              $CellContext`node["p"], 2], {$CellContext`node, 
              $CellContext`m["nodes"]}]]; $CellContext`v = Max[
            Table[
             If[
              $CellContext`node["isHinge"], 
              Part[
               $CellContext`node["p"], 1], 0], {$CellContext`node, 
              $CellContext`m["nodes"]}]]; Table[If[VectorQ[
               $CellContext`pp["ui", "gp"]] === True, $CellContext`vp = Part[
                $CellContext`pp["ui", "gp"], 1]; $CellContext`hp = Part[
                $CellContext`pp["ui", "gp"], 
                2], $CellContext`vp = $CellContext`v; $CellContext`hp = \
$CellContext`h; 
             Null]; $CellContext`drawGlobalLoad[$CellContext`pp, \
$CellContext`hp - $CellContext`pp[
             "ui", "offset"], $CellContext`vp - $CellContext`pp[
             "ui", "offset"]], {$CellContext`pp, 
            $CellContext`m["loads"]}]], $CellContext`drawGlobalLoad[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`h, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`gP, $CellContext`gQ, $CellContext`e, \
$CellContext`lc, $CellContext`ls, $CellContext`haveGQ, $CellContext`haveGP, \
$CellContext`np1, $CellContext`np2, $CellContext`lo, $CellContext`sign}, \
$CellContext`haveGQ = 
          Or[$CellContext`p["qzBar", 1] != 0, $CellContext`p["qzBar", 2] != 
            0]; $CellContext`haveGP = 
          Or[$CellContext`p["pzBar", 1] != 0, $CellContext`p["pzBar", 2] != 
            0]; $CellContext`e = $CellContext`p[
           "e"]; $CellContext`lc = $CellContext`e["l"] Cos[
             $CellContext`e["alpha"]]; $CellContext`ls = $CellContext`e["l"] 
           Sin[
             $CellContext`e["alpha"]]; $CellContext`sign = 
          If[$CellContext`ls > 0, 1, -1]; $CellContext`ls = 
          Abs[$CellContext`ls]; $CellContext`np1 = $CellContext`e["n", 1][
           "p"]; $CellContext`np2 = $CellContext`e["n", 2][
           "p"]; $CellContext`lo = $CellContext`p["ui", "label offset"]; 
         If[VectorQ[$CellContext`lo] =!= True, $CellContext`lo = {0, 0}]; 
         If[$CellContext`p["ui", "draw label"] =!= True, $CellContext`lo = 
           Null]; Return[{
            
            If[$CellContext`haveGP, $CellContext`gP = \
$CellContext`drawQ[$CellContext`ls, -$CellContext`p[
                  "pzBar", 
                   1] + (# (-$CellContext`p["pzBar", 2] + $CellContext`p[
                    "pzBar", 1]))/$CellContext`ls& , $CellContext`lo]; 
             Translate[
               Rotate[$CellContext`gP, -(Pi/2), {0, 0}], 
               $CellContext`tran[{$CellContext`v, 
                 Min[
                  Part[$CellContext`np1, 2], 
                  Part[$CellContext`np2, 2]]}]]], 
            
            If[$CellContext`haveGQ, $CellContext`gQ = \
$CellContext`drawQ[$CellContext`lc, $CellContext`p[
                 "qzBar", 
                  1] + (# ($CellContext`p["qzBar", 2] - $CellContext`p[
                   "qzBar", 1]))/$CellContext`lc& , $CellContext`lo]; 
             Translate[$CellContext`gQ, 
               $CellContext`tran[{
                 Part[$CellContext`np1, 1], $CellContext`h}]]]}]; 
         Null], $CellContext`drawTrussNodes[
         Pattern[$CellContext`m, 
          Blank[]]] := Module[{$CellContext`i, $CellContext`n}, Return[{
            EdgeForm[{Black, 
              AbsoluteThickness[0.5 $CellContext`PT]}], White, 
            Table[$CellContext`n = Part[
                $CellContext`m["nodes"], $CellContext`i]; Disk[
               $CellContext`tran[
                $CellContext`n["p"]], 
               Offset[
                $CellContext`draw2["truss node size"]]], {$CellContext`i, 
              Length[
               $CellContext`m["nodes"]]}]}]; 
         Null], $CellContext`drawReactionForces[
         Pattern[$CellContext`m, 
          Blank[]]] := Table[
         If[
          And[
           $CellContext`n["isConstrained"], $CellContext`n["reactionForce"] =!= 
           Null], 
          $CellContext`drawReactionForce[$CellContext`n], {}], \
{$CellContext`n, 
          $CellContext`m["nodes"]}], $CellContext`drawReactionForce[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`eps = 
          10^(-6), $CellContext`vf, $CellContext`f, $CellContext`f1 = {0, 
           0}, $CellContext`f2 = {0, 0}, $CellContext`f3 = 
          0, $CellContext`d1 = -1, $CellContext`d = -1, $CellContext`angle, \
$CellContext`l1 = Null, $CellContext`l2 = Null, $CellContext`l3 = 
          Null, $CellContext`rfdir}, $CellContext`f = $CellContext`n[
           "reactionForce"]; $CellContext`rfdir = $CellContext`n[
           "ui", "directions"]; $CellContext`vf = 
          Take[$CellContext`f, 2]; $CellContext`angle = If[
            $CellContext`n["isConstrained"], 
            $CellContext`constraintAngle[$CellContext`n], 0]; If[Abs[
             Part[$CellContext`f, 3]] > $CellContext`eps, $CellContext`l3 = 
            ToString[
              $CellContext`twoDigitNum[
              Part[$CellContext`rfdir, 3] 
               Part[$CellContext`f, 3]]]; $CellContext`f3 = 
            Part[$CellContext`rfdir, 3]; Null]; Return[
           If[
            $CellContext`draw2["reaction force draw components"], If[Abs[
                Part[$CellContext`f, 1]] > $CellContext`eps, $CellContext`f1 = {
                 Part[$CellContext`rfdir, 1], 0}; $CellContext`l1 = ToString[
                 $CellContext`twoDigitNum[
                 Part[$CellContext`rfdir, 1] 
                  Part[$CellContext`f, 1]]]; $CellContext`d = Sign[
                 Sin[$CellContext`angle - ArcTan[
                   Part[$CellContext`f1, 1], -Part[$CellContext`f1, 2]]]]; 
              Null]; If[Abs[
                
                Part[$CellContext`f, 
                 2]] > $CellContext`eps, $CellContext`f2 = {0, 
                 Part[$CellContext`rfdir, 2]}; $CellContext`l2 = ToString[
                 $CellContext`twoDigitNum[
                 Part[$CellContext`rfdir, 2] 
                  Part[$CellContext`f, 2]]]; $CellContext`d1 = Sign[
                 Sin[$CellContext`angle - ArcTan[
                   Part[$CellContext`f2, 1], -Part[$CellContext`f2, 2]]]]; 
              Null]; {
              $CellContext`drawForceArrowWithOffset[
               $CellContext`n["p"], $CellContext`f1, $CellContext`d, 
               $CellContext`draw2["reaction force offset"], $CellContext`l1, 
               False], 
              $CellContext`drawForceArrowWithOffset[
               $CellContext`n["p"], $CellContext`f2, $CellContext`d1, 
               $CellContext`draw2["reaction force offset"], $CellContext`l2, 
               False], 
              $CellContext`drawMomentArrow[
               $CellContext`n[
               "p"], $CellContext`directionFrom[$CellContext`n]/
               10^5, $CellContext`f3, $CellContext`l3, False]}, 
            If[Norm[$CellContext`vf] > $CellContext`eps, $CellContext`d = Sign[
                Sin[$CellContext`angle - ArcTan[
                  Part[$CellContext`f, 1], -Part[$CellContext`f, 2]]]]]; {
              $CellContext`drawForceArrowWithOffset[
               $CellContext`n["p"], $CellContext`f, $CellContext`d, 
               $CellContext`draw2["reaction force offset"], Null, False], 
              $CellContext`drawMomentArrow[
               $CellContext`n[
               "p"], $CellContext`directionFrom[$CellContext`n]/
               10^5, $CellContext`f3, $CellContext`l3, False]}]]; 
         Null], $CellContext`twoDigitNum[
         Pattern[$CellContext`num, 
          Blank[]]] := If[Round[$CellContext`num] == $CellContext`num, 
         Round[$CellContext`num], 
         $CellContext`mRound[$CellContext`num, 
          0.01]], $CellContext`drawForceArrowWithOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o, 
          Blank[]], 
         Pattern[$CellContext`l, 
          
          Blank[]]] := \
$CellContext`drawForceArrowWithTwoOffset[$CellContext`p, $CellContext`v, {0, 
         0}, $CellContext`d, $CellContext`o, 0, $CellContext`l, 
         True], $CellContext`drawForceArrowWithOffset[
         Pattern[$CellContext`p, 
          Blank[]], 
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`o, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`doScale, 
          
          Blank[]]] := \
$CellContext`drawForceArrowWithTwoOffset[$CellContext`p, $CellContext`v, {0, 
         0}, $CellContext`d, $CellContext`o, 
         0, $CellContext`l, $CellContext`doScale], \
$CellContext`drawUnbalancedForces[
         Pattern[$CellContext`m, 
          Blank[]]] := Table[
         $CellContext`drawUnbalancedForce[$CellContext`n], {$CellContext`n, 
          $CellContext`m["nodes"]}], $CellContext`drawUnbalancedForce[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`l}, $CellContext`f = \
$CellContext`n["residual"] - $CellContext`n[
           "reactionForce"]; $CellContext`l = \
$CellContext`norm[$CellContext`f]; 
         If[$CellContext`l > 
           1/1000, $CellContext`f = ($CellContext`l^(1/
                10) $CellContext`f)/$CellContext`l; Null]; Return[
           $CellContext`drawForceArrowWithOffset[
            $CellContext`n["p"], $CellContext`f, 1, 
            $CellContext`draw2["force offset"], Null, True]]; 
         Null], $CellContext`drawSystemLabels[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`nodeLabels, $CellContext`elementLabels, \
$CellContext`dofLabels, $CellContext`i, $CellContext`nn, $CellContext`n, \
$CellContext`e, $CellContext`p}, $CellContext`nn = Length[
            $CellContext`m["nodes"]]; $CellContext`nodeLabels = 
          Table[$CellContext`n = Part[
               $CellContext`m["nodes"], $CellContext`i]; Text[
              Style[
               ToString[$CellContext`i], Bold, Medium, 
               Darker[Orange]], 
              $CellContext`tran[
               $CellContext`n["p"]], {-3, 
              2}], {$CellContext`i, $CellContext`nn}]; \
$CellContext`elementLabels = Table[$CellContext`e = Part[
               $CellContext`m["elements"], $CellContext`i]; $CellContext`p = 
             Mean[
               Table[
                $CellContext`n["p"], {$CellContext`n, 
                 $CellContext`e["nodes"]}]]; Text[
              Style[
               ToString[
                $CellContext`pElementId[$CellContext`i]], Medium, Bold, 
               Darker[Orange]], 
              Offset[{5, -1}, 
               $CellContext`tran[$CellContext`p]], {0, 2}], {$CellContext`i, 
             Length[
              $CellContext`m["elements"]]}]; $CellContext`dofLabels = 
          Table[$CellContext`n = Part[
               $CellContext`m[
               "nodes"], $CellContext`i]; \
$CellContext`dofLabelForNode[$CellContext`n], {$CellContext`i, \
$CellContext`nn}]; {$CellContext`nodeLabels, $CellContext`elementLabels, \
$CellContext`dofLabels}], $CellContext`pElementId[
         Pattern[$CellContext`n, 
          Blank[]]] := 
       FromCharacterCode[96 + $CellContext`n], $CellContext`dofLabelForNode[
         Pattern[$CellContext`node, 
          Blank[]]] := 
       Module[{$CellContext`dofs, $CellContext`i, $CellContext`f, \
$CellContext`t, $CellContext`p}, $CellContext`dofs = $CellContext`node[
           "dofs"]; Table[
           If[
           Part[$CellContext`dofs, $CellContext`i] > 
            0, $CellContext`f = {0, 0, 0}; 
            Part[$CellContext`f, $CellContext`i] = 30; $CellContext`t = 
             Style[
               ToString[
                OverBar[
                 Part[$CellContext`dofs, $CellContext`i]]], Medium, Bold, 
               Darker[Blue]]; $CellContext`p = $CellContext`tran[
               $CellContext`node["p"]]; If[$CellContext`i > 2, {Blue, 
               $CellContext`drawMomentArrow[
                $CellContext`tran[$CellContext`p], {0, 0}, 
                1.5, $CellContext`t, False]}, {Blue, 
               $CellContext`drawArrowWithTwoOffset[$CellContext`p, 
                $CellContext`tran[
                 Take[$CellContext`f, 2]], {1, -1}, 1, 1, 1, {{
                  $CellContext`draw2["force arrowhead size"][1], 1, 
                  $CellContext`draw2["force arrowhead"]}}, Null], 
               Text[$CellContext`t, 
                Offset[
                 $CellContext`tran[
                 Take[$CellContext`f, 2]/1.2], $CellContext`p], 
                
                If[$CellContext`i == 1, {0, -1}, {-2, 
                 0}]]}], {}], {$CellContext`i, 
            Length[$CellContext`dofs]}]], $CellContext`drawOneResult[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`sf, 
          Blank[]], 
         Pattern[$CellContext`pr, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`item, 
          Blank[]], 
         Pattern[$CellContext`eltInfo, 
          Blank[]]] := 
       Module[{$CellContext`eltMarkers}, $CellContext`eltMarkers = \
$CellContext`createElementMarkers[$CellContext`eltInfo]; Return[
           Graphics[{
             $CellContext`drawRigidLinks[$CellContext`m], 
             $CellContext`drawElementFunction[$CellContext`m, \
$CellContext`item, $CellContext`sf, ($CellContext`draw2[
                "selected item"] = $CellContext`item; \
$CellContext`eltEventHandler[$CellContext`item, #]; Null)& ], {
              $CellContext`drawElements[$CellContext`m, \
$CellContext`eltEventHandler, $CellContext`item]}, 
             If[
              $CellContext`draw2["results draw label"], {Black, 
               Text[
                Style[
                 $CellContext`LocalizedString[$CellContext`item], 
                 FontSize -> $CellContext`draw2["font size"], FontFamily -> 
                 "Arial"], 
                Scaled[{0.5, 0}], {0, -1}]}], $CellContext`eltMarkers}, 
            PlotRange -> $CellContext`pr, 
            ImageSize -> $CellContext`draw2["image size results"], 
            ImagePadding -> $CellContext`draw2["image padding"], 
            ImageMargins -> $CellContext`draw2["image margins"]]]; 
         Null], $CellContext`drawOneResult[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`sf, 
          Blank[]], 
         Pattern[$CellContext`pr, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]], 
         Pattern[$CellContext`item, 
          
          Blank[]]] := $CellContext`drawOneResult[$CellContext`m, \
$CellContext`sf, $CellContext`pr, $CellContext`eltEventHandler, \
$CellContext`item, Null], $CellContext`drawOneResult[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`sf, 
          Blank[]], 
         Pattern[$CellContext`pr, 
          Blank[]], 
         Pattern[$CellContext`i, 
          
          Blank[]]] := $CellContext`drawOneResult[$CellContext`m, \
$CellContext`sf, $CellContext`pr, Null, 
         Part[
          $CellContext`draw2[
          "result items"], $CellContext`i]], $CellContext`drawOneResult[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`sf, 
          Blank[]], 
         Pattern[$CellContext`pr, 
          
          Blank[]]] := $CellContext`drawOneResult[$CellContext`m, \
$CellContext`sf, $CellContext`pr, Null, 
         "N"], $CellContext`createElementMarkers[
         Pattern[$CellContext`eltInfo, 
          Blank[]]] := Module[{$CellContext`eltMarkers = {}}, If[
           
           Not[$CellContext`eltInfo["issues"] === 
            Null], $CellContext`draw2["system show tooltip at constraints"] = 
            False; $CellContext`eltMarkers = \
$CellContext`drawElementMarkers[$CellContext`eltInfo]; 
           Null]; $CellContext`eltMarkers], $CellContext`drawElementMarkers[
         Pattern[$CellContext`info, 
          Blank[]]] := If[$CellContext`info =!= Null, 
         Table[
          
          Apply[$CellContext`elementMarkerFor, $CellContext`issueInfo], \
{$CellContext`issueInfo, 
           $CellContext`info["issues"]}], {}], $CellContext`elementMarkerFor[
         Pattern[$CellContext`element, 
          Blank[]], 
         Pattern[$CellContext`isClose, 
          Blank[]], 
         Pattern[$CellContext`issues, 
          Blank[]]] := $CellContext`markerFor[
         $CellContext`element[
         "center"], $CellContext`isClose, $CellContext`issues], \
$CellContext`drawElementFunction[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`key, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`eltEventHandler, 
          Blank[]]] := Table[
         With[{$CellContext`e = $CellContext`e}, 
          $CellContext`drawWithEventHandler[
           $CellContext`drawOneElementFunction[$CellContext`e, \
$CellContext`key, $CellContext`s], $CellContext`e, 
           
           If[$CellContext`e["ui", "verified", $CellContext`key] === True, 
            Null, $CellContext`eltEventHandler]]], {$CellContext`e, 
          $CellContext`m["line elements"]}], $CellContext`drawElementFunction[
        
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`key, 
          Blank[]], 
         Pattern[$CellContext`s, 
          
          Blank[]]] := $CellContext`drawElementFunction[$CellContext`m, \
$CellContext`key, $CellContext`s, 
         Null, {}], $CellContext`drawOneElementFunction[
         Pattern[$CellContext`e, 
          Blank[]], 
         Pattern[$CellContext`key, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`showLabel, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`l, $CellContext`pp, \
$CellContext`roots, $CellContext`i, $CellContext`x1, $CellContext`x2}, \
$CellContext`f = $CellContext`e[$CellContext`key]; $CellContext`l = \
$CellContext`e["l"]; Return[
           If[
            And[$CellContext`f =!= Null, Element[
               $CellContext`f[$CellContext`l/3.001], Reals] === True], If[
              Or[$CellContext`e["load"] === 0, Length[
                 $CellContext`e["load"]["f"]] === 0], $CellContext`roots = 
               Flatten[{0, 
                  $CellContext`fFindRoots[$CellContext`f, $CellContext`l], \
$CellContext`l}]; Null, $CellContext`pp = Flatten[{0, 
                  Part[
                   $CellContext`e["load"]["f"], 
                   Span[1, All], 1], $CellContext`l}]; $CellContext`roots = 
               Sort[
                 Flatten[{$CellContext`pp, 
                   Table[
                    $CellContext`fFindRoots2[$CellContext`f, 
                    Part[$CellContext`pp, $CellContext`i], 
                    
                    Part[$CellContext`pp, $CellContext`i + 
                    1]], {$CellContext`i, Length[$CellContext`pp] - 1}]}]]; 
              Null]; {
              
              Table[$CellContext`x1 = 
                Part[$CellContext`roots, $CellContext`i]; $CellContext`x2 = 
                Part[$CellContext`roots, $CellContext`i + 
                  1]; $CellContext`drawOneElementFunctionPiece[$CellContext`\
x1 + 10^(-14), $CellContext`x2 - 
                 10^(-14), $CellContext`e, $CellContext`key, $CellContext`s], \
{$CellContext`i, Length[$CellContext`roots] - 1}], 
              If[$CellContext`showLabel === True, 
               $CellContext`labelForElementFunction[$CellContext`e, \
$CellContext`key, $CellContext`s]]}, {}]]; 
         Null], $CellContext`drawOneElementFunction[
         Pattern[$CellContext`e, 
          Blank[]], 
         Pattern[$CellContext`key, 
          Blank[]], 
         Pattern[$CellContext`s, 
          
          Blank[]]] := $CellContext`drawOneElementFunction[$CellContext`e, \
$CellContext`key, $CellContext`s, 
         $CellContext`draw2[
         "show element function values"]], $CellContext`fFindRoots[
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`l, 
          Blank[]]] := 
       Module[{$CellContext`x, $CellContext`i, $CellContext`s}, Return[
           If[Chop[
              $CellContext`f[$CellContext`x]] === 
            0, {}, $CellContext`s = 
             NSolve[{$CellContext`f[$CellContext`x] == 0, $CellContext`x > 
                0, $CellContext`x < $CellContext`l}, $CellContext`x, Reals]; 
            Table[
              ReplaceAll[$CellContext`x, 
               Part[$CellContext`s, $CellContext`i]], {$CellContext`i, 
               Length[$CellContext`s]}]]]; Null], $CellContext`fFindRoots2[
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]]] := Module[{$CellContext`x}, Return[
           If[Chop[
              $CellContext`f[$CellContext`x]] === 0, {}, 
            If[
            N[$CellContext`f[$CellContext`x1 + 
                 10^(-14)] $CellContext`f[$CellContext`x2 - 10^(-14)]] < 0, {
              ReplaceAll[$CellContext`x, 
               FindRoot[
                $CellContext`f[$CellContext`x], {$CellContext`x, \
$CellContext`x1 + 10^(-14), $CellContext`x2 - 10^(-14)}, Method -> 
                "Brent"]]}, {}]]]; 
         Null], $CellContext`drawOneElementFunctionPiece[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]], 
         Pattern[$CellContext`e, 
          Blank[]], 
         Pattern[$CellContext`key, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Module[{}, If[Abs[$CellContext`x2 - $CellContext`x1] > 10^(-7), 
           Return[
            $CellContext`drawWithStyle[{
              $CellContext`draw2["results style"], 
              $CellContext`getColor[
               $CellContext`e[$CellContext`key][($CellContext`x1 + \
$CellContext`x2)/2]]}, 
             Polygon[
              Flatten[{{
                 $CellContext`tran[
                  $CellContext`e["X"][$CellContext`x1]]}, 
                $CellContext`curvePoints[
                 $CellContext`elementFunction[$CellContext`e, \
$CellContext`key, $CellContext`s], $CellContext`x1, $CellContext`x2, 
                 $CellContext`draw2["results curve points"]], {
                 $CellContext`tran[
                  $CellContext`e["X"][$CellContext`x2]]}}, 1]]]], Return[{}]; 
           Null]; Null], $CellContext`getColor[
         Pattern[$CellContext`v, 
          Blank[]]] := If[$CellContext`v > 0, 
         RGBColor[{63, 69, 244}/255.], 
         RGBColor[{237, 28, 36}/255.]], $CellContext`elementFunction[
         Pattern[$CellContext`e, 
          Blank[]], 
         Pattern[$CellContext`key, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Module[{$CellContext`X, $CellContext`ez, $CellContext`f}, \
$CellContext`X = $CellContext`e["X"]; $CellContext`ez = $CellContext`e[
           "ez"]; $CellContext`f = $CellContext`e[$CellContext`key]; Return[
           Function[$CellContext`x, 
            
            Evaluate[$CellContext`X[$CellContext`x] + $CellContext`s \
$CellContext`f[$CellContext`x] $CellContext`ez]]]; 
         Null], $CellContext`labelForElementFunction[
         Pattern[$CellContext`e, 
          Blank[]], 
         Pattern[$CellContext`key, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Module[{$CellContext`x, $CellContext`textForValue, \
$CellContext`textForRoundedValue, $CellContext`f, $CellContext`fs, \
$CellContext`f0, $CellContext`fm, $CellContext`eps, $CellContext`l, \
$CellContext`pd, $CellContext`e1, $CellContext`fe1, $CellContext`drawAt0, \
$CellContext`drawAtL, $CellContext`drawAtM, $CellContext`mline}, \
$CellContext`e1 = $CellContext`e["getContinuationElement", 1]; 
         If[$CellContext`e1[$CellContext`key] === Null, $CellContext`e1 = 
           Null]; $CellContext`f = $CellContext`e[$CellContext`key]; 
         If[$CellContext`e1 === Null, $CellContext`fe1 = 0; 
           Null, $CellContext`fe1 = 
            If[$CellContext`e["ex"] === $CellContext`e1["ex"], 
              $CellContext`e1[$CellContext`key][
               $CellContext`e1["l"]], 
              $CellContext`e1[$CellContext`key][0]]; Null]; If[
           
           Or[$CellContext`fe1 === Null, Element[$CellContext`fe1, Reals] === 
            False], $CellContext`fe1 = 0]; $CellContext`pd = Exponent[
            $CellContext`f[$CellContext`x], $CellContext`x]; $CellContext`l = \
$CellContext`e[
           "l"]; $CellContext`fs = \
$CellContext`elementFunction[$CellContext`e, $CellContext`key, \
$CellContext`s]; $CellContext`f0 = $CellContext`f[
           0]; $CellContext`fm = $CellContext`f[$CellContext`l/
            2]; $CellContext`eps = 10^(-4); $CellContext`drawAt0 = Not[
            
            Or[$CellContext`pd == 0, Abs[$CellContext`f0] < $CellContext`eps, 
             
             Abs[$CellContext`f0 - $CellContext`fe1] < $CellContext`eps]]; \
$CellContext`drawAtL = Not[
            Or[$CellContext`pd == 0, Abs[
               $CellContext`f[$CellContext`l]] < $CellContext`eps]]; \
$CellContext`drawAtM = And[Element[$CellContext`fm, Reals] === True, 
            Not[
             Or[
              And[$CellContext`pd > 0, $CellContext`pd =!= 2], 
              Abs[$CellContext`fm] < $CellContext`eps, 
              
              And[$CellContext`pd == 0, 
               Abs[$CellContext`f0 - $CellContext`fe1] < $CellContext`eps]]]]; \
$CellContext`mline = If[
            And[$CellContext`drawAtM, $CellContext`pd === 2], {Black, 
             AbsoluteThickness[0.5 $CellContext`PT], 
             Line[{
               $CellContext`tran[($CellContext`e["n", 1][
                  "p"] + $CellContext`e["n", 2]["p"])/2], 
               $CellContext`tran[
                $CellContext`fs[$CellContext`l/
                 2]]}]}, {}]; $CellContext`textForValue[
            Pattern[$CellContext`v, 
             Blank[]]] := Text[
            ToString[
             $CellContext`fNumber[
              $CellContext`f[$CellContext`v]]], 
            $CellContext`tran[
             $CellContext`fs[$CellContext`v]], 
            $CellContext`tran[$CellContext`e["ez"] $CellContext`nzSign[
               $CellContext`f[$CellContext`v]] (-1.2)]]; \
$CellContext`textForRoundedValue[
            Pattern[$CellContext`v, 
             Blank[]]] := Text[
            ToString[
             $CellContext`twoDigitNum[
              $CellContext`f[$CellContext`v]]], 
            $CellContext`tran[
             $CellContext`fs[$CellContext`v]], 
            $CellContext`tran[$CellContext`e["ez"] $CellContext`nzSign[
               $CellContext`f[$CellContext`v]] (-1.2)]]; Return[{
            If[$CellContext`drawAt0, 
             $CellContext`textForRoundedValue[0]], 
            If[$CellContext`drawAtM, {
              $CellContext`textForRoundedValue[$CellContext`l/
               2], $CellContext`mline}], 
            If[$CellContext`drawAtL, 
             $CellContext`textForRoundedValue[$CellContext`l]]}]; 
         Null], $CellContext`locators[
         Pattern[$CellContext`m, 
          Blank[]]] := Table[
         $CellContext`tran[$CellContext`n["p"] + Take[
            $CellContext`n["u"], 2]], {$CellContext`n, 
          $CellContext`m["nodes"]}]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.811911617748045*^9, 3.811911631521852*^9}, {
   3.8119117083291407`*^9, 3.811911716496427*^9}, {3.8119117911034718`*^9, 
   3.811911852664792*^9}, {3.81191190903913*^9, 3.811911919583012*^9}, 
   3.811911966402627*^9, {3.8119119985892353`*^9, 3.8119120157275953`*^9}, 
   3.811912078522724*^9, 3.81191211365066*^9, 3.811912192618681*^9, 
   3.811912731776229*^9, 3.811912764388588*^9, 3.811913128640808*^9, 
   3.811913219447393*^9},
 CellLabel->
  "Out[632]=",ExpressionUUID->"9aa295ca-f17e-4c78-8c08-0e9dca991676"]
},
WindowSize->{1242, 1001},
WindowMargins->{{4, Automatic}, {0, Automatic}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 436776, 8472, 871, "Output",ExpressionUUID->"9aa295ca-f17e-4c78-8c08-0e9dca991676"]
}
]
*)

