# N√§herungsl√∂sung mit Finiten Elementen

```{julia}
#| output: false
include("src/setup.jl")

m, w = plate(8, 8, 3, 3, params);
NN = 4 * nnodes(m)
nb = collect(m.groups[:boundarynodes])
ni = [i for i in 1:nnodes(m) if i ‚àâ nb]
adofs = dofs(ni, 4)
NNa = length(adofs);
```

## Anwendungsbeispiel {.smaller}

:::: {.columns}
::: {.column width="50%"}
```{julia}
f = mkfig(a3d=false, w=800, h=800)
mplot!(m, edgesvisible=false, nodesvisible=false)
f
```
:::
::: {.column width="50%"}
[]{.down20}

- Deckenplatte $\SI{8}{m} \times \SI{8}{m}$ 

- Allseitig eingespannt gelagert

- $E=\SI{31000}{N/mm}^2$ und $\nu = 0$

- Dicke $d = \SI{20}{cm}$, 

- Belastung $q = \SI{5}{kN/m}^2$

- Kirchhoff-Plattentheorie

$\nu = 0$ f√ºr Vergleich mit Czerny-Tafeln
:::
::::


## üí° FE: N√§herungsl√∂sung {.smaller}

$\quad$

Vorgegebene Funktionen zu N√§herungsl√∂sung zusammenbauen

$$
    w_h(x, y) = \sum_{i=1}^N \hat w_i \cdot \varphi_i(x, y)
$$

- $w_h$ ist die N√§herungsl√∂sung (Index $h$ sp√§ter)

- $\varphi_i: \Omega \to \R$ hei√üen Basisfunktionen

- $\Omega$ ist das Berechnungsgebiet (die Platte)

- $\hat w_i \in \R$ hei√üen Freiheitsgrade

- $N$ ist die Anzahl der Freiheitsgrade


```{julia}
include("src/generate-plots.jl")
```

{{< include _generated/basis-functions.qmd >}}


## üí° FE: Basisfunktionen elementweise {.smaller}

:::: {.columns}
::: {.column width="50%"}
```{julia}
f = mkfig(a3d=false,w=800, h=800)
mplot!(m, edgesvisible=true, nodesvisible=true)
f
```
:::
::: {.column width="50%"}
[]{.down20}

- Gebiet wird in Elemente zerlegt

- In der Ebene: Drei- oder Vierecke

- Elemente an Knoten miteinander verbunden

- Anzahl der Elemente frei w√§hlbar
:::
::::


## üí° FE: Basisfunktionen elementweise {.smaller}

:::: {.columns}
::: {.column width="50%"}
**Funktionen f√ºr ein Element**
```{julia}
GLMakie.activate!()
fplot3d(H4, fig=Figure(size=(1300, 1100)))
```
:::
::: {.column width="50%"}
**Kombination von Elementfunktionen**
```{julia}
plotw(
    m, 
    ei(NN, adofs[5]), 
    w=1200, h=550,
    edgesvisible=true,
    limits=(nothing,nothing,(-1,1))
)
```
[]{.up40}
```{julia}
plotw(
    m,
    ei(NN, adofs[12]), zs=4,
    w=1200, h=550,
    edgesvisible=true,
    limits=(nothing, nothing, (-1, 1))
)
```
:::
::::

[]{.up20}

$\rightarrow$ Wichtig bei Kirchhoff-Platte: Kein Knick an Elementkanten!


## üí° FE: Optimale Koeffizienten $\hat w_i$ {.smaller}

Bestimmung aus linearem Gleichungssystem

$$
    \mathbf{K}\hat{\mathbf{w}} = \mathbf{r}
$$

- Herleitung: Koeffizienten so w√§hlen, dass Fehler im 'gewichteten Mittel' minimal wird

- N√§herungsl√∂sung: Differentialgleichung wird nicht in jedem Punkt erf√ºllt

- Diskretisierungsfehler: Unterschied zwischen N√§herung $w_h$ und exakter L√∂sung $w$

- Auflagerbedingungen und Lasten im LGS ber√ºcksichtigen

- Matrix $\mathbf{K}$ wird wieder aus Elementmatrizen assembliert

- Elementmatrizen nicht unmittelbar physikalisch interpretierbar

- Kinematisches System wie f√ºr Stabtragwerke

$\rightarrow$ Mathematische Theorie umfangreich und schwierig!


## Anwendungsbeispiel

```{julia}
function plotsol(n,mesh)
m, w = plate(8, 8, n, n, params);
plotw(
    m, 
    w, 
    w=1200, h=650,
    zs=2400*maximum(w),
    edgesvisible=true, edgeslinewidth=4, mesh=mesh,
    limits=(nothing,nothing,(0,1.15))
)
end;
```


## L√∂sung mit 4 Elementen
```{julia}
plotsol(2, 5)
```


## L√∂sung mit 9 Elementen
```{julia}
plotsol(3, 5)
```


## L√∂sung mit 16 Elementen
```{julia}
plotsol(4, 5)
```


## L√∂sung mit 100 Elementen
```{julia}
plotsol(10, 5)
```


## Konvergenz
```{julia}
CairoMakie.activate!()
l = 8
nn = [];
ww = [];
for n = 4:2:30
    mn, wn = plate(l, l, n, n, params)
    push!(nn, 4 * nnodes(mn))
    push!(ww, maximum(abs.(wn[1:4:end])))
end
w_fe = ww[end];
```

:::: {.columns}
::: {.column width="50%"}
```{julia}
fig = Figure()
Axis(fig[1, 1], xlabel="Anzahl Freiheitsgrade", ylabel="Maximale Verschiebung in mm")
scatterlines!(nn, 1000*ww)
fig
```
:::
::: {.column width="50%"}
- Verschiebung n√§hert sich exakter L√∂sung an
- Wenige Elemente: Verschiebung zu gro√ü
- Wichtiger: Schnittgr√∂√üen - sp√§ter
:::
TODO: Vergleich Reissner-Mindlin
::::


## Vergleich mit Czerny-Tafel {.smaller}

![](00-pics/czerny.png)

```{julia}
#| echo: true
w_czerny = 5e3 * 8^4 / (31000e6 * 0.2^3) * 0.0152
100 * abs(w_fe - w_czerny) / w_czerny
```

$\rightarrow$ Hervorragende √úbereinstimmung mit 0.05 Prozent Unterschied


## Schnittgr√∂√üen und Spannungen 

Wird noch erg√§nzt
