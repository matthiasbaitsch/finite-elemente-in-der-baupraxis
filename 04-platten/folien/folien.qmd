---
title: 4. Finite Elemente f√ºr Plattentragwerke

format:
    revealjs: default

jupyter: julia-1.10

fig-format: png
---


\newcommand{\mmat}[1]{\begin{pmatrix} #1 \end{pmatrix}}
\newcommand{\SI}[2]{#1\,\text{#2}}
\newcommand{\R}{\mathbb{R}}


# Inhalte

# {background-image="00-pics/platten.svg" background-opacity="0.2"}

- Anwendungsbeispiel

- Einfluss der Elementgr√∂√üe

  - Diskretisierungsfehler

  - Gegl√§ttete und ungegl√§ttete Darstellung

- Grundideen Plattentheorie (Kirchhoff und Reissner-Mindlin)

- Spannungen an einspringende Ecken, abhebende Ecken

- Modellierung von Unterz√ºgen

# 

![](00-pics/platten.svg)

Quellen: @mittelstedt_theory_2023 und @baitsch_piecewise_2009


# Grundideen Plattentheorie

## Verschiebung

![](00-pics/verschiebung.svg)


## Kinematische Annahmen {.smaller}

:::: {.columns}

::: {.column width="35%"}
![](00-pics/verdrehung.svg)
:::

::: {.column width="65%"}
- Faser, die im unverformten Zustand senkrecht auf der Mittelfl√§che steht, bleibt gerade

- Senkrechte Verschiebung $w$ ist unabh√§ngig von $z$

- Mittelfl√§che verschiebt sich nur in vertikaler Richtung

- Rotation senkrechte Faser beschrieben durch Winkelfunktionen $\alpha, \beta : \Omega \to \R$

Damit (kleine Rotationen)

$$
\begin{align}
u(x, y, z) & = z \cdot \sin(\alpha(x, y)) \approx z \cdot \alpha(x, y) 
\\[1ex]
v(x, y, z) & = z \cdot \sin(\beta(x, y))  \approx z \cdot \beta(x, y) 
\\[1ex]
w(x, y, z) & = w(x, y)
\end{align}
$$
:::

::::


## Plattentheorien {.smaller}

:::: {.columns}

::: {.column width="35%"}
![](00-pics/plattentheorien.svg)
:::

::: {.column width="65%"}

**Kirchhoff**

- Faser bleibt senkrecht auf Plattenmittelfl√§che

- Etwas salopp: Quadrat bleibt Quadrat (blau)

- Es gilt $\alpha(x, y) = -u_x(x, y)$ und $\beta(x, y) = -v_y(x, y)$

[]{.up10}

$\rightarrow$ Gut geeignet f√ºr d√ºnne Platten (Stahlbau) 

**Reissner-Mindlin**

- Faser dreht sich unabh√§ngig von Plattenmittelfl√§che

- Etwas salopp: Aus Quadrat wird Parallelogramm

- Unabh√§ngige Funktionen f√ºr $\alpha$ und $\beta$

[]{.up10}

$\rightarrow$ Genauer f√ºr sehr dicke Platten

:::

::::

F√ºr 'normale' Anwendungen im Hochbau sind beide Theorien gut geeignet


## Verzerrungen {.smaller}

$$
\begin{align}
\varepsilon_x(x, y, z) 
& = 
\frac{\partial}{\partial x} u(x, y, z)
=
\frac{\partial}{\partial x} (z \cdot \alpha(x,y))
=
z \cdot \alpha_x(x,y)
\\[1em]
\varepsilon_y(x, y, z) 
& = 
\frac{\partial}{\partial y} v(x, y, z)
=
\frac{\partial}{\partial y} (z \cdot \beta(x, y))
=
z \cdot \beta_y(x, y)
\\[1em]
\gamma_{xy}(x, y, z)
& =
\frac{\partial}{\partial x} v(x, y, z) + \frac{\partial}{\partial y} u(x, y, z)
=
z \cdot (\alpha_y(x, y) + \beta_x(x, y))
\\[1em]
\gamma_{xz}(x, y, z)
& =
\frac{\partial}{\partial x} w(x, y, z) + \frac{\partial}{\partial z} u(x, y, z)
=
w_x(x, y) + \alpha(x, y)
\\[1em]
\gamma_{yz}(x, y, z)
& =
\frac{\partial}{\partial y} w(x, y, z) + \frac{\partial}{\partial z} v(x, y, z)
=
w_y(x, y) + \beta(x, y)
\end{align}
$$

TODO: Mit Zeichnung illustrieren


## Spannungen und Schnittgr√∂√üen {.smaller}

TODO: Stoffgesetz und Querdehnzahl erl√§utern


## Spannungen und Schnittgr√∂√üen {.smaller}

![](00-pics/sigma-1.svg)

- Spannungen aus linearem (!) Stoffgesetz

- Schnittgr√∂√üen aus Integration der Spannungen

- Moment $m_x$ auf Schnittfl√§che normal zur $x$-Achse, Moment $m_y$ analog


## Spannungen und Schnittgr√∂√üen {.smaller}

![](00-pics/sigma-2.svg)

- Spannungen aus linearem (!) Stoffgesetz

- Schnittgr√∂√üen aus Integration der Spannungen

- Drillmomente $m_{xy}$ und $m_{yx}$ sind gleich gro√ü


## Spannungen und Schnittgr√∂√üen {.smaller}

![](00-pics/sigma-3.svg)

- Spannungen aus linearem (!) Stoffgesetz

- Schnittgr√∂√üen aus Integration der Spannungen

- Querkraft $q_x$ auf Schnittfl√§che normal zur $x$-Achse, Querkraft $q_y$ analog


## Gleichgewichtsbedingungen {.smaller}

:::: {.columns}
::: {.column width="60%"}
![](00-pics/gleichgewicht.svg)
:::
::: {.column width="40%"}
**Differentialgleichungen**
$$
\begin{align}
q_{x,x}(x, y) + q_{y,y}(x,y) & = q
\\[1em]
m_{xy,x}(x, y) + m_{y,y}(x, y) & = q_y(x, y)
\\[1em]
m_{x,x}(x, y) + m_{xy,y}(x, y) & = q_x(x, y)
\end{align}
$$
:::
::::

**Vorgehensweise**

- Gleichgewichtsbedingungen $\sum V, \sum M_x, \sum M_y$ aufstellen 

- Grenz√ºbergang $\Delta x, \Delta y \to 0$ 

- Die Bezeichnung $m_{x,x}(x, y)$ meint die partielle Ableitung $\partial/\partial x \; m_x(x, y)$


## Alles zusammen

![](00-pics/schema.svg)


## Plattengleichung Kirchhoff {.smaller}

$$
   \frac{h^3 E}{12(1-\nu^2)} (w_{xxxx}(x, y) + 2w_{xxyy}(x, y) + w_{yyyy}(x, y)) = q
$$

- Eine partielle Differentialgleichungen **vierter** Ordnung

- Eine unbekannte Funktionen $w \to \R$

- Analytische L√∂sung f√ºr Kreisplatte

- L√∂sungen f√ºr Rechteckplatten in Czerny-Tafeln (Betonkalender)


## Plattengleichungen Reissner-Mindlin {.smaller}

$$
\begin{align}
  \tfrac{h^3}{12} (\tfrac{E}{1-\nu^2}(\alpha_{xx} + \nu \beta_{xy})+G(\alpha_{yy}+\beta_{xy}))
  -
  kGh(\alpha + w_x)
  & = 0
  \\[1ex]
  \tfrac{h^3}{12} (\tfrac{E}{1-\nu^2}(\nu\alpha_{xy} +  \beta_{yy})+G(\alpha_{xy}+\beta_{xx}))
  -
  kGh(\beta + w_y)
  & = 0
  \\[1ex]
  kGh(\alpha_x + \beta_y + w_{xx} + w_{yy}) + q &= 0
\end{align}
$$

- Drei partielle Differentialgleichungen **zweiter** Ordnung

- Drei unbekannte Funktionen $w, \alpha, \beta: \Omega \to \R$

- Interessanterweise einfacher zu programmieren als Kirchhoff

- L√∂sungen f√ºr Rechteckplatten nach Stiglat-Wippel (Betonkalender)


# N√§herungsl√∂sung mit Finiten Elementen

```{julia}
include("setup-slides.jl");
```

## Anwendungsbeispiel {.smaller}

```{julia}
m, w = plate(8, 8, 3, 3, params);
NN = 4 * nnodes(m)
nb = collect(m.groups[:boundarynodes])
ni = [i for i in 1:nnodes(m) if i ‚àâ nb]
adofs = dofs(ni, 4)
NNa = length(adofs);
```

:::: {.columns}
::: {.column width="50%"}
```{julia}
f = mkfig(a3d=false,w=800, h=800)
mplot!(m, edgesvisible=false, nodesvisible=false)
f
```
:::
::: {.column width="50%"}
[]{.down20}

- Deckenplatte $\SI{8}{m} \times \SI{8}{m}$ 

- Allseitig eingespannt gelagert

- $E=\SI{31000}{N/mm}^2$ und $\nu = 0$

- Dicke $d = \SI{20}{cm}$, 

- Belastung $q = \SI{5}{kN/m}^2$

- Kirchhoff-Plattentheorie

$\nu = 0$ f√ºr Vergleich mit Czerny-Tafeln
:::
::::


## üí° FE: N√§herungsl√∂sung {.smaller}

$\quad$

Vorgegebene Funktionen zu N√§herungsl√∂sung zusammenbauen

$$
    w_h(x, y) = \sum_{i=1}^N \hat w_i \cdot \varphi_i(x, y)
$$

- $w_h$ ist die N√§herungsl√∂sung (Index $h$ sp√§ter)

- $\varphi_i: \Omega \to \R$ hei√üen Basisfunktionen

- $\Omega$ ist das Berechnungsgebiet (die Platte)

- $\hat w_i \in \R$ hei√üen Freiheitsgrade

- $N$ ist die Anzahl der Freiheitsgrade

```{julia}
out = open("_generated/basis-functions.qmd", "w")

for i in 1:length(adofs)
println(out,
"## 
Basisfunktion \$\\quad \\varphi_{$i}\$
```{julia}
plotw(
    m, 
    ei(NN, adofs[$i]), 
    w=1200, h=550, # colorrange=[-1, 1], # colormap=:redblue,
    limits=(nothing,nothing,(-1,1))
)
\`\`\`
"
)
end


for i in 1:3
println(out,
"## 
Zuf√§llige Kombination $i/3
```{julia}
wrand = zeros(NN)
wrand[adofs] = rand(NNa)
plotw(
    m, 
    wrand, 
    w=1200, h=550, # colorrange=[-1, 1], # colormap=:redblue,
    limits=(nothing,nothing,(-1,1))
)
\`\`\`
"
)
end

close(out)
```

{{< include _generated/basis-functions.qmd >}}


## üí° FE: Basisfunktionen elementweise {.smaller}

:::: {.columns}
::: {.column width="50%"}
```{julia}
f = mkfig(a3d=false,w=800, h=800)
mplot!(m, edgesvisible=true, nodesvisible=true)
f
```
:::
::: {.column width="50%"}
[]{.down20}

- Gebiet wird in Elemente zerlegt

- In der Ebene: Drei- oder Vierecke

- Elemente an Knoten miteinander verbunden

- Anzahl der Elemente frei w√§hlbar
:::
::::


## üí° FE: Basisfunktionen elementweise {.smaller}

:::: {.columns}
::: {.column width="55%"}
**Funktionen f√ºr ein Element**
```{julia}
include("setup-slides.jl");
GLMakie.activate!()
fplot3d(H4) # ,colormap=:redblue)
```
:::
::: {.column width="45%"}
**Kombination der Elementfunktionen**
```{julia}
plotw(
    m, 
    ei(NN, adofs[5]), 
    w=1200, h=550, # colorrange=[-1, 1], # colormap=:redblue,
    edgesvisible=true, mesh=nothing,
    limits=(nothing,nothing,(-1,1))
)
```
[]{.up40}
```{julia}
plotw(
    m, 
    ei(NN, adofs[12]), zs=4,
    w=1200, h=550, # colorrange=[-1, 1], # colormap=:redblue,
    edgesvisible=true, mesh=nothing,
    limits=(nothing,nothing,(-1,1))
)
```
:::
::::

$\rightarrow$ Wichtig bei Kirchhoff-Platte: Kein Knick an den Nahtstellen!


## üí° FE: Optimale Koeffizienten $\hat w_i$ {.smaller}

Bestimmung aus linearem Gleichungssystem

$$
    \mathbf{K}\hat{\mathbf{w}} = \mathbf{r}
$$

- Herleitung: Koeffizienten so w√§hlen, dass Fehler im 'gewichteten Mittel' minimal wird

- N√§herungsl√∂sung: Differentialgleichung wird nicht in jedem Punkt erf√ºllt

- Diskretisierungsfehler: Unterschied zwischen N√§herung $w_h$ und exakter L√∂sung $w$

- Auflagerbedingungen und Lasten im LGS ber√ºcksichtigen

- Matrix $\mathbf{K}$ wird wieder aus Elementmatrizen assembliert

- Elementmatrizen nicht unmittelbar physikalisch interpretierbar

- Kinematisches System wie f√ºr Stabtragwerke

$\rightarrow$ Mathematische Theorie umfangreich und schwierig!


## Anwendungsbeispiel

```{julia}
function plotsol(n,mesh)
m, w = plate(8, 8, n, n, params);
plotw(
    m, 
    w, 
    w=1200, h=650,
    zs=2400*maximum(w),
    edgesvisible=true, edgeslinewidth=4, mesh=mesh,
    limits=(nothing,nothing,(0,1.15))
)
end;
```


## L√∂sung mit 4 Elementen
```{julia}
plotsol(2, 5)
```


## L√∂sung mit 9 Elementen
```{julia}
plotsol(3, 5)
```


## L√∂sung mit 16 Elementen
```{julia}
plotsol(4, 5)
```


## L√∂sung mit 100 Elementen
```{julia}
plotsol(10, 5)
```


## Konvergenz
```{julia}
CairoMakie.activate!()
l = 8
nn = [];
ww = [];
for n = 4:2:30
    mn, wn = plate(l, l, n, n, params)
    push!(nn, 4 * nnodes(mn))
    push!(ww, maximum(abs.(wn[1:4:end])))
end
w_fe = ww[end];
```

:::: {.columns}
::: {.column width="50%"}
```{julia}
fig = Figure()
Axis(fig[1, 1], xlabel="Anzahl Freiheitsgrade", ylabel="Maximale Verschiebung in mm")
scatterlines!(nn, 1000*ww)
fig
```
:::
::: {.column width="50%"}
- Verschiebung n√§hert sich exakter L√∂sung an
- Wenige Elemente: Verschiebung zu gro√ü
- Wichtiger: Schnittgr√∂√üen - sp√§ter
:::
TODO: Vergleich Reissner-Mindlin
::::


## Vergleich mit Czerny-Tafel {.smaller}

![](00-pics/czerny.png)

```{julia}
#| echo: true
w_czerny = 5e3 * 8^4 / (31000e6 * 0.2^3) * 0.0152
100 * abs(w_fe - w_czerny) / w_czerny
```

$\rightarrow$ Hervorragende √úbereinstimmung mit 0.05 Prozent Unterschied


## Schnittgr√∂√üen und Spannungen 

Wird noch erg√§nzt


# Zusammenfassung

##

- Plattentheorien: Schubstarr (Kirchhoff) und schubweich (Reissner-Mindlin)

- Differentialgleichungen i.d.R. nicht auf dem Papier l√∂sbar

- Kernideen der Finite-Elemente-Methode

  1. N√§herungsl√∂sung $w_h(x, y) = \sum \hat w_i \cdot \varphi_i(x, y)$ 

  1. Basisfunktionen $\varphi_i$ elementweise definiert

  1. Optimale Koeffizienten $\hat w_i$ aus LGS $\mathbf{K}\hat{\mathbf{w}} = \mathbf{r}$

- Diskretisierungsfehler abh√§ngig von Anzahl der Elemente


## Anmerkungen

Das waren die (meiner Meinung nach) wichtigsten Ideen. Genauer nachlesen:

- Plattentheorie: @altenbach_ebene_2023 und @mittelstedt_theory_2023

- Finite Elemente

  - Praktisch orientiert: @werkle_finite_2008 und @fish_2007

  - Mathematisch ausgerichtet: @johnson_numerical_1987 und @braess_finite_2013

# Literatur {.smaller}

