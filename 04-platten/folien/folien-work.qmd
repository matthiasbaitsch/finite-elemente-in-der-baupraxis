---
title: 4. Finite Elemente f√ºr Plattentragwerke

format:
    revealjs: default

jupyter: julia-1.10

fig-format: png
---

\newcommand{\mmat}[1]{\begin{pmatrix} #1 \end{pmatrix}}
\newcommand{\SI}[2]{#1\,\text{#2}}
\newcommand{\mmund}{\quad \text{und} \quad}

\newcommand{\xa}{\mathbf{x}_1}
\newcommand{\xb}{\mathbf{x}_2}
\newcommand{\ua}{\mathbf{u}_1}
\newcommand{\ub}{\mathbf{u}_2}

\newcommand{\R}{\mathbb{R}}

\newcommand{\kka}[1]{{\color{purple}{#1}}}
\newcommand{\kkb}[1]{{\color{orange}{#1}}}
\newcommand{\kkc}[1]{{\color{teal}{#1}}}

```{julia}
include("setup-slides.jl");
```

## Beispiel {.smaller}

```{julia}
m, w = plate(8, 8, 3, 3, params);
NN = 4 * nnodes(m)
nb = collect(m.groups[:boundarynodes])
ni = [i for i in 1:nnodes(m) if i ‚àâ nb]
adofs = dofs(ni, 4);
NNa = length(adofs)
```

:::: {.columns}
::: {.column width="50%"}
```{julia}
f = mkfig(a3d=false,w=800, h=800)
mplot!(m, edgesvisible=false, nodesvisible=false)
f
```
:::
::: {.column width="50%"}
[]{.down20}

- Deckenplatte $\SI{8}{m} \times \SI{8}{m}$ 

- Allseitig eingespannt gelagert

- $E=\SI{31000}{N/mm}^2$ und $\nu = 0$

- Dicke $d = \SI{20}{cm}$, 

- Belastung $q = \SI{5}{kN/m}^2$

- Kirchhoff-Plattentheorie

$\nu = 0$ f√ºr Vergleich mit Czerny-Tafeln
:::
::::


## üí° FE: N√§herungsl√∂sung {.smaller}

$\quad$

Vorgegebene Funktionen zu N√§herungsl√∂sung zusammenbauen

$$
    w_h(x, y) = \sum_{i=1}^N \hat w_i \cdot \varphi_i(x, y)
$$

- $w_h$ ist die N√§herungsl√∂sung (Index $h$ sp√§ter)

- $\varphi_i: \Omega \to \R$ hei√üen Basisfunktionen

- $\Omega$ ist das Berechnungsgebiet (die Platte)

- $\hat w_i \in \R$ hei√üen Freiheitsgrade

- $N$ ist die Anzahl der Freiheitsgrade

```{julia}
out = open("_generated/basis-functions.qmd", "w")

for i in 1:length(adofs)
println(out,
"## 
Basisfunktion \$\\quad \\varphi_{$i}\$
```{julia}
plotw(
    m, 
    ei(NN, adofs[$i]), 
    w=1200, h=550, colorrange=[-1, 1], colormap=:redblue,
    limits=(nothing,nothing,(-1,1))
)
\`\`\`
"
)
end


for i in 1:3
println(out,
"## 
Zuf√§llige Kombination $i/3
```{julia}
wrand = zeros(NN)
wrand[adofs] = rand(NNa)
plotw(
    m, 
    wrand, 
    w=1200, h=550, colorrange=[-1, 1], colormap=:redblue,
    limits=(nothing,nothing,(-1,1))
)
\`\`\`
"
)
end

close(out)
```

{{< include _generated/basis-functions.qmd >}}


## üí° FE: Basisfunktionen elementweise {.smaller}

:::: {.columns}
::: {.column width="50%"}
```{julia}
f = mkfig(a3d=false,w=800, h=800)
mplot!(m, edgesvisible=true, nodesvisible=true)
f
```
:::
::: {.column width="50%"}
[]{.down20}

- Gebiet wird in Elemente zerlegt

- In der Ebene: Drei- oder Vierecke

- Elemente an Knoten miteinander verbunden

- Anzahl der Elemente frei w√§hlbar
:::
::::


## üí° FE: Basisfunktionen elementweise {.smaller}

:::: {.columns}
::: {.column width="55%"}
**Funktionen f√ºr ein Element**
```{julia}
GLMakie.activate!()
fplot3d(H4,colormap=:redblue)
```
:::
::: {.column width="45%"}
**Kombination der Elementfunktionen**
```{julia}
plotw(
    m, 
    ei(NN, adofs[5]), 
    w=1200, h=550, colorrange=[-1, 1], colormap=:redblue,
    edgesvisible=true, mesh=nothing,
    limits=(nothing,nothing,(-1,1))
)
```
[]{.up40}
```{julia}
plotw(
    m, 
    ei(NN, adofs[12]), zs=4,
    w=1200, h=550, colorrange=[-1, 1], colormap=:redblue,
    edgesvisible=true, mesh=nothing,
    limits=(nothing,nothing,(-1,1))
)
```
:::
::::

$\rightarrow$ Wichtig bei Kirchhoff-Platte: Kein Knick an den Nahtstellen!


## üí° FE: Optimale Koeffizienten $\hat w_i$ {.smaller}

Bestimmung aus linearem Gleichungssystem

$$
    \mathbf{K}\hat\mathbf{w} = \mathbf{r}
$$

- Herleitung: Koeffizienten so w√§hlen, dass Fehler im 'gewichteten Mittel' minimal wird

- N√§herungsl√∂sung: Differentialgleichung wird nicht in jedem Punkt erf√ºllt

- Diskretisierungsfehler: Unterschied zwischen N√§herung $w_h$ und exakter L√∂sung $w$

- Auflagerbedingungen und Lasten im LGS ber√ºcksichtigen

- Matrix $\mathbf{K}$ wird wieder aus Elementmatrizen assembliert

- Kinematisches System wie f√ºr Stabtragwerke

$\rightarrow$ Mathematische Theorie umfangreich und schwierig!


## Anwendungsbeispiel

```{julia}
include("setup-slides.jl");
function plotsol(n,mesh)
m, w = plate(8, 8, n, n, params);
plotw(
    m, 
    w, 
    w=1200, h=650,
    zs=2400*maximum(w),
    edgesvisible=true, edgeslinewidth=4, mesh=mesh,
    limits=(nothing,nothing,(0,1.15))
)
end;
```

## L√∂sung mit 4 Elementen
```{julia}
plotsol(2, 5)
```

## L√∂sung mit 9 Elementen
```{julia}
plotsol(3, 5)
```

## L√∂sung mit 16 Elementen
```{julia}
plotsol(4, 5)
```

## L√∂sung mit 100 Elementen
```{julia}
plotsol(10, 5)
```

## Konvergenz
```{julia}
CairoMakie.activate!()
l = 8
hh = [];
nn = [];
ww = [];
for n = 4:2:30
    mn, wn = plate(l, l, n, n, params)
    push!(hh, l / n)
    push!(nn, 4 * nnodes(mn))
    push!(ww, maximum(abs.(wn[1:4:end])))
end
```

```{julia}
fig = Figure()
Axis(fig[1, 1], xlabel="Anzahl Freiheitsgrade", ylabel="Maximale Verschiebung in mm")
scatterlines!(nn, 1000*ww)
fig
```

## Vergleich mit Czerny-Tafel {.smaller}

![](00-pics/czerny.png)

```{julia}
#| echo: true
w_fe = ww[end]
w_czerny = params.q * l^4 / (params.E * params.d^3) * 0.0152
100 * abs(w_fe - w_czerny) / w_czerny
```

$\rightarrow$ Hervorragende √úbereinstimmung mit 0.05 Prozent Unterschied